// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lssdrpc.proto

#include "lssdrpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigInteger_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextConfiguration_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndConfiguration_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Order_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderPortion_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSummary_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderbookFailure_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlaceOrderFailure_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFailure_lssdrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSuccess_lssdrpc_2eproto;
namespace lssdrpc {
class BigIntegerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigInteger> _instance;
} _BigInteger_default_instance_;
class AddCurrencyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCurrencyRequest> _instance;
  const ::lssdrpc::LndConfiguration* lnd_;
  const ::lssdrpc::ConnextConfiguration* connext_;
} _AddCurrencyRequest_default_instance_;
class ConnextConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextConfiguration> _instance;
} _ConnextConfiguration_default_instance_;
class LndConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LndConfiguration> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawcert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaroon_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_macaroon_;
} _LndConfiguration_default_instance_;
class AddCurrencyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCurrencyResponse> _instance;
} _AddCurrencyResponse_default_instance_;
class GetAddedCurrenciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddedCurrenciesRequest> _instance;
} _GetAddedCurrenciesRequest_default_instance_;
class GetAddedCurrenciesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddedCurrenciesResponse> _instance;
} _GetAddedCurrenciesResponse_default_instance_;
class EnableTradingPairRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableTradingPairRequest> _instance;
} _EnableTradingPairRequest_default_instance_;
class EnableTradingPairResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableTradingPairResponse> _instance;
} _EnableTradingPairResponse_default_instance_;
class GetActiveTradingPairRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetActiveTradingPairRequest> _instance;
} _GetActiveTradingPairRequest_default_instance_;
class GetActiveTradingPairResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetActiveTradingPairResponse> _instance;
} _GetActiveTradingPairResponse_default_instance_;
class SubscribeOrderbookStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeOrderbookStateRequest> _instance;
} _SubscribeOrderbookStateRequest_default_instance_;
class OrderbookStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderbookState> _instance;
} _OrderbookState_default_instance_;
class ListOrdersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrdersRequest> _instance;
} _ListOrdersRequest_default_instance_;
class ListOrdersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrdersResponse> _instance;
} _ListOrdersResponse_default_instance_;
class ListOwnOrdersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOwnOrdersRequest> _instance;
} _ListOwnOrdersRequest_default_instance_;
class ListOwnOrdersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOwnOrdersResponse> _instance;
} _ListOwnOrdersResponse_default_instance_;
class PlaceOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderRequest> _instance;
} _PlaceOrderRequest_default_instance_;
class PlaceOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderResponse> _instance;
  const ::lssdrpc::SwapSuccess* swapsuccess_;
  const ::lssdrpc::Order* order_;
  const ::lssdrpc::PlaceOrderFailure* failure_;
} _PlaceOrderResponse_default_instance_;
class OrderbookFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderbookFailure> _instance;
} _OrderbookFailure_default_instance_;
class PlaceOrderFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderFailure> _instance;
  const ::lssdrpc::SwapFailure* swapfailure_;
  const ::lssdrpc::OrderbookFailure* orderbookfailure_;
} _PlaceOrderFailure_default_instance_;
class CancelOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOrderRequest> _instance;
} _CancelOrderRequest_default_instance_;
class CancelOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOrderResponse> _instance;
} _CancelOrderResponse_default_instance_;
class SubscribeOrdersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeOrdersRequest> _instance;
} _SubscribeOrdersRequest_default_instance_;
class OrderUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderUpdate> _instance;
  const ::lssdrpc::OrderSummary* orderadded_;
  const ::lssdrpc::OrderSummary* orderremoval_;
} _OrderUpdate_default_instance_;
class OwnOrderUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OwnOrderUpdate> _instance;
  const ::lssdrpc::Order* orderadded_;
  const ::lssdrpc::Order* orderchanged_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordercompleted_;
} _OwnOrderUpdate_default_instance_;
class OrderSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderSummary> _instance;
} _OrderSummary_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderPortionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderPortion> _instance;
} _OrderPortion_default_instance_;
class SubscribeSwapsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeSwapsRequest> _instance;
} _SubscribeSwapsRequest_default_instance_;
class SwapResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapResult> _instance;
  const ::lssdrpc::SwapSuccess* success_;
  const ::lssdrpc::SwapFailure* failure_;
} _SwapResult_default_instance_;
class SwapSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapSuccess> _instance;
} _SwapSuccess_default_instance_;
class SwapFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapFailure> _instance;
} _SwapFailure_default_instance_;
class GenerateInvoiceToRentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToRentChannelCommand> _instance;
} _GenerateInvoiceToRentChannelCommand_default_instance_;
class GenerateInvoiceToRentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToRentChannelResponse> _instance;
} _GenerateInvoiceToRentChannelResponse_default_instance_;
class RentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentChannelCommand> _instance;
} _RentChannelCommand_default_instance_;
class RentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentChannelResponse> _instance;
} _RentChannelResponse_default_instance_;
class GetChannelStatusCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelStatusCommand> _instance;
} _GetChannelStatusCommand_default_instance_;
class GetChannelStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelStatusResponse> _instance;
} _GetChannelStatusResponse_default_instance_;
class GetFeeToRentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToRentChannelCommand> _instance;
} _GetFeeToRentChannelCommand_default_instance_;
class GetFeeToRentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToRentChannelResponse> _instance;
} _GetFeeToRentChannelResponse_default_instance_;
}  // namespace lssdrpc
static void InitDefaultsscc_info_AddCurrencyRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_AddCurrencyRequest_default_instance_;
    new (ptr) ::lssdrpc::AddCurrencyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::AddCurrencyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCurrencyRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddCurrencyRequest_lssdrpc_2eproto}, {
      &scc_info_LndConfiguration_lssdrpc_2eproto.base,
      &scc_info_ConnextConfiguration_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_AddCurrencyResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_AddCurrencyResponse_default_instance_;
    new (ptr) ::lssdrpc::AddCurrencyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::AddCurrencyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddCurrencyResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddCurrencyResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_BigInteger_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_BigInteger_default_instance_;
    new (ptr) ::lssdrpc::BigInteger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::BigInteger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigInteger_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BigInteger_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_CancelOrderRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_CancelOrderRequest_default_instance_;
    new (ptr) ::lssdrpc::CancelOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::CancelOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOrderRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelOrderRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_CancelOrderResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_CancelOrderResponse_default_instance_;
    new (ptr) ::lssdrpc::CancelOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::CancelOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOrderResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelOrderResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_ConnextConfiguration_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_ConnextConfiguration_default_instance_;
    new (ptr) ::lssdrpc::ConnextConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::ConnextConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextConfiguration_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnextConfiguration_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_EnableTradingPairRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_EnableTradingPairRequest_default_instance_;
    new (ptr) ::lssdrpc::EnableTradingPairRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::EnableTradingPairRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableTradingPairRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableTradingPairRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_EnableTradingPairResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_EnableTradingPairResponse_default_instance_;
    new (ptr) ::lssdrpc::EnableTradingPairResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::EnableTradingPairResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableTradingPairResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableTradingPairResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GenerateInvoiceToRentChannelCommand_default_instance_;
    new (ptr) ::lssdrpc::GenerateInvoiceToRentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GenerateInvoiceToRentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GenerateInvoiceToRentChannelResponse_default_instance_;
    new (ptr) ::lssdrpc::GenerateInvoiceToRentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GenerateInvoiceToRentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetActiveTradingPairRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetActiveTradingPairRequest_default_instance_;
    new (ptr) ::lssdrpc::GetActiveTradingPairRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetActiveTradingPairRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetActiveTradingPairRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetActiveTradingPairRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetActiveTradingPairResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetActiveTradingPairResponse_default_instance_;
    new (ptr) ::lssdrpc::GetActiveTradingPairResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetActiveTradingPairResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetActiveTradingPairResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetActiveTradingPairResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddedCurrenciesRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetAddedCurrenciesRequest_default_instance_;
    new (ptr) ::lssdrpc::GetAddedCurrenciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetAddedCurrenciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddedCurrenciesRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddedCurrenciesRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetAddedCurrenciesResponse_default_instance_;
    new (ptr) ::lssdrpc::GetAddedCurrenciesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetAddedCurrenciesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelStatusCommand_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetChannelStatusCommand_default_instance_;
    new (ptr) ::lssdrpc::GetChannelStatusCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetChannelStatusCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelStatusCommand_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChannelStatusCommand_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelStatusResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetChannelStatusResponse_default_instance_;
    new (ptr) ::lssdrpc::GetChannelStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetChannelStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelStatusResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChannelStatusResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetFeeToRentChannelCommand_default_instance_;
    new (ptr) ::lssdrpc::GetFeeToRentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetFeeToRentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_GetFeeToRentChannelResponse_default_instance_;
    new (ptr) ::lssdrpc::GetFeeToRentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::GetFeeToRentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_ListOrdersRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_ListOrdersRequest_default_instance_;
    new (ptr) ::lssdrpc::ListOrdersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::ListOrdersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOrdersRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListOrdersRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_ListOrdersResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_ListOrdersResponse_default_instance_;
    new (ptr) ::lssdrpc::ListOrdersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::ListOrdersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOrdersResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOrdersResponse_lssdrpc_2eproto}, {
      &scc_info_OrderSummary_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_ListOwnOrdersRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_ListOwnOrdersRequest_default_instance_;
    new (ptr) ::lssdrpc::ListOwnOrdersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::ListOwnOrdersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOwnOrdersRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListOwnOrdersRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_ListOwnOrdersResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_ListOwnOrdersResponse_default_instance_;
    new (ptr) ::lssdrpc::ListOwnOrdersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::ListOwnOrdersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOwnOrdersResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOwnOrdersResponse_lssdrpc_2eproto}, {
      &scc_info_Order_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_LndConfiguration_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_LndConfiguration_default_instance_;
    new (ptr) ::lssdrpc::LndConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::LndConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndConfiguration_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LndConfiguration_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_Order_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_Order_default_instance_;
    new (ptr) ::lssdrpc::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Order_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Order_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,
      &scc_info_OrderPortion_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_OrderPortion_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OrderPortion_default_instance_;
    new (ptr) ::lssdrpc::OrderPortion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OrderPortion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderPortion_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderPortion_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_OrderSummary_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OrderSummary_default_instance_;
    new (ptr) ::lssdrpc::OrderSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OrderSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSummary_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderSummary_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_OrderUpdate_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OrderUpdate_default_instance_;
    new (ptr) ::lssdrpc::OrderUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OrderUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderUpdate_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderUpdate_lssdrpc_2eproto}, {
      &scc_info_OrderSummary_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_OrderbookFailure_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OrderbookFailure_default_instance_;
    new (ptr) ::lssdrpc::OrderbookFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OrderbookFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderbookFailure_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderbookFailure_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_OrderbookState_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OrderbookState_default_instance_;
    new (ptr) ::lssdrpc::OrderbookState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OrderbookState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderbookState_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderbookState_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_OwnOrderUpdate_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_OwnOrderUpdate_default_instance_;
    new (ptr) ::lssdrpc::OwnOrderUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::OwnOrderUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnOrderUpdate_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OwnOrderUpdate_lssdrpc_2eproto}, {
      &scc_info_Order_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderFailure_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_PlaceOrderFailure_default_instance_;
    new (ptr) ::lssdrpc::PlaceOrderFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::PlaceOrderFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlaceOrderFailure_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlaceOrderFailure_lssdrpc_2eproto}, {
      &scc_info_SwapFailure_lssdrpc_2eproto.base,
      &scc_info_OrderbookFailure_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_PlaceOrderRequest_default_instance_;
    new (ptr) ::lssdrpc::PlaceOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::PlaceOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceOrderRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceOrderRequest_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_PlaceOrderResponse_default_instance_;
    new (ptr) ::lssdrpc::PlaceOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::PlaceOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlaceOrderResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlaceOrderResponse_lssdrpc_2eproto}, {
      &scc_info_SwapSuccess_lssdrpc_2eproto.base,
      &scc_info_Order_lssdrpc_2eproto.base,
      &scc_info_PlaceOrderFailure_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_RentChannelCommand_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_RentChannelCommand_default_instance_;
    new (ptr) ::lssdrpc::RentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::RentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentChannelCommand_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentChannelCommand_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_RentChannelResponse_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_RentChannelResponse_default_instance_;
    new (ptr) ::lssdrpc::RentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::RentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentChannelResponse_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentChannelResponse_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeOrderbookStateRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SubscribeOrderbookStateRequest_default_instance_;
    new (ptr) ::lssdrpc::SubscribeOrderbookStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SubscribeOrderbookStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeOrderbookStateRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeOrderbookStateRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeOrdersRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SubscribeOrdersRequest_default_instance_;
    new (ptr) ::lssdrpc::SubscribeOrdersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SubscribeOrdersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeOrdersRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeOrdersRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeSwapsRequest_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SubscribeSwapsRequest_default_instance_;
    new (ptr) ::lssdrpc::SubscribeSwapsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SubscribeSwapsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeSwapsRequest_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeSwapsRequest_lssdrpc_2eproto}, {}};

static void InitDefaultsscc_info_SwapFailure_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SwapFailure_default_instance_;
    new (ptr) ::lssdrpc::SwapFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SwapFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFailure_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapFailure_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_SwapResult_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SwapResult_default_instance_;
    new (ptr) ::lssdrpc::SwapResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SwapResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SwapResult_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SwapResult_lssdrpc_2eproto}, {
      &scc_info_SwapSuccess_lssdrpc_2eproto.base,
      &scc_info_SwapFailure_lssdrpc_2eproto.base,}};

static void InitDefaultsscc_info_SwapSuccess_lssdrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lssdrpc::_SwapSuccess_default_instance_;
    new (ptr) ::lssdrpc::SwapSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lssdrpc::SwapSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSuccess_lssdrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapSuccess_lssdrpc_2eproto}, {
      &scc_info_BigInteger_lssdrpc_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lssdrpc_2eproto[41];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lssdrpc_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lssdrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lssdrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::BigInteger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::BigInteger, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::AddCurrencyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::AddCurrencyRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::AddCurrencyRequest, currency_),
  offsetof(::lssdrpc::AddCurrencyRequestDefaultTypeInternal, lnd_),
  offsetof(::lssdrpc::AddCurrencyRequestDefaultTypeInternal, connext_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::AddCurrencyRequest, conf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ConnextConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ConnextConfiguration, connextchannel_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ConnextConfiguration, tokenaddress_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ConnextConfiguration, eventresolver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::LndConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::LndConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::LndConfiguration, lndchannel_),
  offsetof(::lssdrpc::LndConfigurationDefaultTypeInternal, certpath_),
  offsetof(::lssdrpc::LndConfigurationDefaultTypeInternal, rawcert_),
  offsetof(::lssdrpc::LndConfigurationDefaultTypeInternal, macaroon_path_),
  offsetof(::lssdrpc::LndConfigurationDefaultTypeInternal, raw_macaroon_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::LndConfiguration, tlsCert_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::LndConfiguration, macaroon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::AddCurrencyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetAddedCurrenciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetAddedCurrenciesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetAddedCurrenciesResponse, currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::EnableTradingPairRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::EnableTradingPairRequest, pairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::EnableTradingPairResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetActiveTradingPairRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetActiveTradingPairResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetActiveTradingPairResponse, pairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SubscribeOrderbookStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersRequest, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersRequest, lastknownprice_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOrdersResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOwnOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOwnOrdersRequest, pairid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOwnOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::ListOwnOrdersResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderRequest, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderRequest, side_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderRequest, funds_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderRequest, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lssdrpc::PlaceOrderResponseDefaultTypeInternal, swapsuccess_),
  offsetof(::lssdrpc::PlaceOrderResponseDefaultTypeInternal, order_),
  offsetof(::lssdrpc::PlaceOrderResponseDefaultTypeInternal, failure_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderResponse, outcome_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookFailure, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookFailure, funds_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookFailure, failurereason_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderbookFailure, requiredfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderFailure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lssdrpc::PlaceOrderFailureDefaultTypeInternal, swapfailure_),
  offsetof(::lssdrpc::PlaceOrderFailureDefaultTypeInternal, orderbookfailure_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::PlaceOrderFailure, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::CancelOrderRequest, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::CancelOrderRequest, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::CancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SubscribeOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lssdrpc::OrderUpdateDefaultTypeInternal, orderadded_),
  offsetof(::lssdrpc::OrderUpdateDefaultTypeInternal, orderremoval_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderUpdate, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OwnOrderUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OwnOrderUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lssdrpc::OwnOrderUpdateDefaultTypeInternal, orderadded_),
  offsetof(::lssdrpc::OwnOrderUpdateDefaultTypeInternal, orderchanged_),
  offsetof(::lssdrpc::OwnOrderUpdateDefaultTypeInternal, ordercompleted_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OwnOrderUpdate, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderSummary, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderSummary, price_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderSummary, funds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, orderid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, price_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, funds_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, createdat_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, side_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, isownorder_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, open_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::Order, closed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderPortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderPortion, orderid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::OrderPortion, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SubscribeSwapsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lssdrpc::SwapResultDefaultTypeInternal, success_),
  offsetof(::lssdrpc::SwapResultDefaultTypeInternal, failure_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapResult, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, orderid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, funds_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, rhash_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, amountreceived_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, amountsent_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, role_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, currencyreceived_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, currencysent_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, rpreimage_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapSuccess, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapFailure, orderid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapFailure, pairid_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapFailure, funds_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::SwapFailure, failurereason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelCommand, capacity_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GenerateInvoiceToRentChannelResponse, paymentrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelCommand, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelCommand, nodepublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::RentChannelResponse, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetChannelStatusCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetChannelStatusCommand, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetChannelStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetChannelStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetChannelStatusResponse, expiresat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelCommand, capacity_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelResponse, fee_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelResponse, rentingfee_),
  PROTOBUF_FIELD_OFFSET(::lssdrpc::GetFeeToRentChannelResponse, onchainfees_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lssdrpc::BigInteger)},
  { 6, -1, sizeof(::lssdrpc::AddCurrencyRequest)},
  { 15, -1, sizeof(::lssdrpc::ConnextConfiguration)},
  { 23, -1, sizeof(::lssdrpc::LndConfiguration)},
  { 35, -1, sizeof(::lssdrpc::AddCurrencyResponse)},
  { 40, -1, sizeof(::lssdrpc::GetAddedCurrenciesRequest)},
  { 45, -1, sizeof(::lssdrpc::GetAddedCurrenciesResponse)},
  { 51, -1, sizeof(::lssdrpc::EnableTradingPairRequest)},
  { 57, -1, sizeof(::lssdrpc::EnableTradingPairResponse)},
  { 62, -1, sizeof(::lssdrpc::GetActiveTradingPairRequest)},
  { 67, -1, sizeof(::lssdrpc::GetActiveTradingPairResponse)},
  { 73, -1, sizeof(::lssdrpc::SubscribeOrderbookStateRequest)},
  { 78, -1, sizeof(::lssdrpc::OrderbookState)},
  { 84, -1, sizeof(::lssdrpc::ListOrdersRequest)},
  { 92, -1, sizeof(::lssdrpc::ListOrdersResponse)},
  { 98, -1, sizeof(::lssdrpc::ListOwnOrdersRequest)},
  { 104, -1, sizeof(::lssdrpc::ListOwnOrdersResponse)},
  { 110, -1, sizeof(::lssdrpc::PlaceOrderRequest)},
  { 119, -1, sizeof(::lssdrpc::PlaceOrderResponse)},
  { 128, -1, sizeof(::lssdrpc::OrderbookFailure)},
  { 137, -1, sizeof(::lssdrpc::PlaceOrderFailure)},
  { 145, -1, sizeof(::lssdrpc::CancelOrderRequest)},
  { 152, -1, sizeof(::lssdrpc::CancelOrderResponse)},
  { 157, -1, sizeof(::lssdrpc::SubscribeOrdersRequest)},
  { 162, -1, sizeof(::lssdrpc::OrderUpdate)},
  { 170, -1, sizeof(::lssdrpc::OwnOrderUpdate)},
  { 179, -1, sizeof(::lssdrpc::OrderSummary)},
  { 187, -1, sizeof(::lssdrpc::Order)},
  { 201, -1, sizeof(::lssdrpc::OrderPortion)},
  { 208, -1, sizeof(::lssdrpc::SubscribeSwapsRequest)},
  { 213, -1, sizeof(::lssdrpc::SwapResult)},
  { 221, -1, sizeof(::lssdrpc::SwapSuccess)},
  { 237, -1, sizeof(::lssdrpc::SwapFailure)},
  { 246, -1, sizeof(::lssdrpc::GenerateInvoiceToRentChannelCommand)},
  { 255, -1, sizeof(::lssdrpc::GenerateInvoiceToRentChannelResponse)},
  { 261, -1, sizeof(::lssdrpc::RentChannelCommand)},
  { 269, -1, sizeof(::lssdrpc::RentChannelResponse)},
  { 275, -1, sizeof(::lssdrpc::GetChannelStatusCommand)},
  { 281, -1, sizeof(::lssdrpc::GetChannelStatusResponse)},
  { 288, -1, sizeof(::lssdrpc::GetFeeToRentChannelCommand)},
  { 297, -1, sizeof(::lssdrpc::GetFeeToRentChannelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_BigInteger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_AddCurrencyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_ConnextConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_LndConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_AddCurrencyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetAddedCurrenciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetAddedCurrenciesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_EnableTradingPairRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_EnableTradingPairResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetActiveTradingPairRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetActiveTradingPairResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SubscribeOrderbookStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OrderbookState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_ListOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_ListOrdersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_ListOwnOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_ListOwnOrdersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_PlaceOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_PlaceOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OrderbookFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_PlaceOrderFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_CancelOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_CancelOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SubscribeOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OrderUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OwnOrderUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OrderSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_OrderPortion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SubscribeSwapsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SwapResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SwapSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_SwapFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GenerateInvoiceToRentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GenerateInvoiceToRentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_RentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_RentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetChannelStatusCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetChannelStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetFeeToRentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lssdrpc::_GetFeeToRentChannelResponse_default_instance_),
};

const char descriptor_table_protodef_lssdrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rlssdrpc.proto\022\007lssdrpc\"\033\n\nBigInteger\022\r"
  "\n\005value\030\001 \001(\t\"\212\001\n\022AddCurrencyRequest\022\020\n\010"
  "currency\030\001 \001(\t\022(\n\003lnd\030\003 \001(\0132\031.lssdrpc.Ln"
  "dConfigurationH\000\0220\n\007connext\030\004 \001(\0132\035.lssd"
  "rpc.ConnextConfigurationH\000B\006\n\004conf\"[\n\024Co"
  "nnextConfiguration\022\026\n\016connextChannel\030\001 \001"
  "(\t\022\024\n\014tokenAddress\030\002 \001(\t\022\025\n\reventResolve"
  "r\030\003 \001(\t\"\225\001\n\020LndConfiguration\022\022\n\nlndChann"
  "el\030\001 \001(\t\022\022\n\010certPath\030\002 \001(\tH\000\022\021\n\007rawCert\030"
  "\003 \001(\tH\000\022\027\n\rmacaroon_path\030\004 \001(\tH\001\022\026\n\014raw_"
  "macaroon\030\005 \001(\tH\001B\t\n\007tlsCertB\n\n\010macaroon\""
  "\025\n\023AddCurrencyResponse\"\033\n\031GetAddedCurren"
  "ciesRequest\".\n\032GetAddedCurrenciesRespons"
  "e\022\020\n\010currency\030\001 \003(\t\"*\n\030EnableTradingPair"
  "Request\022\016\n\006pairId\030\001 \001(\t\"\033\n\031EnableTrading"
  "PairResponse\"\035\n\033GetActiveTradingPairRequ"
  "est\".\n\034GetActiveTradingPairResponse\022\016\n\006p"
  "airId\030\001 \003(\t\" \n\036SubscribeOrderbookStateRe"
  "quest\"u\n\016OrderbookState\022,\n\005state\030\001 \001(\0162\035"
  ".lssdrpc.OrderbookState.State\"5\n\005State\022\013"
  "\n\007UNKNOWN\020\000\022\r\n\tCONNECTED\020\001\022\020\n\014DISCONNECT"
  "ED\020\002\"J\n\021ListOrdersRequest\022\016\n\006pairId\030\001 \001("
  "\t\022\026\n\016lastKnownPrice\030\002 \001(\003\022\r\n\005limit\030\003 \001(\r"
  "\";\n\022ListOrdersResponse\022%\n\006orders\030\001 \003(\0132\025"
  ".lssdrpc.OrderSummary\"&\n\024ListOwnOrdersRe"
  "quest\022\016\n\006pairId\030\001 \001(\t\"7\n\025ListOwnOrdersRe"
  "sponse\022\036\n\006orders\030\001 \003(\0132\016.lssdrpc.Order\"\215"
  "\001\n\021PlaceOrderRequest\022\016\n\006pairId\030\001 \001(\t\022 \n\004"
  "side\030\002 \001(\0162\022.lssdrpc.OrderSide\022\"\n\005funds\030"
  "\003 \001(\0132\023.lssdrpc.BigInteger\022\"\n\005price\030\004 \001("
  "\0132\023.lssdrpc.BigInteger\"\234\001\n\022PlaceOrderRes"
  "ponse\022+\n\013swapSuccess\030\001 \001(\0132\024.lssdrpc.Swa"
  "pSuccessH\000\022\037\n\005order\030\002 \001(\0132\016.lssdrpc.Orde"
  "rH\000\022-\n\007failure\030\003 \001(\0132\032.lssdrpc.PlaceOrde"
  "rFailureH\000B\t\n\007outcome\"\207\001\n\020OrderbookFailu"
  "re\022\016\n\006pairId\030\001 \001(\t\022\"\n\005funds\030\002 \001(\0132\023.lssd"
  "rpc.BigInteger\022\025\n\rfailureReason\030\003 \001(\t\022(\n"
  "\013requiredFee\030\004 \001(\0132\023.lssdrpc.BigInteger\""
  "\202\001\n\021PlaceOrderFailure\022+\n\013swapFailure\030\001 \001"
  "(\0132\024.lssdrpc.SwapFailureH\000\0225\n\020orderbookF"
  "ailure\030\002 \001(\0132\031.lssdrpc.OrderbookFailureH"
  "\000B\t\n\007failure\"5\n\022CancelOrderRequest\022\016\n\006pa"
  "irId\030\001 \001(\t\022\017\n\007orderId\030\002 \001(\t\"\025\n\023CancelOrd"
  "erResponse\"\030\n\026SubscribeOrdersRequest\"s\n\013"
  "OrderUpdate\022+\n\norderAdded\030\001 \001(\0132\025.lssdrp"
  "c.OrderSummaryH\000\022-\n\014orderRemoval\030\002 \001(\0132\025"
  ".lssdrpc.OrderSummaryH\000B\010\n\006update\"\202\001\n\016Ow"
  "nOrderUpdate\022$\n\norderAdded\030\001 \001(\0132\016.lssdr"
  "pc.OrderH\000\022&\n\014orderChanged\030\002 \001(\0132\016.lssdr"
  "pc.OrderH\000\022\030\n\016orderCompleted\030\003 \001(\tH\000B\010\n\006"
  "update\"f\n\014OrderSummary\022\016\n\006pairId\030\001 \001(\t\022\""
  "\n\005price\030\002 \001(\0132\023.lssdrpc.BigInteger\022\"\n\005fu"
  "nds\030\003 \001(\0132\023.lssdrpc.BigInteger\"\205\002\n\005Order"
  "\022\016\n\006pairId\030\001 \001(\t\022\017\n\007orderId\030\002 \001(\t\022\"\n\005pri"
  "ce\030\003 \001(\0132\023.lssdrpc.BigInteger\022\"\n\005funds\030\004"
  " \001(\0132\023.lssdrpc.BigInteger\022\021\n\tcreatedAt\030\005"
  " \001(\004\022 \n\004side\030\006 \001(\0162\022.lssdrpc.OrderSide\022\022"
  "\n\nisOwnOrder\030\007 \001(\010\022#\n\004open\030\010 \003(\0132\025.lssdr"
  "pc.OrderPortion\022%\n\006closed\030\t \003(\0132\025.lssdrp"
  "c.OrderPortion\"D\n\014OrderPortion\022\017\n\007orderI"
  "d\030\001 \001(\t\022#\n\006amount\030\002 \001(\0132\023.lssdrpc.BigInt"
  "eger\"\027\n\025SubscribeSwapsRequest\"g\n\nSwapRes"
  "ult\022\'\n\007success\030\001 \001(\0132\024.lssdrpc.SwapSucce"
  "ssH\000\022\'\n\007failure\030\002 \001(\0132\024.lssdrpc.SwapFail"
  "ureH\000B\007\n\005value\"\345\002\n\013SwapSuccess\022\017\n\007orderI"
  "d\030\001 \001(\t\022\016\n\006pairId\030\002 \001(\t\022\"\n\005funds\030\003 \001(\0132\023"
  ".lssdrpc.BigInteger\022\r\n\005rHash\030\004 \001(\t\022+\n\016am"
  "ountReceived\030\005 \001(\0132\023.lssdrpc.BigInteger\022"
  "\'\n\namountSent\030\006 \001(\0132\023.lssdrpc.BigInteger"
  "\022\'\n\004role\030\007 \001(\0162\031.lssdrpc.SwapSuccess.Rol"
  "e\022\030\n\020currencyReceived\030\010 \001(\t\022\024\n\014currencyS"
  "ent\030\t \001(\t\022\021\n\trPreimage\030\n \001(\t\022\"\n\005price\030\013 "
  "\001(\0132\023.lssdrpc.BigInteger\"\034\n\004Role\022\t\n\005TAKE"
  "R\020\000\022\t\n\005MAKER\020\001\"i\n\013SwapFailure\022\017\n\007orderId"
  "\030\001 \001(\t\022\016\n\006pairId\030\002 \001(\t\022\"\n\005funds\030\003 \001(\0132\023."
  "lssdrpc.BigInteger\022\025\n\rfailureReason\030\004 \001("
  "\t\"\217\001\n#GenerateInvoiceToRentChannelComman"
  "d\022\020\n\010currency\030\001 \001(\t\022\026\n\016payingCurrency\030\002 "
  "\001(\t\022%\n\010capacity\030\003 \001(\0132\023.lssdrpc.BigInteg"
  "er\022\027\n\017lifetimeSeconds\030\004 \001(\003\">\n$GenerateI"
  "nvoiceToRentChannelResponse\022\026\n\016paymentRe"
  "quest\030\001 \001(\t\"X\n\022RentChannelCommand\022\023\n\013pay"
  "mentHash\030\001 \001(\014\022\026\n\016payingCurrency\030\002 \001(\t\022\025"
  "\n\rnodePublicKey\030\003 \001(\014\"(\n\023RentChannelResp"
  "onse\022\021\n\tchannelId\030\001 \001(\t\",\n\027GetChannelSta"
  "tusCommand\022\021\n\tchannelId\030\001 \001(\t\"=\n\030GetChan"
  "nelStatusResponse\022\016\n\006status\030\001 \001(\t\022\021\n\texp"
  "iresAt\030\002 \001(\003\"\206\001\n\032GetFeeToRentChannelComm"
  "and\022\020\n\010currency\030\001 \001(\t\022\026\n\016payingCurrency\030"
  "\002 \001(\t\022%\n\010capacity\030\003 \001(\0132\023.lssdrpc.BigInt"
  "eger\022\027\n\017lifetimeSeconds\030\004 \001(\003\"\222\001\n\033GetFee"
  "ToRentChannelResponse\022 \n\003fee\030\001 \001(\0132\023.lss"
  "drpc.BigInteger\022\'\n\nrentingFee\030\002 \001(\0132\023.ls"
  "sdrpc.BigInteger\022(\n\013onChainFees\030\003 \001(\0132\023."
  "lssdrpc.BigInteger*\036\n\tOrderSide\022\007\n\003buy\020\000"
  "\022\010\n\004sell\020\0012\265\001\n\ncurrencies\022H\n\013AddCurrency"
  "\022\033.lssdrpc.AddCurrencyRequest\032\034.lssdrpc."
  "AddCurrencyResponse\022]\n\022GetAddedCurrencie"
  "s\022\".lssdrpc.GetAddedCurrenciesRequest\032#."
  "lssdrpc.GetAddedCurrenciesResponse2\317\001\n\014t"
  "radingPairs\022Z\n\021EnableTradingPair\022!.lssdr"
  "pc.EnableTradingPairRequest\032\".lssdrpc.En"
  "ableTradingPairResponse\022c\n\024GetActiveTrad"
  "ingPair\022$.lssdrpc.GetActiveTradingPairRe"
  "quest\032%.lssdrpc.GetActiveTradingPairResp"
  "onse2\255\004\n\006orders\022E\n\nPlaceOrder\022\032.lssdrpc."
  "PlaceOrderRequest\032\033.lssdrpc.PlaceOrderRe"
  "sponse\022H\n\013CancelOrder\022\033.lssdrpc.CancelOr"
  "derRequest\032\034.lssdrpc.CancelOrderResponse"
  "\022J\n\017SubscribeOrders\022\037.lssdrpc.SubscribeO"
  "rdersRequest\032\024.lssdrpc.OrderUpdate0\001\022P\n\022"
  "SubscribeOwnOrders\022\037.lssdrpc.SubscribeOr"
  "dersRequest\032\027.lssdrpc.OwnOrderUpdate0\001\022E"
  "\n\nListOrders\022\032.lssdrpc.ListOrdersRequest"
  "\032\033.lssdrpc.ListOrdersResponse\022N\n\rListOwn"
  "Orders\022\035.lssdrpc.ListOwnOrdersRequest\032\036."
  "lssdrpc.ListOwnOrdersResponse\022]\n\027Subscri"
  "beOrderbookState\022\'.lssdrpc.SubscribeOrde"
  "rbookStateRequest\032\027.lssdrpc.OrderbookSta"
  "te0\0012P\n\005swaps\022G\n\016SubscribeSwaps\022\036.lssdrp"
  "c.SubscribeSwapsRequest\032\023.lssdrpc.SwapRe"
  "sult0\0012\211\003\n\007renting\022y\n\032GenerateRentChanne"
  "lInvoice\022,.lssdrpc.GenerateInvoiceToRent"
  "ChannelCommand\032-.lssdrpc.GenerateInvoice"
  "ToRentChannelResponse\022H\n\013RentChannel\022\033.l"
  "ssdrpc.RentChannelCommand\032\034.lssdrpc.Rent"
  "ChannelResponse\022W\n\020GetChannelStatus\022 .ls"
  "sdrpc.GetChannelStatusCommand\032!.lssdrpc."
  "GetChannelStatusResponse\022`\n\023GetFeeToRent"
  "Channel\022#.lssdrpc.GetFeeToRentChannelCom"
  "mand\032$.lssdrpc.GetFeeToRentChannelRespon"
  "seb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lssdrpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lssdrpc_2eproto_sccs[41] = {
  &scc_info_AddCurrencyRequest_lssdrpc_2eproto.base,
  &scc_info_AddCurrencyResponse_lssdrpc_2eproto.base,
  &scc_info_BigInteger_lssdrpc_2eproto.base,
  &scc_info_CancelOrderRequest_lssdrpc_2eproto.base,
  &scc_info_CancelOrderResponse_lssdrpc_2eproto.base,
  &scc_info_ConnextConfiguration_lssdrpc_2eproto.base,
  &scc_info_EnableTradingPairRequest_lssdrpc_2eproto.base,
  &scc_info_EnableTradingPairResponse_lssdrpc_2eproto.base,
  &scc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto.base,
  &scc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto.base,
  &scc_info_GetActiveTradingPairRequest_lssdrpc_2eproto.base,
  &scc_info_GetActiveTradingPairResponse_lssdrpc_2eproto.base,
  &scc_info_GetAddedCurrenciesRequest_lssdrpc_2eproto.base,
  &scc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto.base,
  &scc_info_GetChannelStatusCommand_lssdrpc_2eproto.base,
  &scc_info_GetChannelStatusResponse_lssdrpc_2eproto.base,
  &scc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto.base,
  &scc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto.base,
  &scc_info_ListOrdersRequest_lssdrpc_2eproto.base,
  &scc_info_ListOrdersResponse_lssdrpc_2eproto.base,
  &scc_info_ListOwnOrdersRequest_lssdrpc_2eproto.base,
  &scc_info_ListOwnOrdersResponse_lssdrpc_2eproto.base,
  &scc_info_LndConfiguration_lssdrpc_2eproto.base,
  &scc_info_Order_lssdrpc_2eproto.base,
  &scc_info_OrderPortion_lssdrpc_2eproto.base,
  &scc_info_OrderSummary_lssdrpc_2eproto.base,
  &scc_info_OrderUpdate_lssdrpc_2eproto.base,
  &scc_info_OrderbookFailure_lssdrpc_2eproto.base,
  &scc_info_OrderbookState_lssdrpc_2eproto.base,
  &scc_info_OwnOrderUpdate_lssdrpc_2eproto.base,
  &scc_info_PlaceOrderFailure_lssdrpc_2eproto.base,
  &scc_info_PlaceOrderRequest_lssdrpc_2eproto.base,
  &scc_info_PlaceOrderResponse_lssdrpc_2eproto.base,
  &scc_info_RentChannelCommand_lssdrpc_2eproto.base,
  &scc_info_RentChannelResponse_lssdrpc_2eproto.base,
  &scc_info_SubscribeOrderbookStateRequest_lssdrpc_2eproto.base,
  &scc_info_SubscribeOrdersRequest_lssdrpc_2eproto.base,
  &scc_info_SubscribeSwapsRequest_lssdrpc_2eproto.base,
  &scc_info_SwapFailure_lssdrpc_2eproto.base,
  &scc_info_SwapResult_lssdrpc_2eproto.base,
  &scc_info_SwapSuccess_lssdrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lssdrpc_2eproto_once;
static bool descriptor_table_lssdrpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lssdrpc_2eproto = {
  &descriptor_table_lssdrpc_2eproto_initialized, descriptor_table_protodef_lssdrpc_2eproto, "lssdrpc.proto", 5250,
  &descriptor_table_lssdrpc_2eproto_once, descriptor_table_lssdrpc_2eproto_sccs, descriptor_table_lssdrpc_2eproto_deps, 41, 0,
  schemas, file_default_instances, TableStruct_lssdrpc_2eproto::offsets,
  file_level_metadata_lssdrpc_2eproto, 41, file_level_enum_descriptors_lssdrpc_2eproto, file_level_service_descriptors_lssdrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lssdrpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lssdrpc_2eproto), true);
namespace lssdrpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderbookState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lssdrpc_2eproto);
  return file_level_enum_descriptors_lssdrpc_2eproto[0];
}
bool OrderbookState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OrderbookState_State OrderbookState::UNKNOWN;
constexpr OrderbookState_State OrderbookState::CONNECTED;
constexpr OrderbookState_State OrderbookState::DISCONNECTED;
constexpr OrderbookState_State OrderbookState::State_MIN;
constexpr OrderbookState_State OrderbookState::State_MAX;
constexpr int OrderbookState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwapSuccess_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lssdrpc_2eproto);
  return file_level_enum_descriptors_lssdrpc_2eproto[1];
}
bool SwapSuccess_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SwapSuccess_Role SwapSuccess::TAKER;
constexpr SwapSuccess_Role SwapSuccess::MAKER;
constexpr SwapSuccess_Role SwapSuccess::Role_MIN;
constexpr SwapSuccess_Role SwapSuccess::Role_MAX;
constexpr int SwapSuccess::Role_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lssdrpc_2eproto);
  return file_level_enum_descriptors_lssdrpc_2eproto[2];
}
bool OrderSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BigInteger::InitAsDefaultInstance() {
}
class BigInteger::_Internal {
 public:
};

BigInteger::BigInteger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.BigInteger)
}
BigInteger::BigInteger(const BigInteger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.BigInteger)
}

void BigInteger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigInteger_lssdrpc_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BigInteger::~BigInteger() {
  // @@protoc_insertion_point(destructor:lssdrpc.BigInteger)
  SharedDtor();
}

void BigInteger::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BigInteger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigInteger& BigInteger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigInteger_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void BigInteger::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.BigInteger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BigInteger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.BigInteger.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigInteger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.BigInteger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.BigInteger.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.BigInteger)
  return target;
}

size_t BigInteger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.BigInteger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigInteger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.BigInteger)
  GOOGLE_DCHECK_NE(&from, this);
  const BigInteger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigInteger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.BigInteger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.BigInteger)
    MergeFrom(*source);
  }
}

void BigInteger::MergeFrom(const BigInteger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.BigInteger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void BigInteger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.BigInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigInteger::CopyFrom(const BigInteger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.BigInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigInteger::IsInitialized() const {
  return true;
}

void BigInteger::InternalSwap(BigInteger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BigInteger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddCurrencyRequest::InitAsDefaultInstance() {
  ::lssdrpc::_AddCurrencyRequest_default_instance_.lnd_ = const_cast< ::lssdrpc::LndConfiguration*>(
      ::lssdrpc::LndConfiguration::internal_default_instance());
  ::lssdrpc::_AddCurrencyRequest_default_instance_.connext_ = const_cast< ::lssdrpc::ConnextConfiguration*>(
      ::lssdrpc::ConnextConfiguration::internal_default_instance());
}
class AddCurrencyRequest::_Internal {
 public:
  static const ::lssdrpc::LndConfiguration& lnd(const AddCurrencyRequest* msg);
  static const ::lssdrpc::ConnextConfiguration& connext(const AddCurrencyRequest* msg);
};

const ::lssdrpc::LndConfiguration&
AddCurrencyRequest::_Internal::lnd(const AddCurrencyRequest* msg) {
  return *msg->conf_.lnd_;
}
const ::lssdrpc::ConnextConfiguration&
AddCurrencyRequest::_Internal::connext(const AddCurrencyRequest* msg) {
  return *msg->conf_.connext_;
}
void AddCurrencyRequest::set_allocated_lnd(::lssdrpc::LndConfiguration* lnd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_conf();
  if (lnd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lnd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lnd, submessage_arena);
    }
    set_has_lnd();
    conf_.lnd_ = lnd;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.AddCurrencyRequest.lnd)
}
void AddCurrencyRequest::set_allocated_connext(::lssdrpc::ConnextConfiguration* connext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_conf();
  if (connext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connext, submessage_arena);
    }
    set_has_connext();
    conf_.connext_ = connext;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.AddCurrencyRequest.connext)
}
AddCurrencyRequest::AddCurrencyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.AddCurrencyRequest)
}
AddCurrencyRequest::AddCurrencyRequest(const AddCurrencyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  clear_has_conf();
  switch (from.conf_case()) {
    case kLnd: {
      _internal_mutable_lnd()->::lssdrpc::LndConfiguration::MergeFrom(from._internal_lnd());
      break;
    }
    case kConnext: {
      _internal_mutable_connext()->::lssdrpc::ConnextConfiguration::MergeFrom(from._internal_connext());
      break;
    }
    case CONF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.AddCurrencyRequest)
}

void AddCurrencyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCurrencyRequest_lssdrpc_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_conf();
}

AddCurrencyRequest::~AddCurrencyRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.AddCurrencyRequest)
  SharedDtor();
}

void AddCurrencyRequest::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_conf()) {
    clear_conf();
  }
}

void AddCurrencyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCurrencyRequest& AddCurrencyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCurrencyRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void AddCurrencyRequest::clear_conf() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.AddCurrencyRequest)
  switch (conf_case()) {
    case kLnd: {
      delete conf_.lnd_;
      break;
    }
    case kConnext: {
      delete conf_.connext_;
      break;
    }
    case CONF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONF_NOT_SET;
}


void AddCurrencyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.AddCurrencyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_conf();
  _internal_metadata_.Clear();
}

const char* AddCurrencyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.AddCurrencyRequest.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.LndConfiguration lnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lnd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.ConnextConfiguration connext = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCurrencyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.AddCurrencyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.AddCurrencyRequest.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // .lssdrpc.LndConfiguration lnd = 3;
  if (_internal_has_lnd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lnd(this), target, stream);
  }

  // .lssdrpc.ConnextConfiguration connext = 4;
  if (_internal_has_connext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.AddCurrencyRequest)
  return target;
}

size_t AddCurrencyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.AddCurrencyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  switch (conf_case()) {
    // .lssdrpc.LndConfiguration lnd = 3;
    case kLnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conf_.lnd_);
      break;
    }
    // .lssdrpc.ConnextConfiguration connext = 4;
    case kConnext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conf_.connext_);
      break;
    }
    case CONF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCurrencyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.AddCurrencyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCurrencyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCurrencyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.AddCurrencyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.AddCurrencyRequest)
    MergeFrom(*source);
  }
}

void AddCurrencyRequest::MergeFrom(const AddCurrencyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.AddCurrencyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  switch (from.conf_case()) {
    case kLnd: {
      _internal_mutable_lnd()->::lssdrpc::LndConfiguration::MergeFrom(from._internal_lnd());
      break;
    }
    case kConnext: {
      _internal_mutable_connext()->::lssdrpc::ConnextConfiguration::MergeFrom(from._internal_connext());
      break;
    }
    case CONF_NOT_SET: {
      break;
    }
  }
}

void AddCurrencyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.AddCurrencyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCurrencyRequest::CopyFrom(const AddCurrencyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.AddCurrencyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCurrencyRequest::IsInitialized() const {
  return true;
}

void AddCurrencyRequest::InternalSwap(AddCurrencyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(conf_, other->conf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCurrencyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnextConfiguration::InitAsDefaultInstance() {
}
class ConnextConfiguration::_Internal {
 public:
};

ConnextConfiguration::ConnextConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.ConnextConfiguration)
}
ConnextConfiguration::ConnextConfiguration(const ConnextConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connextchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connextchannel().empty()) {
    connextchannel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connextchannel_);
  }
  tokenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokenaddress().empty()) {
    tokenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenaddress_);
  }
  eventresolver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eventresolver().empty()) {
    eventresolver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventresolver_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.ConnextConfiguration)
}

void ConnextConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnextConfiguration_lssdrpc_2eproto.base);
  connextchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventresolver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnextConfiguration::~ConnextConfiguration() {
  // @@protoc_insertion_point(destructor:lssdrpc.ConnextConfiguration)
  SharedDtor();
}

void ConnextConfiguration::SharedDtor() {
  connextchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventresolver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnextConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnextConfiguration& ConnextConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnextConfiguration_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void ConnextConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.ConnextConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connextchannel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eventresolver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConnextConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string connextChannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connextchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.ConnextConfiguration.connextChannel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tokenaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.ConnextConfiguration.tokenAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eventResolver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_eventresolver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.ConnextConfiguration.eventResolver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnextConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.ConnextConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string connextChannel = 1;
  if (this->connextchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connextchannel().data(), static_cast<int>(this->_internal_connextchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.ConnextConfiguration.connextChannel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connextchannel(), target);
  }

  // string tokenAddress = 2;
  if (this->tokenaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokenaddress().data(), static_cast<int>(this->_internal_tokenaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.ConnextConfiguration.tokenAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tokenaddress(), target);
  }

  // string eventResolver = 3;
  if (this->eventresolver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventresolver().data(), static_cast<int>(this->_internal_eventresolver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.ConnextConfiguration.eventResolver");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_eventresolver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.ConnextConfiguration)
  return target;
}

size_t ConnextConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.ConnextConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connextChannel = 1;
  if (this->connextchannel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connextchannel());
  }

  // string tokenAddress = 2;
  if (this->tokenaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokenaddress());
  }

  // string eventResolver = 3;
  if (this->eventresolver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventresolver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnextConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.ConnextConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnextConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnextConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.ConnextConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.ConnextConfiguration)
    MergeFrom(*source);
  }
}

void ConnextConfiguration::MergeFrom(const ConnextConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.ConnextConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connextchannel().size() > 0) {

    connextchannel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connextchannel_);
  }
  if (from.tokenaddress().size() > 0) {

    tokenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenaddress_);
  }
  if (from.eventresolver().size() > 0) {

    eventresolver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eventresolver_);
  }
}

void ConnextConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.ConnextConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnextConfiguration::CopyFrom(const ConnextConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.ConnextConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnextConfiguration::IsInitialized() const {
  return true;
}

void ConnextConfiguration::InternalSwap(ConnextConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  connextchannel_.Swap(&other->connextchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tokenaddress_.Swap(&other->tokenaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eventresolver_.Swap(&other->eventresolver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnextConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LndConfiguration::InitAsDefaultInstance() {
  ::lssdrpc::_LndConfiguration_default_instance_.certpath_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::lssdrpc::_LndConfiguration_default_instance_.rawcert_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::lssdrpc::_LndConfiguration_default_instance_.macaroon_path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::lssdrpc::_LndConfiguration_default_instance_.raw_macaroon_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class LndConfiguration::_Internal {
 public:
};

LndConfiguration::LndConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.LndConfiguration)
}
LndConfiguration::LndConfiguration(const LndConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lndchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lndchannel().empty()) {
    lndchannel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lndchannel_);
  }
  clear_has_tlsCert();
  switch (from.tlsCert_case()) {
    case kCertPath: {
      _internal_set_certpath(from._internal_certpath());
      break;
    }
    case kRawCert: {
      _internal_set_rawcert(from._internal_rawcert());
      break;
    }
    case TLSCERT_NOT_SET: {
      break;
    }
  }
  clear_has_macaroon();
  switch (from.macaroon_case()) {
    case kMacaroonPath: {
      _internal_set_macaroon_path(from._internal_macaroon_path());
      break;
    }
    case kRawMacaroon: {
      _internal_set_raw_macaroon(from._internal_raw_macaroon());
      break;
    }
    case MACAROON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.LndConfiguration)
}

void LndConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LndConfiguration_lssdrpc_2eproto.base);
  lndchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_tlsCert();
  clear_has_macaroon();
}

LndConfiguration::~LndConfiguration() {
  // @@protoc_insertion_point(destructor:lssdrpc.LndConfiguration)
  SharedDtor();
}

void LndConfiguration::SharedDtor() {
  lndchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_tlsCert()) {
    clear_tlsCert();
  }
  if (has_macaroon()) {
    clear_macaroon();
  }
}

void LndConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LndConfiguration& LndConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LndConfiguration_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void LndConfiguration::clear_tlsCert() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.LndConfiguration)
  switch (tlsCert_case()) {
    case kCertPath: {
      tlsCert_.certpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRawCert: {
      tlsCert_.rawcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TLSCERT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TLSCERT_NOT_SET;
}

void LndConfiguration::clear_macaroon() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.LndConfiguration)
  switch (macaroon_case()) {
    case kMacaroonPath: {
      macaroon_.macaroon_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRawMacaroon: {
      macaroon_.raw_macaroon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case MACAROON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MACAROON_NOT_SET;
}


void LndConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.LndConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lndchannel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_tlsCert();
  clear_macaroon();
  _internal_metadata_.Clear();
}

const char* LndConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string lndChannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lndchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.LndConfiguration.lndChannel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string certPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_certpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.LndConfiguration.certPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rawCert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rawcert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.LndConfiguration.rawCert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string macaroon_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_macaroon_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.LndConfiguration.macaroon_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_macaroon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_raw_macaroon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.LndConfiguration.raw_macaroon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LndConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.LndConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lndChannel = 1;
  if (this->lndchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lndchannel().data(), static_cast<int>(this->_internal_lndchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.LndConfiguration.lndChannel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lndchannel(), target);
  }

  // string certPath = 2;
  if (_internal_has_certpath()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_certpath().data(), static_cast<int>(this->_internal_certpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.LndConfiguration.certPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_certpath(), target);
  }

  // string rawCert = 3;
  if (_internal_has_rawcert()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rawcert().data(), static_cast<int>(this->_internal_rawcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.LndConfiguration.rawCert");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rawcert(), target);
  }

  // string macaroon_path = 4;
  if (_internal_has_macaroon_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaroon_path().data(), static_cast<int>(this->_internal_macaroon_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.LndConfiguration.macaroon_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_macaroon_path(), target);
  }

  // string raw_macaroon = 5;
  if (_internal_has_raw_macaroon()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_macaroon().data(), static_cast<int>(this->_internal_raw_macaroon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.LndConfiguration.raw_macaroon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_raw_macaroon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.LndConfiguration)
  return target;
}

size_t LndConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.LndConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lndChannel = 1;
  if (this->lndchannel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lndchannel());
  }

  switch (tlsCert_case()) {
    // string certPath = 2;
    case kCertPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_certpath());
      break;
    }
    // string rawCert = 3;
    case kRawCert: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rawcert());
      break;
    }
    case TLSCERT_NOT_SET: {
      break;
    }
  }
  switch (macaroon_case()) {
    // string macaroon_path = 4;
    case kMacaroonPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_macaroon_path());
      break;
    }
    // string raw_macaroon = 5;
    case kRawMacaroon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_raw_macaroon());
      break;
    }
    case MACAROON_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LndConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.LndConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const LndConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LndConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.LndConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.LndConfiguration)
    MergeFrom(*source);
  }
}

void LndConfiguration::MergeFrom(const LndConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.LndConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lndchannel().size() > 0) {

    lndchannel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lndchannel_);
  }
  switch (from.tlsCert_case()) {
    case kCertPath: {
      _internal_set_certpath(from._internal_certpath());
      break;
    }
    case kRawCert: {
      _internal_set_rawcert(from._internal_rawcert());
      break;
    }
    case TLSCERT_NOT_SET: {
      break;
    }
  }
  switch (from.macaroon_case()) {
    case kMacaroonPath: {
      _internal_set_macaroon_path(from._internal_macaroon_path());
      break;
    }
    case kRawMacaroon: {
      _internal_set_raw_macaroon(from._internal_raw_macaroon());
      break;
    }
    case MACAROON_NOT_SET: {
      break;
    }
  }
}

void LndConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.LndConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LndConfiguration::CopyFrom(const LndConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.LndConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LndConfiguration::IsInitialized() const {
  return true;
}

void LndConfiguration::InternalSwap(LndConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lndchannel_.Swap(&other->lndchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tlsCert_, other->tlsCert_);
  swap(macaroon_, other->macaroon_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LndConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddCurrencyResponse::InitAsDefaultInstance() {
}
class AddCurrencyResponse::_Internal {
 public:
};

AddCurrencyResponse::AddCurrencyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.AddCurrencyResponse)
}
AddCurrencyResponse::AddCurrencyResponse(const AddCurrencyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.AddCurrencyResponse)
}

void AddCurrencyResponse::SharedCtor() {
}

AddCurrencyResponse::~AddCurrencyResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.AddCurrencyResponse)
  SharedDtor();
}

void AddCurrencyResponse::SharedDtor() {
}

void AddCurrencyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCurrencyResponse& AddCurrencyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCurrencyResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void AddCurrencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.AddCurrencyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AddCurrencyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCurrencyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.AddCurrencyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.AddCurrencyResponse)
  return target;
}

size_t AddCurrencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.AddCurrencyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCurrencyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.AddCurrencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCurrencyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCurrencyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.AddCurrencyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.AddCurrencyResponse)
    MergeFrom(*source);
  }
}

void AddCurrencyResponse::MergeFrom(const AddCurrencyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.AddCurrencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddCurrencyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.AddCurrencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCurrencyResponse::CopyFrom(const AddCurrencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.AddCurrencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCurrencyResponse::IsInitialized() const {
  return true;
}

void AddCurrencyResponse::InternalSwap(AddCurrencyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCurrencyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddedCurrenciesRequest::InitAsDefaultInstance() {
}
class GetAddedCurrenciesRequest::_Internal {
 public:
};

GetAddedCurrenciesRequest::GetAddedCurrenciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetAddedCurrenciesRequest)
}
GetAddedCurrenciesRequest::GetAddedCurrenciesRequest(const GetAddedCurrenciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetAddedCurrenciesRequest)
}

void GetAddedCurrenciesRequest::SharedCtor() {
}

GetAddedCurrenciesRequest::~GetAddedCurrenciesRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetAddedCurrenciesRequest)
  SharedDtor();
}

void GetAddedCurrenciesRequest::SharedDtor() {
}

void GetAddedCurrenciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddedCurrenciesRequest& GetAddedCurrenciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddedCurrenciesRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddedCurrenciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetAddedCurrenciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetAddedCurrenciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddedCurrenciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetAddedCurrenciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetAddedCurrenciesRequest)
  return target;
}

size_t GetAddedCurrenciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetAddedCurrenciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddedCurrenciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetAddedCurrenciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddedCurrenciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddedCurrenciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetAddedCurrenciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetAddedCurrenciesRequest)
    MergeFrom(*source);
  }
}

void GetAddedCurrenciesRequest::MergeFrom(const GetAddedCurrenciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetAddedCurrenciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAddedCurrenciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetAddedCurrenciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddedCurrenciesRequest::CopyFrom(const GetAddedCurrenciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetAddedCurrenciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddedCurrenciesRequest::IsInitialized() const {
  return true;
}

void GetAddedCurrenciesRequest::InternalSwap(GetAddedCurrenciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddedCurrenciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddedCurrenciesResponse::InitAsDefaultInstance() {
}
class GetAddedCurrenciesResponse::_Internal {
 public:
};

GetAddedCurrenciesResponse::GetAddedCurrenciesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetAddedCurrenciesResponse)
}
GetAddedCurrenciesResponse::GetAddedCurrenciesResponse(const GetAddedCurrenciesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      currency_(from.currency_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetAddedCurrenciesResponse)
}

void GetAddedCurrenciesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto.base);
}

GetAddedCurrenciesResponse::~GetAddedCurrenciesResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetAddedCurrenciesResponse)
  SharedDtor();
}

void GetAddedCurrenciesResponse::SharedDtor() {
}

void GetAddedCurrenciesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddedCurrenciesResponse& GetAddedCurrenciesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddedCurrenciesResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddedCurrenciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetAddedCurrenciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAddedCurrenciesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_currency();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetAddedCurrenciesResponse.currency"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddedCurrenciesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetAddedCurrenciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string currency = 1;
  for (int i = 0, n = this->_internal_currency_size(); i < n; i++) {
    const auto& s = this->_internal_currency(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetAddedCurrenciesResponse.currency");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetAddedCurrenciesResponse)
  return target;
}

size_t GetAddedCurrenciesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetAddedCurrenciesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string currency = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(currency_.size());
  for (int i = 0, n = currency_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      currency_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddedCurrenciesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetAddedCurrenciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddedCurrenciesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddedCurrenciesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetAddedCurrenciesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetAddedCurrenciesResponse)
    MergeFrom(*source);
  }
}

void GetAddedCurrenciesResponse::MergeFrom(const GetAddedCurrenciesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetAddedCurrenciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  currency_.MergeFrom(from.currency_);
}

void GetAddedCurrenciesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetAddedCurrenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddedCurrenciesResponse::CopyFrom(const GetAddedCurrenciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetAddedCurrenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddedCurrenciesResponse::IsInitialized() const {
  return true;
}

void GetAddedCurrenciesResponse::InternalSwap(GetAddedCurrenciesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.InternalSwap(&other->currency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddedCurrenciesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableTradingPairRequest::InitAsDefaultInstance() {
}
class EnableTradingPairRequest::_Internal {
 public:
};

EnableTradingPairRequest::EnableTradingPairRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.EnableTradingPairRequest)
}
EnableTradingPairRequest::EnableTradingPairRequest(const EnableTradingPairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.EnableTradingPairRequest)
}

void EnableTradingPairRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableTradingPairRequest_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnableTradingPairRequest::~EnableTradingPairRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.EnableTradingPairRequest)
  SharedDtor();
}

void EnableTradingPairRequest::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableTradingPairRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableTradingPairRequest& EnableTradingPairRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableTradingPairRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void EnableTradingPairRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.EnableTradingPairRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EnableTradingPairRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.EnableTradingPairRequest.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableTradingPairRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.EnableTradingPairRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.EnableTradingPairRequest.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.EnableTradingPairRequest)
  return target;
}

size_t EnableTradingPairRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.EnableTradingPairRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableTradingPairRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.EnableTradingPairRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableTradingPairRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableTradingPairRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.EnableTradingPairRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.EnableTradingPairRequest)
    MergeFrom(*source);
  }
}

void EnableTradingPairRequest::MergeFrom(const EnableTradingPairRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.EnableTradingPairRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
}

void EnableTradingPairRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.EnableTradingPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTradingPairRequest::CopyFrom(const EnableTradingPairRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.EnableTradingPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTradingPairRequest::IsInitialized() const {
  return true;
}

void EnableTradingPairRequest::InternalSwap(EnableTradingPairRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableTradingPairRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableTradingPairResponse::InitAsDefaultInstance() {
}
class EnableTradingPairResponse::_Internal {
 public:
};

EnableTradingPairResponse::EnableTradingPairResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.EnableTradingPairResponse)
}
EnableTradingPairResponse::EnableTradingPairResponse(const EnableTradingPairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.EnableTradingPairResponse)
}

void EnableTradingPairResponse::SharedCtor() {
}

EnableTradingPairResponse::~EnableTradingPairResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.EnableTradingPairResponse)
  SharedDtor();
}

void EnableTradingPairResponse::SharedDtor() {
}

void EnableTradingPairResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableTradingPairResponse& EnableTradingPairResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableTradingPairResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void EnableTradingPairResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.EnableTradingPairResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* EnableTradingPairResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableTradingPairResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.EnableTradingPairResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.EnableTradingPairResponse)
  return target;
}

size_t EnableTradingPairResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.EnableTradingPairResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableTradingPairResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.EnableTradingPairResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableTradingPairResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableTradingPairResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.EnableTradingPairResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.EnableTradingPairResponse)
    MergeFrom(*source);
  }
}

void EnableTradingPairResponse::MergeFrom(const EnableTradingPairResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.EnableTradingPairResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableTradingPairResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.EnableTradingPairResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTradingPairResponse::CopyFrom(const EnableTradingPairResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.EnableTradingPairResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTradingPairResponse::IsInitialized() const {
  return true;
}

void EnableTradingPairResponse::InternalSwap(EnableTradingPairResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableTradingPairResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetActiveTradingPairRequest::InitAsDefaultInstance() {
}
class GetActiveTradingPairRequest::_Internal {
 public:
};

GetActiveTradingPairRequest::GetActiveTradingPairRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetActiveTradingPairRequest)
}
GetActiveTradingPairRequest::GetActiveTradingPairRequest(const GetActiveTradingPairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetActiveTradingPairRequest)
}

void GetActiveTradingPairRequest::SharedCtor() {
}

GetActiveTradingPairRequest::~GetActiveTradingPairRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetActiveTradingPairRequest)
  SharedDtor();
}

void GetActiveTradingPairRequest::SharedDtor() {
}

void GetActiveTradingPairRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetActiveTradingPairRequest& GetActiveTradingPairRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetActiveTradingPairRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetActiveTradingPairRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetActiveTradingPairRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetActiveTradingPairRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetActiveTradingPairRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetActiveTradingPairRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetActiveTradingPairRequest)
  return target;
}

size_t GetActiveTradingPairRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetActiveTradingPairRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetActiveTradingPairRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetActiveTradingPairRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActiveTradingPairRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetActiveTradingPairRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetActiveTradingPairRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetActiveTradingPairRequest)
    MergeFrom(*source);
  }
}

void GetActiveTradingPairRequest::MergeFrom(const GetActiveTradingPairRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetActiveTradingPairRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetActiveTradingPairRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetActiveTradingPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveTradingPairRequest::CopyFrom(const GetActiveTradingPairRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetActiveTradingPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveTradingPairRequest::IsInitialized() const {
  return true;
}

void GetActiveTradingPairRequest::InternalSwap(GetActiveTradingPairRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActiveTradingPairRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetActiveTradingPairResponse::InitAsDefaultInstance() {
}
class GetActiveTradingPairResponse::_Internal {
 public:
};

GetActiveTradingPairResponse::GetActiveTradingPairResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetActiveTradingPairResponse)
}
GetActiveTradingPairResponse::GetActiveTradingPairResponse(const GetActiveTradingPairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pairid_(from.pairid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetActiveTradingPairResponse)
}

void GetActiveTradingPairResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetActiveTradingPairResponse_lssdrpc_2eproto.base);
}

GetActiveTradingPairResponse::~GetActiveTradingPairResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetActiveTradingPairResponse)
  SharedDtor();
}

void GetActiveTradingPairResponse::SharedDtor() {
}

void GetActiveTradingPairResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetActiveTradingPairResponse& GetActiveTradingPairResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetActiveTradingPairResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetActiveTradingPairResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetActiveTradingPairResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.Clear();
  _internal_metadata_.Clear();
}

const char* GetActiveTradingPairResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pairid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetActiveTradingPairResponse.pairId"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetActiveTradingPairResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetActiveTradingPairResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pairId = 1;
  for (int i = 0, n = this->_internal_pairid_size(); i < n; i++) {
    const auto& s = this->_internal_pairid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetActiveTradingPairResponse.pairId");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetActiveTradingPairResponse)
  return target;
}

size_t GetActiveTradingPairResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetActiveTradingPairResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pairId = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pairid_.size());
  for (int i = 0, n = pairid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pairid_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetActiveTradingPairResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetActiveTradingPairResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActiveTradingPairResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetActiveTradingPairResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetActiveTradingPairResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetActiveTradingPairResponse)
    MergeFrom(*source);
  }
}

void GetActiveTradingPairResponse::MergeFrom(const GetActiveTradingPairResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetActiveTradingPairResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairid_.MergeFrom(from.pairid_);
}

void GetActiveTradingPairResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetActiveTradingPairResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveTradingPairResponse::CopyFrom(const GetActiveTradingPairResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetActiveTradingPairResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveTradingPairResponse::IsInitialized() const {
  return true;
}

void GetActiveTradingPairResponse::InternalSwap(GetActiveTradingPairResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.InternalSwap(&other->pairid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActiveTradingPairResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeOrderbookStateRequest::InitAsDefaultInstance() {
}
class SubscribeOrderbookStateRequest::_Internal {
 public:
};

SubscribeOrderbookStateRequest::SubscribeOrderbookStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SubscribeOrderbookStateRequest)
}
SubscribeOrderbookStateRequest::SubscribeOrderbookStateRequest(const SubscribeOrderbookStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SubscribeOrderbookStateRequest)
}

void SubscribeOrderbookStateRequest::SharedCtor() {
}

SubscribeOrderbookStateRequest::~SubscribeOrderbookStateRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.SubscribeOrderbookStateRequest)
  SharedDtor();
}

void SubscribeOrderbookStateRequest::SharedDtor() {
}

void SubscribeOrderbookStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeOrderbookStateRequest& SubscribeOrderbookStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeOrderbookStateRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SubscribeOrderbookStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SubscribeOrderbookStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeOrderbookStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeOrderbookStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SubscribeOrderbookStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SubscribeOrderbookStateRequest)
  return target;
}

size_t SubscribeOrderbookStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SubscribeOrderbookStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeOrderbookStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SubscribeOrderbookStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeOrderbookStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeOrderbookStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SubscribeOrderbookStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SubscribeOrderbookStateRequest)
    MergeFrom(*source);
  }
}

void SubscribeOrderbookStateRequest::MergeFrom(const SubscribeOrderbookStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SubscribeOrderbookStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeOrderbookStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SubscribeOrderbookStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOrderbookStateRequest::CopyFrom(const SubscribeOrderbookStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SubscribeOrderbookStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrderbookStateRequest::IsInitialized() const {
  return true;
}

void SubscribeOrderbookStateRequest::InternalSwap(SubscribeOrderbookStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOrderbookStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderbookState::InitAsDefaultInstance() {
}
class OrderbookState::_Internal {
 public:
};

OrderbookState::OrderbookState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OrderbookState)
}
OrderbookState::OrderbookState(const OrderbookState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OrderbookState)
}

void OrderbookState::SharedCtor() {
  state_ = 0;
}

OrderbookState::~OrderbookState() {
  // @@protoc_insertion_point(destructor:lssdrpc.OrderbookState)
  SharedDtor();
}

void OrderbookState::SharedDtor() {
}

void OrderbookState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderbookState& OrderbookState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderbookState_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OrderbookState::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OrderbookState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* OrderbookState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.OrderbookState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::lssdrpc::OrderbookState_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderbookState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OrderbookState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.OrderbookState.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OrderbookState)
  return target;
}

size_t OrderbookState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OrderbookState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lssdrpc.OrderbookState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderbookState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OrderbookState)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderbookState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderbookState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OrderbookState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OrderbookState)
    MergeFrom(*source);
  }
}

void OrderbookState::MergeFrom(const OrderbookState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OrderbookState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void OrderbookState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OrderbookState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderbookState::CopyFrom(const OrderbookState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OrderbookState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookState::IsInitialized() const {
  return true;
}

void OrderbookState::InternalSwap(OrderbookState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrdersRequest::InitAsDefaultInstance() {
}
class ListOrdersRequest::_Internal {
 public:
};

ListOrdersRequest::ListOrdersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.ListOrdersRequest)
}
ListOrdersRequest::ListOrdersRequest(const ListOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  ::memcpy(&lastknownprice_, &from.lastknownprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&lastknownprice_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:lssdrpc.ListOrdersRequest)
}

void ListOrdersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrdersRequest_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lastknownprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&lastknownprice_)) + sizeof(limit_));
}

ListOrdersRequest::~ListOrdersRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.ListOrdersRequest)
  SharedDtor();
}

void ListOrdersRequest::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrdersRequest& ListOrdersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrdersRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void ListOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.ListOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lastknownprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&lastknownprice_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* ListOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.ListOrdersRequest.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastKnownPrice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lastknownprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrdersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.ListOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.ListOrdersRequest.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // int64 lastKnownPrice = 2;
  if (this->lastknownprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lastknownprice(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.ListOrdersRequest)
  return target;
}

size_t ListOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.ListOrdersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // int64 lastKnownPrice = 2;
  if (this->lastknownprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastknownprice());
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrdersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.ListOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrdersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrdersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.ListOrdersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.ListOrdersRequest)
    MergeFrom(*source);
  }
}

void ListOrdersRequest::MergeFrom(const ListOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.ListOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.lastknownprice() != 0) {
    _internal_set_lastknownprice(from._internal_lastknownprice());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void ListOrdersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.ListOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrdersRequest::CopyFrom(const ListOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.ListOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrdersRequest::IsInitialized() const {
  return true;
}

void ListOrdersRequest::InternalSwap(ListOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lastknownprice_, other->lastknownprice_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrdersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrdersResponse::InitAsDefaultInstance() {
}
class ListOrdersResponse::_Internal {
 public:
};

ListOrdersResponse::ListOrdersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.ListOrdersResponse)
}
ListOrdersResponse::ListOrdersResponse(const ListOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.ListOrdersResponse)
}

void ListOrdersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrdersResponse_lssdrpc_2eproto.base);
}

ListOrdersResponse::~ListOrdersResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.ListOrdersResponse)
  SharedDtor();
}

void ListOrdersResponse::SharedDtor() {
}

void ListOrdersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrdersResponse& ListOrdersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrdersResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void ListOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.ListOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

const char* ListOrdersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lssdrpc.OrderSummary orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrdersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.ListOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lssdrpc.OrderSummary orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.ListOrdersResponse)
  return target;
}

size_t ListOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.ListOrdersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lssdrpc.OrderSummary orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrdersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.ListOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrdersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrdersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.ListOrdersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.ListOrdersResponse)
    MergeFrom(*source);
  }
}

void ListOrdersResponse::MergeFrom(const ListOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.ListOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void ListOrdersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.ListOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrdersResponse::CopyFrom(const ListOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.ListOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrdersResponse::IsInitialized() const {
  return true;
}

void ListOrdersResponse::InternalSwap(ListOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrdersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOwnOrdersRequest::InitAsDefaultInstance() {
}
class ListOwnOrdersRequest::_Internal {
 public:
};

ListOwnOrdersRequest::ListOwnOrdersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.ListOwnOrdersRequest)
}
ListOwnOrdersRequest::ListOwnOrdersRequest(const ListOwnOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.ListOwnOrdersRequest)
}

void ListOwnOrdersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOwnOrdersRequest_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListOwnOrdersRequest::~ListOwnOrdersRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.ListOwnOrdersRequest)
  SharedDtor();
}

void ListOwnOrdersRequest::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListOwnOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOwnOrdersRequest& ListOwnOrdersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOwnOrdersRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void ListOwnOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.ListOwnOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListOwnOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.ListOwnOrdersRequest.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOwnOrdersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.ListOwnOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.ListOwnOrdersRequest.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.ListOwnOrdersRequest)
  return target;
}

size_t ListOwnOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.ListOwnOrdersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOwnOrdersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.ListOwnOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOwnOrdersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOwnOrdersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.ListOwnOrdersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.ListOwnOrdersRequest)
    MergeFrom(*source);
  }
}

void ListOwnOrdersRequest::MergeFrom(const ListOwnOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.ListOwnOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
}

void ListOwnOrdersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.ListOwnOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnOrdersRequest::CopyFrom(const ListOwnOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.ListOwnOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnOrdersRequest::IsInitialized() const {
  return true;
}

void ListOwnOrdersRequest::InternalSwap(ListOwnOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOwnOrdersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOwnOrdersResponse::InitAsDefaultInstance() {
}
class ListOwnOrdersResponse::_Internal {
 public:
};

ListOwnOrdersResponse::ListOwnOrdersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.ListOwnOrdersResponse)
}
ListOwnOrdersResponse::ListOwnOrdersResponse(const ListOwnOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.ListOwnOrdersResponse)
}

void ListOwnOrdersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOwnOrdersResponse_lssdrpc_2eproto.base);
}

ListOwnOrdersResponse::~ListOwnOrdersResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.ListOwnOrdersResponse)
  SharedDtor();
}

void ListOwnOrdersResponse::SharedDtor() {
}

void ListOwnOrdersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOwnOrdersResponse& ListOwnOrdersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOwnOrdersResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void ListOwnOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.ListOwnOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

const char* ListOwnOrdersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lssdrpc.Order orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOwnOrdersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.ListOwnOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lssdrpc.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.ListOwnOrdersResponse)
  return target;
}

size_t ListOwnOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.ListOwnOrdersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lssdrpc.Order orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOwnOrdersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.ListOwnOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOwnOrdersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOwnOrdersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.ListOwnOrdersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.ListOwnOrdersResponse)
    MergeFrom(*source);
  }
}

void ListOwnOrdersResponse::MergeFrom(const ListOwnOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.ListOwnOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void ListOwnOrdersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.ListOwnOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnOrdersResponse::CopyFrom(const ListOwnOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.ListOwnOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnOrdersResponse::IsInitialized() const {
  return true;
}

void ListOwnOrdersResponse::InternalSwap(ListOwnOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOwnOrdersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderRequest::InitAsDefaultInstance() {
  ::lssdrpc::_PlaceOrderRequest_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_PlaceOrderRequest_default_instance_._instance.get_mutable()->price_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class PlaceOrderRequest::_Internal {
 public:
  static const ::lssdrpc::BigInteger& funds(const PlaceOrderRequest* msg);
  static const ::lssdrpc::BigInteger& price(const PlaceOrderRequest* msg);
};

const ::lssdrpc::BigInteger&
PlaceOrderRequest::_Internal::funds(const PlaceOrderRequest* msg) {
  return *msg->funds_;
}
const ::lssdrpc::BigInteger&
PlaceOrderRequest::_Internal::price(const PlaceOrderRequest* msg) {
  return *msg->price_;
}
PlaceOrderRequest::PlaceOrderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.PlaceOrderRequest)
}
PlaceOrderRequest::PlaceOrderRequest(const PlaceOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  if (from._internal_has_price()) {
    price_ = new ::lssdrpc::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  side_ = from.side_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.PlaceOrderRequest)
}

void PlaceOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderRequest_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&funds_)) + sizeof(side_));
}

PlaceOrderRequest::~PlaceOrderRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.PlaceOrderRequest)
  SharedDtor();
}

void PlaceOrderRequest::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funds_;
  if (this != internal_default_instance()) delete price_;
}

void PlaceOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderRequest& PlaceOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.PlaceOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  side_ = 0;
  _internal_metadata_.Clear();
}

const char* PlaceOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.PlaceOrderRequest.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.OrderSide side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::lssdrpc::OrderSide>(val));
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.PlaceOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.PlaceOrderRequest.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // .lssdrpc.OrderSide side = 2;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::funds(this), target, stream);
  }

  // .lssdrpc.BigInteger price = 4;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::price(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.PlaceOrderRequest)
  return target;
}

size_t PlaceOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.PlaceOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  // .lssdrpc.BigInteger price = 4;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .lssdrpc.OrderSide side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.PlaceOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.PlaceOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.PlaceOrderRequest)
    MergeFrom(*source);
  }
}

void PlaceOrderRequest::MergeFrom(const PlaceOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.PlaceOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::lssdrpc::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void PlaceOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.PlaceOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderRequest::CopyFrom(const PlaceOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.PlaceOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderRequest::IsInitialized() const {
  return true;
}

void PlaceOrderRequest::InternalSwap(PlaceOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funds_, other->funds_);
  swap(price_, other->price_);
  swap(side_, other->side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderResponse::InitAsDefaultInstance() {
  ::lssdrpc::_PlaceOrderResponse_default_instance_.swapsuccess_ = const_cast< ::lssdrpc::SwapSuccess*>(
      ::lssdrpc::SwapSuccess::internal_default_instance());
  ::lssdrpc::_PlaceOrderResponse_default_instance_.order_ = const_cast< ::lssdrpc::Order*>(
      ::lssdrpc::Order::internal_default_instance());
  ::lssdrpc::_PlaceOrderResponse_default_instance_.failure_ = const_cast< ::lssdrpc::PlaceOrderFailure*>(
      ::lssdrpc::PlaceOrderFailure::internal_default_instance());
}
class PlaceOrderResponse::_Internal {
 public:
  static const ::lssdrpc::SwapSuccess& swapsuccess(const PlaceOrderResponse* msg);
  static const ::lssdrpc::Order& order(const PlaceOrderResponse* msg);
  static const ::lssdrpc::PlaceOrderFailure& failure(const PlaceOrderResponse* msg);
};

const ::lssdrpc::SwapSuccess&
PlaceOrderResponse::_Internal::swapsuccess(const PlaceOrderResponse* msg) {
  return *msg->outcome_.swapsuccess_;
}
const ::lssdrpc::Order&
PlaceOrderResponse::_Internal::order(const PlaceOrderResponse* msg) {
  return *msg->outcome_.order_;
}
const ::lssdrpc::PlaceOrderFailure&
PlaceOrderResponse::_Internal::failure(const PlaceOrderResponse* msg) {
  return *msg->outcome_.failure_;
}
void PlaceOrderResponse::set_allocated_swapsuccess(::lssdrpc::SwapSuccess* swapsuccess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_outcome();
  if (swapsuccess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swapsuccess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapsuccess, submessage_arena);
    }
    set_has_swapsuccess();
    outcome_.swapsuccess_ = swapsuccess;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderResponse.swapSuccess)
}
void PlaceOrderResponse::set_allocated_order(::lssdrpc::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_outcome();
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    set_has_order();
    outcome_.order_ = order;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderResponse.order)
}
void PlaceOrderResponse::set_allocated_failure(::lssdrpc::PlaceOrderFailure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_outcome();
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    set_has_failure();
    outcome_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderResponse.failure)
}
PlaceOrderResponse::PlaceOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.PlaceOrderResponse)
}
PlaceOrderResponse::PlaceOrderResponse(const PlaceOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_outcome();
  switch (from.outcome_case()) {
    case kSwapSuccess: {
      _internal_mutable_swapsuccess()->::lssdrpc::SwapSuccess::MergeFrom(from._internal_swapsuccess());
      break;
    }
    case kOrder: {
      _internal_mutable_order()->::lssdrpc::Order::MergeFrom(from._internal_order());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::lssdrpc::PlaceOrderFailure::MergeFrom(from._internal_failure());
      break;
    }
    case OUTCOME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.PlaceOrderResponse)
}

void PlaceOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderResponse_lssdrpc_2eproto.base);
  clear_has_outcome();
}

PlaceOrderResponse::~PlaceOrderResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.PlaceOrderResponse)
  SharedDtor();
}

void PlaceOrderResponse::SharedDtor() {
  if (has_outcome()) {
    clear_outcome();
  }
}

void PlaceOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderResponse& PlaceOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderResponse::clear_outcome() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.PlaceOrderResponse)
  switch (outcome_case()) {
    case kSwapSuccess: {
      delete outcome_.swapsuccess_;
      break;
    }
    case kOrder: {
      delete outcome_.order_;
      break;
    }
    case kFailure: {
      delete outcome_.failure_;
      break;
    }
    case OUTCOME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTCOME_NOT_SET;
}


void PlaceOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.PlaceOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_outcome();
  _internal_metadata_.Clear();
}

const char* PlaceOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.SwapSuccess swapSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapsuccess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.Order order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.PlaceOrderFailure failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.PlaceOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.SwapSuccess swapSuccess = 1;
  if (_internal_has_swapsuccess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::swapsuccess(this), target, stream);
  }

  // .lssdrpc.Order order = 2;
  if (_internal_has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::order(this), target, stream);
  }

  // .lssdrpc.PlaceOrderFailure failure = 3;
  if (_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.PlaceOrderResponse)
  return target;
}

size_t PlaceOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.PlaceOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (outcome_case()) {
    // .lssdrpc.SwapSuccess swapSuccess = 1;
    case kSwapSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outcome_.swapsuccess_);
      break;
    }
    // .lssdrpc.Order order = 2;
    case kOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outcome_.order_);
      break;
    }
    // .lssdrpc.PlaceOrderFailure failure = 3;
    case kFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outcome_.failure_);
      break;
    }
    case OUTCOME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.PlaceOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.PlaceOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.PlaceOrderResponse)
    MergeFrom(*source);
  }
}

void PlaceOrderResponse::MergeFrom(const PlaceOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.PlaceOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.outcome_case()) {
    case kSwapSuccess: {
      _internal_mutable_swapsuccess()->::lssdrpc::SwapSuccess::MergeFrom(from._internal_swapsuccess());
      break;
    }
    case kOrder: {
      _internal_mutable_order()->::lssdrpc::Order::MergeFrom(from._internal_order());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::lssdrpc::PlaceOrderFailure::MergeFrom(from._internal_failure());
      break;
    }
    case OUTCOME_NOT_SET: {
      break;
    }
  }
}

void PlaceOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.PlaceOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderResponse::CopyFrom(const PlaceOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.PlaceOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderResponse::IsInitialized() const {
  return true;
}

void PlaceOrderResponse::InternalSwap(PlaceOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(outcome_, other->outcome_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderbookFailure::InitAsDefaultInstance() {
  ::lssdrpc::_OrderbookFailure_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_OrderbookFailure_default_instance_._instance.get_mutable()->requiredfee_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class OrderbookFailure::_Internal {
 public:
  static const ::lssdrpc::BigInteger& funds(const OrderbookFailure* msg);
  static const ::lssdrpc::BigInteger& requiredfee(const OrderbookFailure* msg);
};

const ::lssdrpc::BigInteger&
OrderbookFailure::_Internal::funds(const OrderbookFailure* msg) {
  return *msg->funds_;
}
const ::lssdrpc::BigInteger&
OrderbookFailure::_Internal::requiredfee(const OrderbookFailure* msg) {
  return *msg->requiredfee_;
}
OrderbookFailure::OrderbookFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OrderbookFailure)
}
OrderbookFailure::OrderbookFailure(const OrderbookFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  failurereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failurereason().empty()) {
    failurereason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failurereason_);
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  if (from._internal_has_requiredfee()) {
    requiredfee_ = new ::lssdrpc::BigInteger(*from.requiredfee_);
  } else {
    requiredfee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OrderbookFailure)
}

void OrderbookFailure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderbookFailure_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requiredfee_) -
      reinterpret_cast<char*>(&funds_)) + sizeof(requiredfee_));
}

OrderbookFailure::~OrderbookFailure() {
  // @@protoc_insertion_point(destructor:lssdrpc.OrderbookFailure)
  SharedDtor();
}

void OrderbookFailure::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funds_;
  if (this != internal_default_instance()) delete requiredfee_;
}

void OrderbookFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderbookFailure& OrderbookFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderbookFailure_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OrderbookFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OrderbookFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requiredfee_ != nullptr) {
    delete requiredfee_;
  }
  requiredfee_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderbookFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.OrderbookFailure.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failureReason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_failurereason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.OrderbookFailure.failureReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger requiredFee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requiredfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderbookFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OrderbookFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.OrderbookFailure.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // .lssdrpc.BigInteger funds = 2;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::funds(this), target, stream);
  }

  // string failureReason = 3;
  if (this->failurereason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failurereason().data(), static_cast<int>(this->_internal_failurereason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.OrderbookFailure.failureReason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_failurereason(), target);
  }

  // .lssdrpc.BigInteger requiredFee = 4;
  if (this->has_requiredfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::requiredfee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OrderbookFailure)
  return target;
}

size_t OrderbookFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OrderbookFailure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string failureReason = 3;
  if (this->failurereason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failurereason());
  }

  // .lssdrpc.BigInteger funds = 2;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  // .lssdrpc.BigInteger requiredFee = 4;
  if (this->has_requiredfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requiredfee_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderbookFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OrderbookFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderbookFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderbookFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OrderbookFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OrderbookFailure)
    MergeFrom(*source);
  }
}

void OrderbookFailure::MergeFrom(const OrderbookFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OrderbookFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.failurereason().size() > 0) {

    failurereason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failurereason_);
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
  if (from.has_requiredfee()) {
    _internal_mutable_requiredfee()->::lssdrpc::BigInteger::MergeFrom(from._internal_requiredfee());
  }
}

void OrderbookFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OrderbookFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderbookFailure::CopyFrom(const OrderbookFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OrderbookFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookFailure::IsInitialized() const {
  return true;
}

void OrderbookFailure::InternalSwap(OrderbookFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  failurereason_.Swap(&other->failurereason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funds_, other->funds_);
  swap(requiredfee_, other->requiredfee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderFailure::InitAsDefaultInstance() {
  ::lssdrpc::_PlaceOrderFailure_default_instance_.swapfailure_ = const_cast< ::lssdrpc::SwapFailure*>(
      ::lssdrpc::SwapFailure::internal_default_instance());
  ::lssdrpc::_PlaceOrderFailure_default_instance_.orderbookfailure_ = const_cast< ::lssdrpc::OrderbookFailure*>(
      ::lssdrpc::OrderbookFailure::internal_default_instance());
}
class PlaceOrderFailure::_Internal {
 public:
  static const ::lssdrpc::SwapFailure& swapfailure(const PlaceOrderFailure* msg);
  static const ::lssdrpc::OrderbookFailure& orderbookfailure(const PlaceOrderFailure* msg);
};

const ::lssdrpc::SwapFailure&
PlaceOrderFailure::_Internal::swapfailure(const PlaceOrderFailure* msg) {
  return *msg->failure_.swapfailure_;
}
const ::lssdrpc::OrderbookFailure&
PlaceOrderFailure::_Internal::orderbookfailure(const PlaceOrderFailure* msg) {
  return *msg->failure_.orderbookfailure_;
}
void PlaceOrderFailure::set_allocated_swapfailure(::lssdrpc::SwapFailure* swapfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_failure();
  if (swapfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swapfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapfailure, submessage_arena);
    }
    set_has_swapfailure();
    failure_.swapfailure_ = swapfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderFailure.swapFailure)
}
void PlaceOrderFailure::set_allocated_orderbookfailure(::lssdrpc::OrderbookFailure* orderbookfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_failure();
  if (orderbookfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderbookfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderbookfailure, submessage_arena);
    }
    set_has_orderbookfailure();
    failure_.orderbookfailure_ = orderbookfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderFailure.orderbookFailure)
}
PlaceOrderFailure::PlaceOrderFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.PlaceOrderFailure)
}
PlaceOrderFailure::PlaceOrderFailure(const PlaceOrderFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_failure();
  switch (from.failure_case()) {
    case kSwapFailure: {
      _internal_mutable_swapfailure()->::lssdrpc::SwapFailure::MergeFrom(from._internal_swapfailure());
      break;
    }
    case kOrderbookFailure: {
      _internal_mutable_orderbookfailure()->::lssdrpc::OrderbookFailure::MergeFrom(from._internal_orderbookfailure());
      break;
    }
    case FAILURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.PlaceOrderFailure)
}

void PlaceOrderFailure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderFailure_lssdrpc_2eproto.base);
  clear_has_failure();
}

PlaceOrderFailure::~PlaceOrderFailure() {
  // @@protoc_insertion_point(destructor:lssdrpc.PlaceOrderFailure)
  SharedDtor();
}

void PlaceOrderFailure::SharedDtor() {
  if (has_failure()) {
    clear_failure();
  }
}

void PlaceOrderFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderFailure& PlaceOrderFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderFailure_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderFailure::clear_failure() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.PlaceOrderFailure)
  switch (failure_case()) {
    case kSwapFailure: {
      delete failure_.swapfailure_;
      break;
    }
    case kOrderbookFailure: {
      delete failure_.orderbookfailure_;
      break;
    }
    case FAILURE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FAILURE_NOT_SET;
}


void PlaceOrderFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.PlaceOrderFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_failure();
  _internal_metadata_.Clear();
}

const char* PlaceOrderFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.SwapFailure swapFailure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapfailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.OrderbookFailure orderbookFailure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbookfailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.PlaceOrderFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.SwapFailure swapFailure = 1;
  if (_internal_has_swapfailure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::swapfailure(this), target, stream);
  }

  // .lssdrpc.OrderbookFailure orderbookFailure = 2;
  if (_internal_has_orderbookfailure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orderbookfailure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.PlaceOrderFailure)
  return target;
}

size_t PlaceOrderFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.PlaceOrderFailure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (failure_case()) {
    // .lssdrpc.SwapFailure swapFailure = 1;
    case kSwapFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *failure_.swapfailure_);
      break;
    }
    // .lssdrpc.OrderbookFailure orderbookFailure = 2;
    case kOrderbookFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *failure_.orderbookfailure_);
      break;
    }
    case FAILURE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.PlaceOrderFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.PlaceOrderFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.PlaceOrderFailure)
    MergeFrom(*source);
  }
}

void PlaceOrderFailure::MergeFrom(const PlaceOrderFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.PlaceOrderFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.failure_case()) {
    case kSwapFailure: {
      _internal_mutable_swapfailure()->::lssdrpc::SwapFailure::MergeFrom(from._internal_swapfailure());
      break;
    }
    case kOrderbookFailure: {
      _internal_mutable_orderbookfailure()->::lssdrpc::OrderbookFailure::MergeFrom(from._internal_orderbookfailure());
      break;
    }
    case FAILURE_NOT_SET: {
      break;
    }
  }
}

void PlaceOrderFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.PlaceOrderFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderFailure::CopyFrom(const PlaceOrderFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.PlaceOrderFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderFailure::IsInitialized() const {
  return true;
}

void PlaceOrderFailure::InternalSwap(PlaceOrderFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(failure_, other->failure_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOrderRequest::InitAsDefaultInstance() {
}
class CancelOrderRequest::_Internal {
 public:
};

CancelOrderRequest::CancelOrderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.CancelOrderRequest)
}

void CancelOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOrderRequest_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.CancelOrderRequest)
  SharedDtor();
}

void CancelOrderRequest::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrderRequest& CancelOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOrderRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.CancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CancelOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.CancelOrderRequest.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.CancelOrderRequest.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.CancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.CancelOrderRequest.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.CancelOrderRequest.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.CancelOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.CancelOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.CancelOrderRequest)
    MergeFrom(*source);
  }
}

void CancelOrderRequest::MergeFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void CancelOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOrderResponse::InitAsDefaultInstance() {
}
class CancelOrderResponse::_Internal {
 public:
};

CancelOrderResponse::CancelOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.CancelOrderResponse)
}
CancelOrderResponse::CancelOrderResponse(const CancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.CancelOrderResponse)
}

void CancelOrderResponse::SharedCtor() {
}

CancelOrderResponse::~CancelOrderResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.CancelOrderResponse)
  SharedDtor();
}

void CancelOrderResponse::SharedDtor() {
}

void CancelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrderResponse& CancelOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOrderResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void CancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.CancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CancelOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.CancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.CancelOrderResponse)
  return target;
}

size_t CancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.CancelOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.CancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.CancelOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.CancelOrderResponse)
    MergeFrom(*source);
  }
}

void CancelOrderResponse::MergeFrom(const CancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.CancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.CancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderResponse::CopyFrom(const CancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.CancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderResponse::IsInitialized() const {
  return true;
}

void CancelOrderResponse::InternalSwap(CancelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeOrdersRequest::InitAsDefaultInstance() {
}
class SubscribeOrdersRequest::_Internal {
 public:
};

SubscribeOrdersRequest::SubscribeOrdersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SubscribeOrdersRequest)
}
SubscribeOrdersRequest::SubscribeOrdersRequest(const SubscribeOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SubscribeOrdersRequest)
}

void SubscribeOrdersRequest::SharedCtor() {
}

SubscribeOrdersRequest::~SubscribeOrdersRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.SubscribeOrdersRequest)
  SharedDtor();
}

void SubscribeOrdersRequest::SharedDtor() {
}

void SubscribeOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeOrdersRequest& SubscribeOrdersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeOrdersRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SubscribeOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SubscribeOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeOrdersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SubscribeOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SubscribeOrdersRequest)
  return target;
}

size_t SubscribeOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SubscribeOrdersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeOrdersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SubscribeOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeOrdersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeOrdersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SubscribeOrdersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SubscribeOrdersRequest)
    MergeFrom(*source);
  }
}

void SubscribeOrdersRequest::MergeFrom(const SubscribeOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SubscribeOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeOrdersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SubscribeOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOrdersRequest::CopyFrom(const SubscribeOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SubscribeOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrdersRequest::IsInitialized() const {
  return true;
}

void SubscribeOrdersRequest::InternalSwap(SubscribeOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOrdersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderUpdate::InitAsDefaultInstance() {
  ::lssdrpc::_OrderUpdate_default_instance_.orderadded_ = const_cast< ::lssdrpc::OrderSummary*>(
      ::lssdrpc::OrderSummary::internal_default_instance());
  ::lssdrpc::_OrderUpdate_default_instance_.orderremoval_ = const_cast< ::lssdrpc::OrderSummary*>(
      ::lssdrpc::OrderSummary::internal_default_instance());
}
class OrderUpdate::_Internal {
 public:
  static const ::lssdrpc::OrderSummary& orderadded(const OrderUpdate* msg);
  static const ::lssdrpc::OrderSummary& orderremoval(const OrderUpdate* msg);
};

const ::lssdrpc::OrderSummary&
OrderUpdate::_Internal::orderadded(const OrderUpdate* msg) {
  return *msg->update_.orderadded_;
}
const ::lssdrpc::OrderSummary&
OrderUpdate::_Internal::orderremoval(const OrderUpdate* msg) {
  return *msg->update_.orderremoval_;
}
void OrderUpdate::set_allocated_orderadded(::lssdrpc::OrderSummary* orderadded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (orderadded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderadded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderadded, submessage_arena);
    }
    set_has_orderadded();
    update_.orderadded_ = orderadded;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderUpdate.orderAdded)
}
void OrderUpdate::set_allocated_orderremoval(::lssdrpc::OrderSummary* orderremoval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (orderremoval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderremoval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderremoval, submessage_arena);
    }
    set_has_orderremoval();
    update_.orderremoval_ = orderremoval;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderUpdate.orderRemoval)
}
OrderUpdate::OrderUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OrderUpdate)
}
OrderUpdate::OrderUpdate(const OrderUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kOrderAdded: {
      _internal_mutable_orderadded()->::lssdrpc::OrderSummary::MergeFrom(from._internal_orderadded());
      break;
    }
    case kOrderRemoval: {
      _internal_mutable_orderremoval()->::lssdrpc::OrderSummary::MergeFrom(from._internal_orderremoval());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OrderUpdate)
}

void OrderUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderUpdate_lssdrpc_2eproto.base);
  clear_has_update();
}

OrderUpdate::~OrderUpdate() {
  // @@protoc_insertion_point(destructor:lssdrpc.OrderUpdate)
  SharedDtor();
}

void OrderUpdate::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
}

void OrderUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderUpdate& OrderUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderUpdate_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OrderUpdate::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.OrderUpdate)
  switch (update_case()) {
    case kOrderAdded: {
      delete update_.orderadded_;
      break;
    }
    case kOrderRemoval: {
      delete update_.orderremoval_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void OrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OrderUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear();
}

const char* OrderUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.OrderSummary orderAdded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderadded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.OrderSummary orderRemoval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderremoval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OrderUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.OrderSummary orderAdded = 1;
  if (_internal_has_orderadded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orderadded(this), target, stream);
  }

  // .lssdrpc.OrderSummary orderRemoval = 2;
  if (_internal_has_orderremoval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orderremoval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OrderUpdate)
  return target;
}

size_t OrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OrderUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .lssdrpc.OrderSummary orderAdded = 1;
    case kOrderAdded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.orderadded_);
      break;
    }
    // .lssdrpc.OrderSummary orderRemoval = 2;
    case kOrderRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.orderremoval_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OrderUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OrderUpdate)
    MergeFrom(*source);
  }
}

void OrderUpdate::MergeFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kOrderAdded: {
      _internal_mutable_orderadded()->::lssdrpc::OrderSummary::MergeFrom(from._internal_orderadded());
      break;
    }
    case kOrderRemoval: {
      _internal_mutable_orderremoval()->::lssdrpc::OrderSummary::MergeFrom(from._internal_orderremoval());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void OrderUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUpdate::CopyFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate::IsInitialized() const {
  return true;
}

void OrderUpdate::InternalSwap(OrderUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OwnOrderUpdate::InitAsDefaultInstance() {
  ::lssdrpc::_OwnOrderUpdate_default_instance_.orderadded_ = const_cast< ::lssdrpc::Order*>(
      ::lssdrpc::Order::internal_default_instance());
  ::lssdrpc::_OwnOrderUpdate_default_instance_.orderchanged_ = const_cast< ::lssdrpc::Order*>(
      ::lssdrpc::Order::internal_default_instance());
  ::lssdrpc::_OwnOrderUpdate_default_instance_.ordercompleted_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class OwnOrderUpdate::_Internal {
 public:
  static const ::lssdrpc::Order& orderadded(const OwnOrderUpdate* msg);
  static const ::lssdrpc::Order& orderchanged(const OwnOrderUpdate* msg);
};

const ::lssdrpc::Order&
OwnOrderUpdate::_Internal::orderadded(const OwnOrderUpdate* msg) {
  return *msg->update_.orderadded_;
}
const ::lssdrpc::Order&
OwnOrderUpdate::_Internal::orderchanged(const OwnOrderUpdate* msg) {
  return *msg->update_.orderchanged_;
}
void OwnOrderUpdate::set_allocated_orderadded(::lssdrpc::Order* orderadded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (orderadded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderadded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderadded, submessage_arena);
    }
    set_has_orderadded();
    update_.orderadded_ = orderadded;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OwnOrderUpdate.orderAdded)
}
void OwnOrderUpdate::set_allocated_orderchanged(::lssdrpc::Order* orderchanged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (orderchanged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderchanged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderchanged, submessage_arena);
    }
    set_has_orderchanged();
    update_.orderchanged_ = orderchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OwnOrderUpdate.orderChanged)
}
OwnOrderUpdate::OwnOrderUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OwnOrderUpdate)
}
OwnOrderUpdate::OwnOrderUpdate(const OwnOrderUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kOrderAdded: {
      _internal_mutable_orderadded()->::lssdrpc::Order::MergeFrom(from._internal_orderadded());
      break;
    }
    case kOrderChanged: {
      _internal_mutable_orderchanged()->::lssdrpc::Order::MergeFrom(from._internal_orderchanged());
      break;
    }
    case kOrderCompleted: {
      _internal_set_ordercompleted(from._internal_ordercompleted());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OwnOrderUpdate)
}

void OwnOrderUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OwnOrderUpdate_lssdrpc_2eproto.base);
  clear_has_update();
}

OwnOrderUpdate::~OwnOrderUpdate() {
  // @@protoc_insertion_point(destructor:lssdrpc.OwnOrderUpdate)
  SharedDtor();
}

void OwnOrderUpdate::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
}

void OwnOrderUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OwnOrderUpdate& OwnOrderUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OwnOrderUpdate_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OwnOrderUpdate::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.OwnOrderUpdate)
  switch (update_case()) {
    case kOrderAdded: {
      delete update_.orderadded_;
      break;
    }
    case kOrderChanged: {
      delete update_.orderchanged_;
      break;
    }
    case kOrderCompleted: {
      update_.ordercompleted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void OwnOrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OwnOrderUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear();
}

const char* OwnOrderUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.Order orderAdded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderadded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.Order orderChanged = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderchanged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderCompleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ordercompleted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.OwnOrderUpdate.orderCompleted"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnOrderUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OwnOrderUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.Order orderAdded = 1;
  if (_internal_has_orderadded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orderadded(this), target, stream);
  }

  // .lssdrpc.Order orderChanged = 2;
  if (_internal_has_orderchanged()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orderchanged(this), target, stream);
  }

  // string orderCompleted = 3;
  if (_internal_has_ordercompleted()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordercompleted().data(), static_cast<int>(this->_internal_ordercompleted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.OwnOrderUpdate.orderCompleted");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ordercompleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OwnOrderUpdate)
  return target;
}

size_t OwnOrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OwnOrderUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .lssdrpc.Order orderAdded = 1;
    case kOrderAdded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.orderadded_);
      break;
    }
    // .lssdrpc.Order orderChanged = 2;
    case kOrderChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.orderchanged_);
      break;
    }
    // string orderCompleted = 3;
    case kOrderCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ordercompleted());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnOrderUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OwnOrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnOrderUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnOrderUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OwnOrderUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OwnOrderUpdate)
    MergeFrom(*source);
  }
}

void OwnOrderUpdate::MergeFrom(const OwnOrderUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OwnOrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kOrderAdded: {
      _internal_mutable_orderadded()->::lssdrpc::Order::MergeFrom(from._internal_orderadded());
      break;
    }
    case kOrderChanged: {
      _internal_mutable_orderchanged()->::lssdrpc::Order::MergeFrom(from._internal_orderchanged());
      break;
    }
    case kOrderCompleted: {
      _internal_set_ordercompleted(from._internal_ordercompleted());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void OwnOrderUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OwnOrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnOrderUpdate::CopyFrom(const OwnOrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OwnOrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnOrderUpdate::IsInitialized() const {
  return true;
}

void OwnOrderUpdate::InternalSwap(OwnOrderUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnOrderUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderSummary::InitAsDefaultInstance() {
  ::lssdrpc::_OrderSummary_default_instance_._instance.get_mutable()->price_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_OrderSummary_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class OrderSummary::_Internal {
 public:
  static const ::lssdrpc::BigInteger& price(const OrderSummary* msg);
  static const ::lssdrpc::BigInteger& funds(const OrderSummary* msg);
};

const ::lssdrpc::BigInteger&
OrderSummary::_Internal::price(const OrderSummary* msg) {
  return *msg->price_;
}
const ::lssdrpc::BigInteger&
OrderSummary::_Internal::funds(const OrderSummary* msg) {
  return *msg->funds_;
}
OrderSummary::OrderSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OrderSummary)
}
OrderSummary::OrderSummary(const OrderSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from._internal_has_price()) {
    price_ = new ::lssdrpc::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OrderSummary)
}

void OrderSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderSummary_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&funds_) -
      reinterpret_cast<char*>(&price_)) + sizeof(funds_));
}

OrderSummary::~OrderSummary() {
  // @@protoc_insertion_point(destructor:lssdrpc.OrderSummary)
  SharedDtor();
}

void OrderSummary::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete funds_;
}

void OrderSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderSummary& OrderSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderSummary_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OrderSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OrderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.OrderSummary.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OrderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.OrderSummary.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // .lssdrpc.BigInteger price = 2;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::price(this), target, stream);
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::funds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OrderSummary)
  return target;
}

size_t OrderSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OrderSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // .lssdrpc.BigInteger price = 2;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OrderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OrderSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OrderSummary)
    MergeFrom(*source);
  }
}

void OrderSummary::MergeFrom(const OrderSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OrderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.has_price()) {
    _internal_mutable_price()->::lssdrpc::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
}

void OrderSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OrderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSummary::CopyFrom(const OrderSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OrderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSummary::IsInitialized() const {
  return true;
}

void OrderSummary::InternalSwap(OrderSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(funds_, other->funds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::lssdrpc::_Order_default_instance_._instance.get_mutable()->price_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_Order_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class Order::_Internal {
 public:
  static const ::lssdrpc::BigInteger& price(const Order* msg);
  static const ::lssdrpc::BigInteger& funds(const Order* msg);
};

const ::lssdrpc::BigInteger&
Order::_Internal::price(const Order* msg) {
  return *msg->price_;
}
const ::lssdrpc::BigInteger&
Order::_Internal::funds(const Order* msg) {
  return *msg->funds_;
}
Order::Order()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      open_(from.open_),
      closed_(from.closed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from._internal_has_price()) {
    price_ = new ::lssdrpc::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  ::memcpy(&createdat_, &from.createdat_,
    static_cast<size_t>(reinterpret_cast<char*>(&isownorder_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(isownorder_));
  // @@protoc_insertion_point(copy_constructor:lssdrpc.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_lssdrpc_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isownorder_) -
      reinterpret_cast<char*>(&price_)) + sizeof(isownorder_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:lssdrpc.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete funds_;
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_.Clear();
  closed_.Clear();
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  ::memset(&createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isownorder_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(isownorder_));
  _internal_metadata_.Clear();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pairId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.Order.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.Order.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 createdAt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.OrderSide side = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::lssdrpc::OrderSide>(val));
        } else goto handle_unusual;
        continue;
      // bool isOwnOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isownorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lssdrpc.OrderPortion open = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_open(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lssdrpc.OrderPortion closed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_closed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.Order.pairId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pairid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.Order.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  // .lssdrpc.BigInteger price = 3;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price(this), target, stream);
  }

  // .lssdrpc.BigInteger funds = 4;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::funds(this), target, stream);
  }

  // uint64 createdAt = 5;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_createdat(), target);
  }

  // .lssdrpc.OrderSide side = 6;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_side(), target);
  }

  // bool isOwnOrder = 7;
  if (this->isownorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isownorder(), target);
  }

  // repeated .lssdrpc.OrderPortion open = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_open_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_open(i), target, stream);
  }

  // repeated .lssdrpc.OrderPortion closed = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_closed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_closed(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lssdrpc.OrderPortion open = 8;
  total_size += 1UL * this->_internal_open_size();
  for (const auto& msg : this->open_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lssdrpc.OrderPortion closed = 9;
  total_size += 1UL * this->_internal_closed_size();
  for (const auto& msg : this->closed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pairId = 1;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .lssdrpc.BigInteger price = 3;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .lssdrpc.BigInteger funds = 4;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  // uint64 createdAt = 5;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createdat());
  }

  // .lssdrpc.OrderSide side = 6;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // bool isOwnOrder = 7;
  if (this->isownorder() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  open_.MergeFrom(from.open_);
  closed_.MergeFrom(from.closed_);
  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_price()) {
    _internal_mutable_price()->::lssdrpc::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.isownorder() != 0) {
    _internal_set_isownorder(from._internal_isownorder());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  open_.InternalSwap(&other->open_);
  closed_.InternalSwap(&other->closed_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(funds_, other->funds_);
  swap(createdat_, other->createdat_);
  swap(side_, other->side_);
  swap(isownorder_, other->isownorder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderPortion::InitAsDefaultInstance() {
  ::lssdrpc::_OrderPortion_default_instance_._instance.get_mutable()->amount_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class OrderPortion::_Internal {
 public:
  static const ::lssdrpc::BigInteger& amount(const OrderPortion* msg);
};

const ::lssdrpc::BigInteger&
OrderPortion::_Internal::amount(const OrderPortion* msg) {
  return *msg->amount_;
}
OrderPortion::OrderPortion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.OrderPortion)
}
OrderPortion::OrderPortion(const OrderPortion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::lssdrpc::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.OrderPortion)
}

void OrderPortion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderPortion_lssdrpc_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

OrderPortion::~OrderPortion() {
  // @@protoc_insertion_point(destructor:lssdrpc.OrderPortion)
  SharedDtor();
}

void OrderPortion::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void OrderPortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderPortion& OrderPortion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderPortion_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void OrderPortion::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.OrderPortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderPortion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.OrderPortion.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderPortion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.OrderPortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.OrderPortion.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // .lssdrpc.BigInteger amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.OrderPortion)
  return target;
}

size_t OrderPortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.OrderPortion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .lssdrpc.BigInteger amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderPortion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.OrderPortion)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderPortion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderPortion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.OrderPortion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.OrderPortion)
    MergeFrom(*source);
  }
}

void OrderPortion::MergeFrom(const OrderPortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.OrderPortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::lssdrpc::BigInteger::MergeFrom(from._internal_amount());
  }
}

void OrderPortion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.OrderPortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPortion::CopyFrom(const OrderPortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.OrderPortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPortion::IsInitialized() const {
  return true;
}

void OrderPortion::InternalSwap(OrderPortion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderPortion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeSwapsRequest::InitAsDefaultInstance() {
}
class SubscribeSwapsRequest::_Internal {
 public:
};

SubscribeSwapsRequest::SubscribeSwapsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SubscribeSwapsRequest)
}
SubscribeSwapsRequest::SubscribeSwapsRequest(const SubscribeSwapsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SubscribeSwapsRequest)
}

void SubscribeSwapsRequest::SharedCtor() {
}

SubscribeSwapsRequest::~SubscribeSwapsRequest() {
  // @@protoc_insertion_point(destructor:lssdrpc.SubscribeSwapsRequest)
  SharedDtor();
}

void SubscribeSwapsRequest::SharedDtor() {
}

void SubscribeSwapsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeSwapsRequest& SubscribeSwapsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeSwapsRequest_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SubscribeSwapsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SubscribeSwapsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeSwapsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeSwapsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SubscribeSwapsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SubscribeSwapsRequest)
  return target;
}

size_t SubscribeSwapsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SubscribeSwapsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeSwapsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SubscribeSwapsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeSwapsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeSwapsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SubscribeSwapsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SubscribeSwapsRequest)
    MergeFrom(*source);
  }
}

void SubscribeSwapsRequest::MergeFrom(const SubscribeSwapsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SubscribeSwapsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeSwapsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SubscribeSwapsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeSwapsRequest::CopyFrom(const SubscribeSwapsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SubscribeSwapsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeSwapsRequest::IsInitialized() const {
  return true;
}

void SubscribeSwapsRequest::InternalSwap(SubscribeSwapsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeSwapsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapResult::InitAsDefaultInstance() {
  ::lssdrpc::_SwapResult_default_instance_.success_ = const_cast< ::lssdrpc::SwapSuccess*>(
      ::lssdrpc::SwapSuccess::internal_default_instance());
  ::lssdrpc::_SwapResult_default_instance_.failure_ = const_cast< ::lssdrpc::SwapFailure*>(
      ::lssdrpc::SwapFailure::internal_default_instance());
}
class SwapResult::_Internal {
 public:
  static const ::lssdrpc::SwapSuccess& success(const SwapResult* msg);
  static const ::lssdrpc::SwapFailure& failure(const SwapResult* msg);
};

const ::lssdrpc::SwapSuccess&
SwapResult::_Internal::success(const SwapResult* msg) {
  return *msg->value_.success_;
}
const ::lssdrpc::SwapFailure&
SwapResult::_Internal::failure(const SwapResult* msg) {
  return *msg->value_.failure_;
}
void SwapResult::set_allocated_success(::lssdrpc::SwapSuccess* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    value_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapResult.success)
}
void SwapResult::set_allocated_failure(::lssdrpc::SwapFailure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    set_has_failure();
    value_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapResult.failure)
}
SwapResult::SwapResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SwapResult)
}
SwapResult::SwapResult(const SwapResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kSuccess: {
      _internal_mutable_success()->::lssdrpc::SwapSuccess::MergeFrom(from._internal_success());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::lssdrpc::SwapFailure::MergeFrom(from._internal_failure());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SwapResult)
}

void SwapResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapResult_lssdrpc_2eproto.base);
  clear_has_value();
}

SwapResult::~SwapResult() {
  // @@protoc_insertion_point(destructor:lssdrpc.SwapResult)
  SharedDtor();
}

void SwapResult::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void SwapResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapResult& SwapResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapResult_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SwapResult::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:lssdrpc.SwapResult)
  switch (value_case()) {
    case kSuccess: {
      delete value_.success_;
      break;
    }
    case kFailure: {
      delete value_.failure_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SwapResult::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SwapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* SwapResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.SwapSuccess success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.SwapFailure failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SwapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.SwapSuccess success = 1;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::success(this), target, stream);
  }

  // .lssdrpc.SwapFailure failure = 2;
  if (_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SwapResult)
  return target;
}

size_t SwapResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SwapResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .lssdrpc.SwapSuccess success = 1;
    case kSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.success_);
      break;
    }
    // .lssdrpc.SwapFailure failure = 2;
    case kFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.failure_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SwapResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SwapResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SwapResult)
    MergeFrom(*source);
  }
}

void SwapResult::MergeFrom(const SwapResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SwapResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kSuccess: {
      _internal_mutable_success()->::lssdrpc::SwapSuccess::MergeFrom(from._internal_success());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::lssdrpc::SwapFailure::MergeFrom(from._internal_failure());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SwapResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SwapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapResult::CopyFrom(const SwapResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SwapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapResult::IsInitialized() const {
  return true;
}

void SwapResult::InternalSwap(SwapResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapSuccess::InitAsDefaultInstance() {
  ::lssdrpc::_SwapSuccess_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_SwapSuccess_default_instance_._instance.get_mutable()->amountreceived_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_SwapSuccess_default_instance_._instance.get_mutable()->amountsent_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_SwapSuccess_default_instance_._instance.get_mutable()->price_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class SwapSuccess::_Internal {
 public:
  static const ::lssdrpc::BigInteger& funds(const SwapSuccess* msg);
  static const ::lssdrpc::BigInteger& amountreceived(const SwapSuccess* msg);
  static const ::lssdrpc::BigInteger& amountsent(const SwapSuccess* msg);
  static const ::lssdrpc::BigInteger& price(const SwapSuccess* msg);
};

const ::lssdrpc::BigInteger&
SwapSuccess::_Internal::funds(const SwapSuccess* msg) {
  return *msg->funds_;
}
const ::lssdrpc::BigInteger&
SwapSuccess::_Internal::amountreceived(const SwapSuccess* msg) {
  return *msg->amountreceived_;
}
const ::lssdrpc::BigInteger&
SwapSuccess::_Internal::amountsent(const SwapSuccess* msg) {
  return *msg->amountsent_;
}
const ::lssdrpc::BigInteger&
SwapSuccess::_Internal::price(const SwapSuccess* msg) {
  return *msg->price_;
}
SwapSuccess::SwapSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SwapSuccess)
}
SwapSuccess::SwapSuccess(const SwapSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  currencyreceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currencyreceived().empty()) {
    currencyreceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currencyreceived_);
  }
  currencysent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currencysent().empty()) {
    currencysent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currencysent_);
  }
  rpreimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpreimage().empty()) {
    rpreimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rpreimage_);
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  if (from._internal_has_amountreceived()) {
    amountreceived_ = new ::lssdrpc::BigInteger(*from.amountreceived_);
  } else {
    amountreceived_ = nullptr;
  }
  if (from._internal_has_amountsent()) {
    amountsent_ = new ::lssdrpc::BigInteger(*from.amountsent_);
  } else {
    amountsent_ = nullptr;
  }
  if (from._internal_has_price()) {
    price_ = new ::lssdrpc::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SwapSuccess)
}

void SwapSuccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapSuccess_lssdrpc_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencyreceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencysent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpreimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&funds_)) + sizeof(role_));
}

SwapSuccess::~SwapSuccess() {
  // @@protoc_insertion_point(destructor:lssdrpc.SwapSuccess)
  SharedDtor();
}

void SwapSuccess::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencyreceived_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencysent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpreimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funds_;
  if (this != internal_default_instance()) delete amountreceived_;
  if (this != internal_default_instance()) delete amountsent_;
  if (this != internal_default_instance()) delete price_;
}

void SwapSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapSuccess& SwapSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapSuccess_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SwapSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SwapSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencyreceived_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currencysent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpreimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amountreceived_ != nullptr) {
    delete amountreceived_;
  }
  amountreceived_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amountsent_ != nullptr) {
    delete amountsent_;
  }
  amountsent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear();
}

const char* SwapSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pairId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger amountReceived = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amountreceived(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger amountSent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_amountsent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.SwapSuccess.Role role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::lssdrpc::SwapSuccess_Role>(val));
        } else goto handle_unusual;
        continue;
      // string currencyReceived = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_currencyreceived();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.currencyReceived"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currencySent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_currencysent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.currencySent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rPreimage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rpreimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapSuccess.rPreimage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SwapSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.pairId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pairid(), target);
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::funds(this), target, stream);
  }

  // string rHash = 4;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.rHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rhash(), target);
  }

  // .lssdrpc.BigInteger amountReceived = 5;
  if (this->has_amountreceived()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amountreceived(this), target, stream);
  }

  // .lssdrpc.BigInteger amountSent = 6;
  if (this->has_amountsent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::amountsent(this), target, stream);
  }

  // .lssdrpc.SwapSuccess.Role role = 7;
  if (this->role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_role(), target);
  }

  // string currencyReceived = 8;
  if (this->currencyreceived().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currencyreceived().data(), static_cast<int>(this->_internal_currencyreceived().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.currencyReceived");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_currencyreceived(), target);
  }

  // string currencySent = 9;
  if (this->currencysent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currencysent().data(), static_cast<int>(this->_internal_currencysent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.currencySent");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_currencysent(), target);
  }

  // string rPreimage = 10;
  if (this->rpreimage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpreimage().data(), static_cast<int>(this->_internal_rpreimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapSuccess.rPreimage");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rpreimage(), target);
  }

  // .lssdrpc.BigInteger price = 11;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::price(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SwapSuccess)
  return target;
}

size_t SwapSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SwapSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string rHash = 4;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  // string currencyReceived = 8;
  if (this->currencyreceived().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currencyreceived());
  }

  // string currencySent = 9;
  if (this->currencysent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currencysent());
  }

  // string rPreimage = 10;
  if (this->rpreimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpreimage());
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  // .lssdrpc.BigInteger amountReceived = 5;
  if (this->has_amountreceived()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amountreceived_);
  }

  // .lssdrpc.BigInteger amountSent = 6;
  if (this->has_amountsent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amountsent_);
  }

  // .lssdrpc.BigInteger price = 11;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .lssdrpc.SwapSuccess.Role role = 7;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SwapSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SwapSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SwapSuccess)
    MergeFrom(*source);
  }
}

void SwapSuccess::MergeFrom(const SwapSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SwapSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  if (from.currencyreceived().size() > 0) {

    currencyreceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currencyreceived_);
  }
  if (from.currencysent().size() > 0) {

    currencysent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currencysent_);
  }
  if (from.rpreimage().size() > 0) {

    rpreimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rpreimage_);
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
  if (from.has_amountreceived()) {
    _internal_mutable_amountreceived()->::lssdrpc::BigInteger::MergeFrom(from._internal_amountreceived());
  }
  if (from.has_amountsent()) {
    _internal_mutable_amountsent()->::lssdrpc::BigInteger::MergeFrom(from._internal_amountsent());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::lssdrpc::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void SwapSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SwapSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSuccess::CopyFrom(const SwapSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SwapSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSuccess::IsInitialized() const {
  return true;
}

void SwapSuccess::InternalSwap(SwapSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currencyreceived_.Swap(&other->currencyreceived_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currencysent_.Swap(&other->currencysent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rpreimage_.Swap(&other->rpreimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funds_, other->funds_);
  swap(amountreceived_, other->amountreceived_);
  swap(amountsent_, other->amountsent_);
  swap(price_, other->price_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapFailure::InitAsDefaultInstance() {
  ::lssdrpc::_SwapFailure_default_instance_._instance.get_mutable()->funds_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class SwapFailure::_Internal {
 public:
  static const ::lssdrpc::BigInteger& funds(const SwapFailure* msg);
};

const ::lssdrpc::BigInteger&
SwapFailure::_Internal::funds(const SwapFailure* msg) {
  return *msg->funds_;
}
SwapFailure::SwapFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.SwapFailure)
}
SwapFailure::SwapFailure(const SwapFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  failurereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failurereason().empty()) {
    failurereason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failurereason_);
  }
  if (from._internal_has_funds()) {
    funds_ = new ::lssdrpc::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.SwapFailure)
}

void SwapFailure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapFailure_lssdrpc_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funds_ = nullptr;
}

SwapFailure::~SwapFailure() {
  // @@protoc_insertion_point(destructor:lssdrpc.SwapFailure)
  SharedDtor();
}

void SwapFailure::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funds_;
}

void SwapFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapFailure& SwapFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapFailure_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void SwapFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.SwapFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SwapFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapFailure.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pairId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapFailure.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger funds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failureReason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_failurereason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.SwapFailure.failureReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.SwapFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapFailure.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapFailure.pairId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pairid(), target);
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::funds(this), target, stream);
  }

  // string failureReason = 4;
  if (this->failurereason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failurereason().data(), static_cast<int>(this->_internal_failurereason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.SwapFailure.failureReason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_failurereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.SwapFailure)
  return target;
}

size_t SwapFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.SwapFailure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string failureReason = 4;
  if (this->failurereason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failurereason());
  }

  // .lssdrpc.BigInteger funds = 3;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.SwapFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.SwapFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.SwapFailure)
    MergeFrom(*source);
  }
}

void SwapFailure::MergeFrom(const SwapFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.SwapFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.failurereason().size() > 0) {

    failurereason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failurereason_);
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::lssdrpc::BigInteger::MergeFrom(from._internal_funds());
  }
}

void SwapFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.SwapFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapFailure::CopyFrom(const SwapFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.SwapFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapFailure::IsInitialized() const {
  return true;
}

void SwapFailure::InternalSwap(SwapFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  failurereason_.Swap(&other->failurereason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funds_, other->funds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToRentChannelCommand::InitAsDefaultInstance() {
  ::lssdrpc::_GenerateInvoiceToRentChannelCommand_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class GenerateInvoiceToRentChannelCommand::_Internal {
 public:
  static const ::lssdrpc::BigInteger& capacity(const GenerateInvoiceToRentChannelCommand* msg);
};

const ::lssdrpc::BigInteger&
GenerateInvoiceToRentChannelCommand::_Internal::capacity(const GenerateInvoiceToRentChannelCommand* msg) {
  return *msg->capacity_;
}
GenerateInvoiceToRentChannelCommand::GenerateInvoiceToRentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GenerateInvoiceToRentChannelCommand)
}
GenerateInvoiceToRentChannelCommand::GenerateInvoiceToRentChannelCommand(const GenerateInvoiceToRentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::lssdrpc::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GenerateInvoiceToRentChannelCommand)
}

void GenerateInvoiceToRentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GenerateInvoiceToRentChannelCommand::~GenerateInvoiceToRentChannelCommand() {
  // @@protoc_insertion_point(destructor:lssdrpc.GenerateInvoiceToRentChannelCommand)
  SharedDtor();
}

void GenerateInvoiceToRentChannelCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GenerateInvoiceToRentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToRentChannelCommand& GenerateInvoiceToRentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToRentChannelCommand_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToRentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToRentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GenerateInvoiceToRentChannelCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToRentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GenerateInvoiceToRentChannelCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .lssdrpc.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GenerateInvoiceToRentChannelCommand)
  return target;
}

size_t GenerateInvoiceToRentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // .lssdrpc.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToRentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToRentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToRentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GenerateInvoiceToRentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GenerateInvoiceToRentChannelCommand)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToRentChannelCommand::MergeFrom(const GenerateInvoiceToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::lssdrpc::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GenerateInvoiceToRentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToRentChannelCommand::CopyFrom(const GenerateInvoiceToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GenerateInvoiceToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToRentChannelCommand::IsInitialized() const {
  return true;
}

void GenerateInvoiceToRentChannelCommand::InternalSwap(GenerateInvoiceToRentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToRentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToRentChannelResponse::InitAsDefaultInstance() {
}
class GenerateInvoiceToRentChannelResponse::_Internal {
 public:
};

GenerateInvoiceToRentChannelResponse::GenerateInvoiceToRentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GenerateInvoiceToRentChannelResponse)
}
GenerateInvoiceToRentChannelResponse::GenerateInvoiceToRentChannelResponse(const GenerateInvoiceToRentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymentrequest().empty()) {
    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GenerateInvoiceToRentChannelResponse)
}

void GenerateInvoiceToRentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto.base);
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateInvoiceToRentChannelResponse::~GenerateInvoiceToRentChannelResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.GenerateInvoiceToRentChannelResponse)
  SharedDtor();
}

void GenerateInvoiceToRentChannelResponse::SharedDtor() {
  paymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateInvoiceToRentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToRentChannelResponse& GenerateInvoiceToRentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToRentChannelResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToRentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToRentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string paymentRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToRentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paymentRequest = 1;
  if (this->paymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paymentrequest().data(), static_cast<int>(this->_internal_paymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paymentrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GenerateInvoiceToRentChannelResponse)
  return target;
}

size_t GenerateInvoiceToRentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paymentRequest = 1;
  if (this->paymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paymentrequest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToRentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToRentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToRentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GenerateInvoiceToRentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GenerateInvoiceToRentChannelResponse)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToRentChannelResponse::MergeFrom(const GenerateInvoiceToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymentrequest().size() > 0) {

    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
}

void GenerateInvoiceToRentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToRentChannelResponse::CopyFrom(const GenerateInvoiceToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GenerateInvoiceToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToRentChannelResponse::IsInitialized() const {
  return true;
}

void GenerateInvoiceToRentChannelResponse::InternalSwap(GenerateInvoiceToRentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymentrequest_.Swap(&other->paymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToRentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentChannelCommand::InitAsDefaultInstance() {
}
class RentChannelCommand::_Internal {
 public:
};

RentChannelCommand::RentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.RentChannelCommand)
}
RentChannelCommand::RentChannelCommand(const RentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodepublickey().empty()) {
    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.RentChannelCommand)
}

void RentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentChannelCommand_lssdrpc_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RentChannelCommand::~RentChannelCommand() {
  // @@protoc_insertion_point(destructor:lssdrpc.RentChannelCommand)
  SharedDtor();
}

void RentChannelCommand::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentChannelCommand& RentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentChannelCommand_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void RentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.RentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes paymentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.RentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nodePublicKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nodepublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.RentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_paymenthash(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.RentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // bytes nodePublicKey = 3;
  if (this->nodepublickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nodepublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.RentChannelCommand)
  return target;
}

size_t RentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.RentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // bytes nodePublicKey = 3;
  if (this->nodepublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nodepublickey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.RentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.RentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.RentChannelCommand)
    MergeFrom(*source);
  }
}

void RentChannelCommand::MergeFrom(const RentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.RentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.nodepublickey().size() > 0) {

    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
}

void RentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.RentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentChannelCommand::CopyFrom(const RentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.RentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentChannelCommand::IsInitialized() const {
  return true;
}

void RentChannelCommand::InternalSwap(RentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodepublickey_.Swap(&other->nodepublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentChannelResponse::InitAsDefaultInstance() {
}
class RentChannelResponse::_Internal {
 public:
};

RentChannelResponse::RentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.RentChannelResponse)
}
RentChannelResponse::RentChannelResponse(const RentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.RentChannelResponse)
}

void RentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentChannelResponse_lssdrpc_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RentChannelResponse::~RentChannelResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.RentChannelResponse)
  SharedDtor();
}

void RentChannelResponse::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentChannelResponse& RentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentChannelResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void RentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.RentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.RentChannelResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.RentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.RentChannelResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.RentChannelResponse)
  return target;
}

size_t RentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.RentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.RentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.RentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.RentChannelResponse)
    MergeFrom(*source);
  }
}

void RentChannelResponse::MergeFrom(const RentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.RentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
}

void RentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.RentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentChannelResponse::CopyFrom(const RentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.RentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentChannelResponse::IsInitialized() const {
  return true;
}

void RentChannelResponse::InternalSwap(RentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChannelStatusCommand::InitAsDefaultInstance() {
}
class GetChannelStatusCommand::_Internal {
 public:
};

GetChannelStatusCommand::GetChannelStatusCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetChannelStatusCommand)
}
GetChannelStatusCommand::GetChannelStatusCommand(const GetChannelStatusCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetChannelStatusCommand)
}

void GetChannelStatusCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChannelStatusCommand_lssdrpc_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetChannelStatusCommand::~GetChannelStatusCommand() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetChannelStatusCommand)
  SharedDtor();
}

void GetChannelStatusCommand::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChannelStatusCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelStatusCommand& GetChannelStatusCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelStatusCommand_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetChannelStatusCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetChannelStatusCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetChannelStatusCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetChannelStatusCommand.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatusCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetChannelStatusCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetChannelStatusCommand.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetChannelStatusCommand)
  return target;
}

size_t GetChannelStatusCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetChannelStatusCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelStatusCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetChannelStatusCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelStatusCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelStatusCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetChannelStatusCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetChannelStatusCommand)
    MergeFrom(*source);
  }
}

void GetChannelStatusCommand::MergeFrom(const GetChannelStatusCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetChannelStatusCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
}

void GetChannelStatusCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetChannelStatusCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelStatusCommand::CopyFrom(const GetChannelStatusCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetChannelStatusCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatusCommand::IsInitialized() const {
  return true;
}

void GetChannelStatusCommand::InternalSwap(GetChannelStatusCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatusCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChannelStatusResponse::InitAsDefaultInstance() {
}
class GetChannelStatusResponse::_Internal {
 public:
};

GetChannelStatusResponse::GetChannelStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetChannelStatusResponse)
}
GetChannelStatusResponse::GetChannelStatusResponse(const GetChannelStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  expiresat_ = from.expiresat_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetChannelStatusResponse)
}

void GetChannelStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChannelStatusResponse_lssdrpc_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
}

GetChannelStatusResponse::~GetChannelStatusResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetChannelStatusResponse)
  SharedDtor();
}

void GetChannelStatusResponse::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChannelStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelStatusResponse& GetChannelStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelStatusResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetChannelStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetChannelStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetChannelStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetChannelStatusResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetChannelStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetChannelStatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiresat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetChannelStatusResponse)
  return target;
}

size_t GetChannelStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetChannelStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetChannelStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetChannelStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetChannelStatusResponse)
    MergeFrom(*source);
  }
}

void GetChannelStatusResponse::MergeFrom(const GetChannelStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetChannelStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
}

void GetChannelStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetChannelStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelStatusResponse::CopyFrom(const GetChannelStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetChannelStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatusResponse::IsInitialized() const {
  return true;
}

void GetChannelStatusResponse::InternalSwap(GetChannelStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiresat_, other->expiresat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToRentChannelCommand::InitAsDefaultInstance() {
  ::lssdrpc::_GetFeeToRentChannelCommand_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class GetFeeToRentChannelCommand::_Internal {
 public:
  static const ::lssdrpc::BigInteger& capacity(const GetFeeToRentChannelCommand* msg);
};

const ::lssdrpc::BigInteger&
GetFeeToRentChannelCommand::_Internal::capacity(const GetFeeToRentChannelCommand* msg) {
  return *msg->capacity_;
}
GetFeeToRentChannelCommand::GetFeeToRentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetFeeToRentChannelCommand)
}
GetFeeToRentChannelCommand::GetFeeToRentChannelCommand(const GetFeeToRentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::lssdrpc::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetFeeToRentChannelCommand)
}

void GetFeeToRentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GetFeeToRentChannelCommand::~GetFeeToRentChannelCommand() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetFeeToRentChannelCommand)
  SharedDtor();
}

void GetFeeToRentChannelCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GetFeeToRentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToRentChannelCommand& GetFeeToRentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToRentChannelCommand_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToRentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetFeeToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetFeeToRentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetFeeToRentChannelCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lssdrpc.GetFeeToRentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToRentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetFeeToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetFeeToRentChannelCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lssdrpc.GetFeeToRentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .lssdrpc.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetFeeToRentChannelCommand)
  return target;
}

size_t GetFeeToRentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetFeeToRentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // .lssdrpc.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToRentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetFeeToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToRentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToRentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetFeeToRentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetFeeToRentChannelCommand)
    MergeFrom(*source);
  }
}

void GetFeeToRentChannelCommand::MergeFrom(const GetFeeToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetFeeToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::lssdrpc::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GetFeeToRentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetFeeToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToRentChannelCommand::CopyFrom(const GetFeeToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetFeeToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToRentChannelCommand::IsInitialized() const {
  return true;
}

void GetFeeToRentChannelCommand::InternalSwap(GetFeeToRentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToRentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToRentChannelResponse::InitAsDefaultInstance() {
  ::lssdrpc::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->fee_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->rentingfee_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
  ::lssdrpc::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->onchainfees_ = const_cast< ::lssdrpc::BigInteger*>(
      ::lssdrpc::BigInteger::internal_default_instance());
}
class GetFeeToRentChannelResponse::_Internal {
 public:
  static const ::lssdrpc::BigInteger& fee(const GetFeeToRentChannelResponse* msg);
  static const ::lssdrpc::BigInteger& rentingfee(const GetFeeToRentChannelResponse* msg);
  static const ::lssdrpc::BigInteger& onchainfees(const GetFeeToRentChannelResponse* msg);
};

const ::lssdrpc::BigInteger&
GetFeeToRentChannelResponse::_Internal::fee(const GetFeeToRentChannelResponse* msg) {
  return *msg->fee_;
}
const ::lssdrpc::BigInteger&
GetFeeToRentChannelResponse::_Internal::rentingfee(const GetFeeToRentChannelResponse* msg) {
  return *msg->rentingfee_;
}
const ::lssdrpc::BigInteger&
GetFeeToRentChannelResponse::_Internal::onchainfees(const GetFeeToRentChannelResponse* msg) {
  return *msg->onchainfees_;
}
GetFeeToRentChannelResponse::GetFeeToRentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lssdrpc.GetFeeToRentChannelResponse)
}
GetFeeToRentChannelResponse::GetFeeToRentChannelResponse(const GetFeeToRentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::lssdrpc::BigInteger(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from._internal_has_rentingfee()) {
    rentingfee_ = new ::lssdrpc::BigInteger(*from.rentingfee_);
  } else {
    rentingfee_ = nullptr;
  }
  if (from._internal_has_onchainfees()) {
    onchainfees_ = new ::lssdrpc::BigInteger(*from.onchainfees_);
  } else {
    onchainfees_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lssdrpc.GetFeeToRentChannelResponse)
}

void GetFeeToRentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto.base);
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onchainfees_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(onchainfees_));
}

GetFeeToRentChannelResponse::~GetFeeToRentChannelResponse() {
  // @@protoc_insertion_point(destructor:lssdrpc.GetFeeToRentChannelResponse)
  SharedDtor();
}

void GetFeeToRentChannelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete rentingfee_;
  if (this != internal_default_instance()) delete onchainfees_;
}

void GetFeeToRentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToRentChannelResponse& GetFeeToRentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToRentChannelResponse_lssdrpc_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToRentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lssdrpc.GetFeeToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rentingfee_ != nullptr) {
    delete rentingfee_;
  }
  rentingfee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && onchainfees_ != nullptr) {
    delete onchainfees_;
  }
  onchainfees_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetFeeToRentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lssdrpc.BigInteger fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger rentingFee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rentingfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lssdrpc.BigInteger onChainFees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onchainfees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToRentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lssdrpc.GetFeeToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lssdrpc.BigInteger fee = 1;
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fee(this), target, stream);
  }

  // .lssdrpc.BigInteger rentingFee = 2;
  if (this->has_rentingfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rentingfee(this), target, stream);
  }

  // .lssdrpc.BigInteger onChainFees = 3;
  if (this->has_onchainfees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::onchainfees(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lssdrpc.GetFeeToRentChannelResponse)
  return target;
}

size_t GetFeeToRentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lssdrpc.GetFeeToRentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lssdrpc.BigInteger fee = 1;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .lssdrpc.BigInteger rentingFee = 2;
  if (this->has_rentingfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rentingfee_);
  }

  // .lssdrpc.BigInteger onChainFees = 3;
  if (this->has_onchainfees()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onchainfees_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToRentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lssdrpc.GetFeeToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToRentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToRentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lssdrpc.GetFeeToRentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lssdrpc.GetFeeToRentChannelResponse)
    MergeFrom(*source);
  }
}

void GetFeeToRentChannelResponse::MergeFrom(const GetFeeToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lssdrpc.GetFeeToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    _internal_mutable_fee()->::lssdrpc::BigInteger::MergeFrom(from._internal_fee());
  }
  if (from.has_rentingfee()) {
    _internal_mutable_rentingfee()->::lssdrpc::BigInteger::MergeFrom(from._internal_rentingfee());
  }
  if (from.has_onchainfees()) {
    _internal_mutable_onchainfees()->::lssdrpc::BigInteger::MergeFrom(from._internal_onchainfees());
  }
}

void GetFeeToRentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lssdrpc.GetFeeToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToRentChannelResponse::CopyFrom(const GetFeeToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lssdrpc.GetFeeToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToRentChannelResponse::IsInitialized() const {
  return true;
}

void GetFeeToRentChannelResponse::InternalSwap(GetFeeToRentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
  swap(rentingfee_, other->rentingfee_);
  swap(onchainfees_, other->onchainfees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToRentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lssdrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lssdrpc::BigInteger* Arena::CreateMaybeMessage< ::lssdrpc::BigInteger >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::BigInteger >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::AddCurrencyRequest* Arena::CreateMaybeMessage< ::lssdrpc::AddCurrencyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::AddCurrencyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::ConnextConfiguration* Arena::CreateMaybeMessage< ::lssdrpc::ConnextConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::ConnextConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::LndConfiguration* Arena::CreateMaybeMessage< ::lssdrpc::LndConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::LndConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::AddCurrencyResponse* Arena::CreateMaybeMessage< ::lssdrpc::AddCurrencyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::AddCurrencyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetAddedCurrenciesRequest* Arena::CreateMaybeMessage< ::lssdrpc::GetAddedCurrenciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetAddedCurrenciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetAddedCurrenciesResponse* Arena::CreateMaybeMessage< ::lssdrpc::GetAddedCurrenciesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetAddedCurrenciesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::EnableTradingPairRequest* Arena::CreateMaybeMessage< ::lssdrpc::EnableTradingPairRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::EnableTradingPairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::EnableTradingPairResponse* Arena::CreateMaybeMessage< ::lssdrpc::EnableTradingPairResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::EnableTradingPairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetActiveTradingPairRequest* Arena::CreateMaybeMessage< ::lssdrpc::GetActiveTradingPairRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetActiveTradingPairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetActiveTradingPairResponse* Arena::CreateMaybeMessage< ::lssdrpc::GetActiveTradingPairResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetActiveTradingPairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SubscribeOrderbookStateRequest* Arena::CreateMaybeMessage< ::lssdrpc::SubscribeOrderbookStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SubscribeOrderbookStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OrderbookState* Arena::CreateMaybeMessage< ::lssdrpc::OrderbookState >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OrderbookState >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::ListOrdersRequest* Arena::CreateMaybeMessage< ::lssdrpc::ListOrdersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::ListOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::ListOrdersResponse* Arena::CreateMaybeMessage< ::lssdrpc::ListOrdersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::ListOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::ListOwnOrdersRequest* Arena::CreateMaybeMessage< ::lssdrpc::ListOwnOrdersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::ListOwnOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::ListOwnOrdersResponse* Arena::CreateMaybeMessage< ::lssdrpc::ListOwnOrdersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::ListOwnOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::PlaceOrderRequest* Arena::CreateMaybeMessage< ::lssdrpc::PlaceOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::PlaceOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::PlaceOrderResponse* Arena::CreateMaybeMessage< ::lssdrpc::PlaceOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::PlaceOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OrderbookFailure* Arena::CreateMaybeMessage< ::lssdrpc::OrderbookFailure >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OrderbookFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::PlaceOrderFailure* Arena::CreateMaybeMessage< ::lssdrpc::PlaceOrderFailure >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::PlaceOrderFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::CancelOrderRequest* Arena::CreateMaybeMessage< ::lssdrpc::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::CancelOrderResponse* Arena::CreateMaybeMessage< ::lssdrpc::CancelOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::CancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SubscribeOrdersRequest* Arena::CreateMaybeMessage< ::lssdrpc::SubscribeOrdersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SubscribeOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OrderUpdate* Arena::CreateMaybeMessage< ::lssdrpc::OrderUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OrderUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OwnOrderUpdate* Arena::CreateMaybeMessage< ::lssdrpc::OwnOrderUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OwnOrderUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OrderSummary* Arena::CreateMaybeMessage< ::lssdrpc::OrderSummary >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OrderSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::Order* Arena::CreateMaybeMessage< ::lssdrpc::Order >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::OrderPortion* Arena::CreateMaybeMessage< ::lssdrpc::OrderPortion >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::OrderPortion >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SubscribeSwapsRequest* Arena::CreateMaybeMessage< ::lssdrpc::SubscribeSwapsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SubscribeSwapsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SwapResult* Arena::CreateMaybeMessage< ::lssdrpc::SwapResult >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SwapResult >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SwapSuccess* Arena::CreateMaybeMessage< ::lssdrpc::SwapSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SwapSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::SwapFailure* Arena::CreateMaybeMessage< ::lssdrpc::SwapFailure >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::SwapFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GenerateInvoiceToRentChannelCommand* Arena::CreateMaybeMessage< ::lssdrpc::GenerateInvoiceToRentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GenerateInvoiceToRentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GenerateInvoiceToRentChannelResponse* Arena::CreateMaybeMessage< ::lssdrpc::GenerateInvoiceToRentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GenerateInvoiceToRentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::RentChannelCommand* Arena::CreateMaybeMessage< ::lssdrpc::RentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::RentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::RentChannelResponse* Arena::CreateMaybeMessage< ::lssdrpc::RentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::RentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetChannelStatusCommand* Arena::CreateMaybeMessage< ::lssdrpc::GetChannelStatusCommand >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetChannelStatusCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetChannelStatusResponse* Arena::CreateMaybeMessage< ::lssdrpc::GetChannelStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetChannelStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetFeeToRentChannelCommand* Arena::CreateMaybeMessage< ::lssdrpc::GetFeeToRentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetFeeToRentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::lssdrpc::GetFeeToRentChannelResponse* Arena::CreateMaybeMessage< ::lssdrpc::GetFeeToRentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lssdrpc::GetFeeToRentChannelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
