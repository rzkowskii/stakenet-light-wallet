// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lssdrpc.proto

#include "lssdrpc.pb.h"
#include "lssdrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lssdrpc {

static const char* currencies_method_names[] = {
  "/lssdrpc.currencies/AddCurrency",
  "/lssdrpc.currencies/GetAddedCurrencies",
};

std::unique_ptr< currencies::Stub> currencies::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< currencies::Stub> stub(new currencies::Stub(channel));
  return stub;
}

currencies::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddCurrency_(currencies_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAddedCurrencies_(currencies_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status currencies::Stub::AddCurrency(::grpc::ClientContext* context, const ::lssdrpc::AddCurrencyRequest& request, ::lssdrpc::AddCurrencyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddCurrency_, context, request, response);
}

void currencies::Stub::experimental_async::AddCurrency(::grpc::ClientContext* context, const ::lssdrpc::AddCurrencyRequest* request, ::lssdrpc::AddCurrencyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddCurrency_, context, request, response, std::move(f));
}

void currencies::Stub::experimental_async::AddCurrency(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::AddCurrencyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddCurrency_, context, request, response, std::move(f));
}

void currencies::Stub::experimental_async::AddCurrency(::grpc::ClientContext* context, const ::lssdrpc::AddCurrencyRequest* request, ::lssdrpc::AddCurrencyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddCurrency_, context, request, response, reactor);
}

void currencies::Stub::experimental_async::AddCurrency(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::AddCurrencyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddCurrency_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::AddCurrencyResponse>* currencies::Stub::AsyncAddCurrencyRaw(::grpc::ClientContext* context, const ::lssdrpc::AddCurrencyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::AddCurrencyResponse>::Create(channel_.get(), cq, rpcmethod_AddCurrency_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::AddCurrencyResponse>* currencies::Stub::PrepareAsyncAddCurrencyRaw(::grpc::ClientContext* context, const ::lssdrpc::AddCurrencyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::AddCurrencyResponse>::Create(channel_.get(), cq, rpcmethod_AddCurrency_, context, request, false);
}

::grpc::Status currencies::Stub::GetAddedCurrencies(::grpc::ClientContext* context, const ::lssdrpc::GetAddedCurrenciesRequest& request, ::lssdrpc::GetAddedCurrenciesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAddedCurrencies_, context, request, response);
}

void currencies::Stub::experimental_async::GetAddedCurrencies(::grpc::ClientContext* context, const ::lssdrpc::GetAddedCurrenciesRequest* request, ::lssdrpc::GetAddedCurrenciesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAddedCurrencies_, context, request, response, std::move(f));
}

void currencies::Stub::experimental_async::GetAddedCurrencies(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetAddedCurrenciesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAddedCurrencies_, context, request, response, std::move(f));
}

void currencies::Stub::experimental_async::GetAddedCurrencies(::grpc::ClientContext* context, const ::lssdrpc::GetAddedCurrenciesRequest* request, ::lssdrpc::GetAddedCurrenciesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAddedCurrencies_, context, request, response, reactor);
}

void currencies::Stub::experimental_async::GetAddedCurrencies(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetAddedCurrenciesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAddedCurrencies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetAddedCurrenciesResponse>* currencies::Stub::AsyncGetAddedCurrenciesRaw(::grpc::ClientContext* context, const ::lssdrpc::GetAddedCurrenciesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetAddedCurrenciesResponse>::Create(channel_.get(), cq, rpcmethod_GetAddedCurrencies_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetAddedCurrenciesResponse>* currencies::Stub::PrepareAsyncGetAddedCurrenciesRaw(::grpc::ClientContext* context, const ::lssdrpc::GetAddedCurrenciesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetAddedCurrenciesResponse>::Create(channel_.get(), cq, rpcmethod_GetAddedCurrencies_, context, request, false);
}

currencies::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      currencies_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< currencies::Service, ::lssdrpc::AddCurrencyRequest, ::lssdrpc::AddCurrencyResponse>(
          std::mem_fn(&currencies::Service::AddCurrency), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      currencies_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< currencies::Service, ::lssdrpc::GetAddedCurrenciesRequest, ::lssdrpc::GetAddedCurrenciesResponse>(
          std::mem_fn(&currencies::Service::GetAddedCurrencies), this)));
}

currencies::Service::~Service() {
}

::grpc::Status currencies::Service::AddCurrency(::grpc::ServerContext* context, const ::lssdrpc::AddCurrencyRequest* request, ::lssdrpc::AddCurrencyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status currencies::Service::GetAddedCurrencies(::grpc::ServerContext* context, const ::lssdrpc::GetAddedCurrenciesRequest* request, ::lssdrpc::GetAddedCurrenciesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* tradingPairs_method_names[] = {
  "/lssdrpc.tradingPairs/EnableTradingPair",
  "/lssdrpc.tradingPairs/GetActiveTradingPair",
};

std::unique_ptr< tradingPairs::Stub> tradingPairs::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< tradingPairs::Stub> stub(new tradingPairs::Stub(channel));
  return stub;
}

tradingPairs::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EnableTradingPair_(tradingPairs_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveTradingPair_(tradingPairs_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status tradingPairs::Stub::EnableTradingPair(::grpc::ClientContext* context, const ::lssdrpc::EnableTradingPairRequest& request, ::lssdrpc::EnableTradingPairResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnableTradingPair_, context, request, response);
}

void tradingPairs::Stub::experimental_async::EnableTradingPair(::grpc::ClientContext* context, const ::lssdrpc::EnableTradingPairRequest* request, ::lssdrpc::EnableTradingPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableTradingPair_, context, request, response, std::move(f));
}

void tradingPairs::Stub::experimental_async::EnableTradingPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::EnableTradingPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableTradingPair_, context, request, response, std::move(f));
}

void tradingPairs::Stub::experimental_async::EnableTradingPair(::grpc::ClientContext* context, const ::lssdrpc::EnableTradingPairRequest* request, ::lssdrpc::EnableTradingPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableTradingPair_, context, request, response, reactor);
}

void tradingPairs::Stub::experimental_async::EnableTradingPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::EnableTradingPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableTradingPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::EnableTradingPairResponse>* tradingPairs::Stub::AsyncEnableTradingPairRaw(::grpc::ClientContext* context, const ::lssdrpc::EnableTradingPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::EnableTradingPairResponse>::Create(channel_.get(), cq, rpcmethod_EnableTradingPair_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::EnableTradingPairResponse>* tradingPairs::Stub::PrepareAsyncEnableTradingPairRaw(::grpc::ClientContext* context, const ::lssdrpc::EnableTradingPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::EnableTradingPairResponse>::Create(channel_.get(), cq, rpcmethod_EnableTradingPair_, context, request, false);
}

::grpc::Status tradingPairs::Stub::GetActiveTradingPair(::grpc::ClientContext* context, const ::lssdrpc::GetActiveTradingPairRequest& request, ::lssdrpc::GetActiveTradingPairResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetActiveTradingPair_, context, request, response);
}

void tradingPairs::Stub::experimental_async::GetActiveTradingPair(::grpc::ClientContext* context, const ::lssdrpc::GetActiveTradingPairRequest* request, ::lssdrpc::GetActiveTradingPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActiveTradingPair_, context, request, response, std::move(f));
}

void tradingPairs::Stub::experimental_async::GetActiveTradingPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetActiveTradingPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActiveTradingPair_, context, request, response, std::move(f));
}

void tradingPairs::Stub::experimental_async::GetActiveTradingPair(::grpc::ClientContext* context, const ::lssdrpc::GetActiveTradingPairRequest* request, ::lssdrpc::GetActiveTradingPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActiveTradingPair_, context, request, response, reactor);
}

void tradingPairs::Stub::experimental_async::GetActiveTradingPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetActiveTradingPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActiveTradingPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetActiveTradingPairResponse>* tradingPairs::Stub::AsyncGetActiveTradingPairRaw(::grpc::ClientContext* context, const ::lssdrpc::GetActiveTradingPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetActiveTradingPairResponse>::Create(channel_.get(), cq, rpcmethod_GetActiveTradingPair_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetActiveTradingPairResponse>* tradingPairs::Stub::PrepareAsyncGetActiveTradingPairRaw(::grpc::ClientContext* context, const ::lssdrpc::GetActiveTradingPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetActiveTradingPairResponse>::Create(channel_.get(), cq, rpcmethod_GetActiveTradingPair_, context, request, false);
}

tradingPairs::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tradingPairs_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tradingPairs::Service, ::lssdrpc::EnableTradingPairRequest, ::lssdrpc::EnableTradingPairResponse>(
          std::mem_fn(&tradingPairs::Service::EnableTradingPair), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tradingPairs_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tradingPairs::Service, ::lssdrpc::GetActiveTradingPairRequest, ::lssdrpc::GetActiveTradingPairResponse>(
          std::mem_fn(&tradingPairs::Service::GetActiveTradingPair), this)));
}

tradingPairs::Service::~Service() {
}

::grpc::Status tradingPairs::Service::EnableTradingPair(::grpc::ServerContext* context, const ::lssdrpc::EnableTradingPairRequest* request, ::lssdrpc::EnableTradingPairResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tradingPairs::Service::GetActiveTradingPair(::grpc::ServerContext* context, const ::lssdrpc::GetActiveTradingPairRequest* request, ::lssdrpc::GetActiveTradingPairResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* orders_method_names[] = {
  "/lssdrpc.orders/PlaceOrder",
  "/lssdrpc.orders/CancelOrder",
  "/lssdrpc.orders/SubscribeOrders",
  "/lssdrpc.orders/SubscribeOwnOrders",
  "/lssdrpc.orders/ListOrders",
  "/lssdrpc.orders/ListOwnOrders",
  "/lssdrpc.orders/SubscribeOrderbookState",
};

std::unique_ptr< orders::Stub> orders::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< orders::Stub> stub(new orders::Stub(channel));
  return stub;
}

orders::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PlaceOrder_(orders_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(orders_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeOrders_(orders_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeOwnOrders_(orders_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListOrders_(orders_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOwnOrders_(orders_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeOrderbookState_(orders_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status orders::Stub::PlaceOrder(::grpc::ClientContext* context, const ::lssdrpc::PlaceOrderRequest& request, ::lssdrpc::PlaceOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlaceOrder_, context, request, response);
}

void orders::Stub::experimental_async::PlaceOrder(::grpc::ClientContext* context, const ::lssdrpc::PlaceOrderRequest* request, ::lssdrpc::PlaceOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::PlaceOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::PlaceOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::PlaceOrder(::grpc::ClientContext* context, const ::lssdrpc::PlaceOrderRequest* request, ::lssdrpc::PlaceOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, reactor);
}

void orders::Stub::experimental_async::PlaceOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::PlaceOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::PlaceOrderResponse>* orders::Stub::AsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::lssdrpc::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::PlaceOrderResponse>::Create(channel_.get(), cq, rpcmethod_PlaceOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::PlaceOrderResponse>* orders::Stub::PrepareAsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::lssdrpc::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::PlaceOrderResponse>::Create(channel_.get(), cq, rpcmethod_PlaceOrder_, context, request, false);
}

::grpc::Status orders::Stub::CancelOrder(::grpc::ClientContext* context, const ::lssdrpc::CancelOrderRequest& request, ::lssdrpc::CancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void orders::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::lssdrpc::CancelOrderRequest* request, ::lssdrpc::CancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::CancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::lssdrpc::CancelOrderRequest* request, ::lssdrpc::CancelOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

void orders::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::CancelOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::CancelOrderResponse>* orders::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::lssdrpc::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::CancelOrderResponse>::Create(channel_.get(), cq, rpcmethod_CancelOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::CancelOrderResponse>* orders::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::lssdrpc::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::CancelOrderResponse>::Create(channel_.get(), cq, rpcmethod_CancelOrder_, context, request, false);
}

::grpc::ClientReader< ::lssdrpc::OrderUpdate>* orders::Stub::SubscribeOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lssdrpc::OrderUpdate>::Create(channel_.get(), rpcmethod_SubscribeOrders_, context, request);
}

void orders::Stub::experimental_async::SubscribeOrders(::grpc::ClientContext* context, ::lssdrpc::SubscribeOrdersRequest* request, ::grpc::experimental::ClientReadReactor< ::lssdrpc::OrderUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lssdrpc::OrderUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeOrders_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lssdrpc::OrderUpdate>* orders::Stub::AsyncSubscribeOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OrderUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeOrders_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lssdrpc::OrderUpdate>* orders::Stub::PrepareAsyncSubscribeOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OrderUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeOrders_, context, request, false, nullptr);
}

::grpc::ClientReader< ::lssdrpc::OwnOrderUpdate>* orders::Stub::SubscribeOwnOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lssdrpc::OwnOrderUpdate>::Create(channel_.get(), rpcmethod_SubscribeOwnOrders_, context, request);
}

void orders::Stub::experimental_async::SubscribeOwnOrders(::grpc::ClientContext* context, ::lssdrpc::SubscribeOrdersRequest* request, ::grpc::experimental::ClientReadReactor< ::lssdrpc::OwnOrderUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lssdrpc::OwnOrderUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeOwnOrders_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lssdrpc::OwnOrderUpdate>* orders::Stub::AsyncSubscribeOwnOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OwnOrderUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeOwnOrders_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lssdrpc::OwnOrderUpdate>* orders::Stub::PrepareAsyncSubscribeOwnOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OwnOrderUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeOwnOrders_, context, request, false, nullptr);
}

::grpc::Status orders::Stub::ListOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOrdersRequest& request, ::lssdrpc::ListOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOrders_, context, request, response);
}

void orders::Stub::experimental_async::ListOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOrdersRequest* request, ::lssdrpc::ListOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrders_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::ListOrders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::ListOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrders_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::ListOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOrdersRequest* request, ::lssdrpc::ListOrdersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrders_, context, request, response, reactor);
}

void orders::Stub::experimental_async::ListOrders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::ListOrdersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::ListOrdersResponse>* orders::Stub::AsyncListOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::ListOrdersResponse>::Create(channel_.get(), cq, rpcmethod_ListOrders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::ListOrdersResponse>* orders::Stub::PrepareAsyncListOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::ListOrdersResponse>::Create(channel_.get(), cq, rpcmethod_ListOrders_, context, request, false);
}

::grpc::Status orders::Stub::ListOwnOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOwnOrdersRequest& request, ::lssdrpc::ListOwnOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOwnOrders_, context, request, response);
}

void orders::Stub::experimental_async::ListOwnOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOwnOrdersRequest* request, ::lssdrpc::ListOwnOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOwnOrders_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::ListOwnOrders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::ListOwnOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOwnOrders_, context, request, response, std::move(f));
}

void orders::Stub::experimental_async::ListOwnOrders(::grpc::ClientContext* context, const ::lssdrpc::ListOwnOrdersRequest* request, ::lssdrpc::ListOwnOrdersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOwnOrders_, context, request, response, reactor);
}

void orders::Stub::experimental_async::ListOwnOrders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::ListOwnOrdersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOwnOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::ListOwnOrdersResponse>* orders::Stub::AsyncListOwnOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::ListOwnOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::ListOwnOrdersResponse>::Create(channel_.get(), cq, rpcmethod_ListOwnOrders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::ListOwnOrdersResponse>* orders::Stub::PrepareAsyncListOwnOrdersRaw(::grpc::ClientContext* context, const ::lssdrpc::ListOwnOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::ListOwnOrdersResponse>::Create(channel_.get(), cq, rpcmethod_ListOwnOrders_, context, request, false);
}

::grpc::ClientReader< ::lssdrpc::OrderbookState>* orders::Stub::SubscribeOrderbookStateRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrderbookStateRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lssdrpc::OrderbookState>::Create(channel_.get(), rpcmethod_SubscribeOrderbookState_, context, request);
}

void orders::Stub::experimental_async::SubscribeOrderbookState(::grpc::ClientContext* context, ::lssdrpc::SubscribeOrderbookStateRequest* request, ::grpc::experimental::ClientReadReactor< ::lssdrpc::OrderbookState>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lssdrpc::OrderbookState>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeOrderbookState_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lssdrpc::OrderbookState>* orders::Stub::AsyncSubscribeOrderbookStateRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrderbookStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OrderbookState>::Create(channel_.get(), cq, rpcmethod_SubscribeOrderbookState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lssdrpc::OrderbookState>* orders::Stub::PrepareAsyncSubscribeOrderbookStateRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeOrderbookStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::OrderbookState>::Create(channel_.get(), cq, rpcmethod_SubscribeOrderbookState_, context, request, false, nullptr);
}

orders::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< orders::Service, ::lssdrpc::PlaceOrderRequest, ::lssdrpc::PlaceOrderResponse>(
          std::mem_fn(&orders::Service::PlaceOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< orders::Service, ::lssdrpc::CancelOrderRequest, ::lssdrpc::CancelOrderResponse>(
          std::mem_fn(&orders::Service::CancelOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< orders::Service, ::lssdrpc::SubscribeOrdersRequest, ::lssdrpc::OrderUpdate>(
          std::mem_fn(&orders::Service::SubscribeOrders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< orders::Service, ::lssdrpc::SubscribeOrdersRequest, ::lssdrpc::OwnOrderUpdate>(
          std::mem_fn(&orders::Service::SubscribeOwnOrders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< orders::Service, ::lssdrpc::ListOrdersRequest, ::lssdrpc::ListOrdersResponse>(
          std::mem_fn(&orders::Service::ListOrders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< orders::Service, ::lssdrpc::ListOwnOrdersRequest, ::lssdrpc::ListOwnOrdersResponse>(
          std::mem_fn(&orders::Service::ListOwnOrders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      orders_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< orders::Service, ::lssdrpc::SubscribeOrderbookStateRequest, ::lssdrpc::OrderbookState>(
          std::mem_fn(&orders::Service::SubscribeOrderbookState), this)));
}

orders::Service::~Service() {
}

::grpc::Status orders::Service::PlaceOrder(::grpc::ServerContext* context, const ::lssdrpc::PlaceOrderRequest* request, ::lssdrpc::PlaceOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::CancelOrder(::grpc::ServerContext* context, const ::lssdrpc::CancelOrderRequest* request, ::lssdrpc::CancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::SubscribeOrders(::grpc::ServerContext* context, const ::lssdrpc::SubscribeOrdersRequest* request, ::grpc::ServerWriter< ::lssdrpc::OrderUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::SubscribeOwnOrders(::grpc::ServerContext* context, const ::lssdrpc::SubscribeOrdersRequest* request, ::grpc::ServerWriter< ::lssdrpc::OwnOrderUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::ListOrders(::grpc::ServerContext* context, const ::lssdrpc::ListOrdersRequest* request, ::lssdrpc::ListOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::ListOwnOrders(::grpc::ServerContext* context, const ::lssdrpc::ListOwnOrdersRequest* request, ::lssdrpc::ListOwnOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status orders::Service::SubscribeOrderbookState(::grpc::ServerContext* context, const ::lssdrpc::SubscribeOrderbookStateRequest* request, ::grpc::ServerWriter< ::lssdrpc::OrderbookState>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* swaps_method_names[] = {
  "/lssdrpc.swaps/SubscribeSwaps",
};

std::unique_ptr< swaps::Stub> swaps::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< swaps::Stub> stub(new swaps::Stub(channel));
  return stub;
}

swaps::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubscribeSwaps_(swaps_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::lssdrpc::SwapResult>* swaps::Stub::SubscribeSwapsRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeSwapsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lssdrpc::SwapResult>::Create(channel_.get(), rpcmethod_SubscribeSwaps_, context, request);
}

void swaps::Stub::experimental_async::SubscribeSwaps(::grpc::ClientContext* context, ::lssdrpc::SubscribeSwapsRequest* request, ::grpc::experimental::ClientReadReactor< ::lssdrpc::SwapResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lssdrpc::SwapResult>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeSwaps_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lssdrpc::SwapResult>* swaps::Stub::AsyncSubscribeSwapsRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeSwapsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::SwapResult>::Create(channel_.get(), cq, rpcmethod_SubscribeSwaps_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lssdrpc::SwapResult>* swaps::Stub::PrepareAsyncSubscribeSwapsRaw(::grpc::ClientContext* context, const ::lssdrpc::SubscribeSwapsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lssdrpc::SwapResult>::Create(channel_.get(), cq, rpcmethod_SubscribeSwaps_, context, request, false, nullptr);
}

swaps::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      swaps_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< swaps::Service, ::lssdrpc::SubscribeSwapsRequest, ::lssdrpc::SwapResult>(
          std::mem_fn(&swaps::Service::SubscribeSwaps), this)));
}

swaps::Service::~Service() {
}

::grpc::Status swaps::Service::SubscribeSwaps(::grpc::ServerContext* context, const ::lssdrpc::SubscribeSwapsRequest* request, ::grpc::ServerWriter< ::lssdrpc::SwapResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* renting_method_names[] = {
  "/lssdrpc.renting/GenerateRentChannelInvoice",
  "/lssdrpc.renting/RentChannel",
  "/lssdrpc.renting/GetChannelStatus",
  "/lssdrpc.renting/GetFeeToRentChannel",
};

std::unique_ptr< renting::Stub> renting::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< renting::Stub> stub(new renting::Stub(channel));
  return stub;
}

renting::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GenerateRentChannelInvoice_(renting_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RentChannel_(renting_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChannelStatus_(renting_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFeeToRentChannel_(renting_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status renting::Stub::GenerateRentChannelInvoice(::grpc::ClientContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand& request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateRentChannelInvoice_, context, request, response);
}

void renting::Stub::experimental_async::GenerateRentChannelInvoice(::grpc::ClientContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand* request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateRentChannelInvoice_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GenerateRentChannelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateRentChannelInvoice_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GenerateRentChannelInvoice(::grpc::ClientContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand* request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateRentChannelInvoice_, context, request, response, reactor);
}

void renting::Stub::experimental_async::GenerateRentChannelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateRentChannelInvoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GenerateInvoiceToRentChannelResponse>* renting::Stub::AsyncGenerateRentChannelInvoiceRaw(::grpc::ClientContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GenerateInvoiceToRentChannelResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRentChannelInvoice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GenerateInvoiceToRentChannelResponse>* renting::Stub::PrepareAsyncGenerateRentChannelInvoiceRaw(::grpc::ClientContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GenerateInvoiceToRentChannelResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRentChannelInvoice_, context, request, false);
}

::grpc::Status renting::Stub::RentChannel(::grpc::ClientContext* context, const ::lssdrpc::RentChannelCommand& request, ::lssdrpc::RentChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RentChannel_, context, request, response);
}

void renting::Stub::experimental_async::RentChannel(::grpc::ClientContext* context, const ::lssdrpc::RentChannelCommand* request, ::lssdrpc::RentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RentChannel_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::RentChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::RentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RentChannel_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::RentChannel(::grpc::ClientContext* context, const ::lssdrpc::RentChannelCommand* request, ::lssdrpc::RentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RentChannel_, context, request, response, reactor);
}

void renting::Stub::experimental_async::RentChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::RentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RentChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::RentChannelResponse>* renting::Stub::AsyncRentChannelRaw(::grpc::ClientContext* context, const ::lssdrpc::RentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::RentChannelResponse>::Create(channel_.get(), cq, rpcmethod_RentChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::RentChannelResponse>* renting::Stub::PrepareAsyncRentChannelRaw(::grpc::ClientContext* context, const ::lssdrpc::RentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::RentChannelResponse>::Create(channel_.get(), cq, rpcmethod_RentChannel_, context, request, false);
}

::grpc::Status renting::Stub::GetChannelStatus(::grpc::ClientContext* context, const ::lssdrpc::GetChannelStatusCommand& request, ::lssdrpc::GetChannelStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChannelStatus_, context, request, response);
}

void renting::Stub::experimental_async::GetChannelStatus(::grpc::ClientContext* context, const ::lssdrpc::GetChannelStatusCommand* request, ::lssdrpc::GetChannelStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChannelStatus_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GetChannelStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetChannelStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChannelStatus_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GetChannelStatus(::grpc::ClientContext* context, const ::lssdrpc::GetChannelStatusCommand* request, ::lssdrpc::GetChannelStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChannelStatus_, context, request, response, reactor);
}

void renting::Stub::experimental_async::GetChannelStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetChannelStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChannelStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetChannelStatusResponse>* renting::Stub::AsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::lssdrpc::GetChannelStatusCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetChannelStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetChannelStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetChannelStatusResponse>* renting::Stub::PrepareAsyncGetChannelStatusRaw(::grpc::ClientContext* context, const ::lssdrpc::GetChannelStatusCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetChannelStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetChannelStatus_, context, request, false);
}

::grpc::Status renting::Stub::GetFeeToRentChannel(::grpc::ClientContext* context, const ::lssdrpc::GetFeeToRentChannelCommand& request, ::lssdrpc::GetFeeToRentChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFeeToRentChannel_, context, request, response);
}

void renting::Stub::experimental_async::GetFeeToRentChannel(::grpc::ClientContext* context, const ::lssdrpc::GetFeeToRentChannelCommand* request, ::lssdrpc::GetFeeToRentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFeeToRentChannel_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GetFeeToRentChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetFeeToRentChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFeeToRentChannel_, context, request, response, std::move(f));
}

void renting::Stub::experimental_async::GetFeeToRentChannel(::grpc::ClientContext* context, const ::lssdrpc::GetFeeToRentChannelCommand* request, ::lssdrpc::GetFeeToRentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFeeToRentChannel_, context, request, response, reactor);
}

void renting::Stub::experimental_async::GetFeeToRentChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lssdrpc::GetFeeToRentChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFeeToRentChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetFeeToRentChannelResponse>* renting::Stub::AsyncGetFeeToRentChannelRaw(::grpc::ClientContext* context, const ::lssdrpc::GetFeeToRentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetFeeToRentChannelResponse>::Create(channel_.get(), cq, rpcmethod_GetFeeToRentChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lssdrpc::GetFeeToRentChannelResponse>* renting::Stub::PrepareAsyncGetFeeToRentChannelRaw(::grpc::ClientContext* context, const ::lssdrpc::GetFeeToRentChannelCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lssdrpc::GetFeeToRentChannelResponse>::Create(channel_.get(), cq, rpcmethod_GetFeeToRentChannel_, context, request, false);
}

renting::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      renting_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< renting::Service, ::lssdrpc::GenerateInvoiceToRentChannelCommand, ::lssdrpc::GenerateInvoiceToRentChannelResponse>(
          std::mem_fn(&renting::Service::GenerateRentChannelInvoice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      renting_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< renting::Service, ::lssdrpc::RentChannelCommand, ::lssdrpc::RentChannelResponse>(
          std::mem_fn(&renting::Service::RentChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      renting_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< renting::Service, ::lssdrpc::GetChannelStatusCommand, ::lssdrpc::GetChannelStatusResponse>(
          std::mem_fn(&renting::Service::GetChannelStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      renting_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< renting::Service, ::lssdrpc::GetFeeToRentChannelCommand, ::lssdrpc::GetFeeToRentChannelResponse>(
          std::mem_fn(&renting::Service::GetFeeToRentChannel), this)));
}

renting::Service::~Service() {
}

::grpc::Status renting::Service::GenerateRentChannelInvoice(::grpc::ServerContext* context, const ::lssdrpc::GenerateInvoiceToRentChannelCommand* request, ::lssdrpc::GenerateInvoiceToRentChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status renting::Service::RentChannel(::grpc::ServerContext* context, const ::lssdrpc::RentChannelCommand* request, ::lssdrpc::RentChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status renting::Service::GetChannelStatus(::grpc::ServerContext* context, const ::lssdrpc::GetChannelStatusCommand* request, ::lssdrpc::GetChannelStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status renting::Service::GetFeeToRentChannel(::grpc::ServerContext* context, const ::lssdrpc::GetFeeToRentChannelCommand* request, ::lssdrpc::GetFeeToRentChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lssdrpc

