// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chain.proto

#include "Chain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnextPayment_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EthOnChainTransaction_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningInvoice_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningPayment_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OnChainTransaction_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TxOutpoint_Chain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TxOutput_Chain_2eproto;
namespace chain {
class TxOutpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxOutpoint> _instance;
} _TxOutpoint_default_instance_;
class TxOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxOutput> _instance;
} _TxOutput_default_instance_;
class OnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnChainTransaction_MemoEntry_DoNotUse> _instance;
} _OnChainTransaction_MemoEntry_DoNotUse_default_instance_;
class OnChainTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnChainTransaction> _instance;
} _OnChainTransaction_default_instance_;
class EthOnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthOnChainTransaction_MemoEntry_DoNotUse> _instance;
} _EthOnChainTransaction_MemoEntry_DoNotUse_default_instance_;
class EthOnChainTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthOnChainTransaction> _instance;
} _EthOnChainTransaction_default_instance_;
class LightningPayment_MemoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningPayment_MemoEntry_DoNotUse> _instance;
} _LightningPayment_MemoEntry_DoNotUse_default_instance_;
class LightningPaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningPayment> _instance;
} _LightningPayment_default_instance_;
class LightningInvoice_MemoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningInvoice_MemoEntry_DoNotUse> _instance;
} _LightningInvoice_MemoEntry_DoNotUse_default_instance_;
class LightningInvoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningInvoice> _instance;
} _LightningInvoice_default_instance_;
class ConnextPayment_MemoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextPayment_MemoEntry_DoNotUse> _instance;
} _ConnextPayment_MemoEntry_DoNotUse_default_instance_;
class ConnextPaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextPayment> _instance;
} _ConnextPayment_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
  const ::chain::OnChainTransaction* onchain_tx_;
  const ::chain::LightningPayment* lightning_payment_;
  const ::chain::LightningInvoice* lightning_invoice_;
  const ::chain::EthOnChainTransaction* ethonchain_tx_;
  const ::chain::ConnextPayment* connext_payment_;
} _Transaction_default_instance_;
class EthAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthAccount> _instance;
} _EthAccount_default_instance_;
class EthTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthToken> _instance;
} _EthToken_default_instance_;
}  // namespace chain
static void InitDefaultsscc_info_ConnextPayment_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_ConnextPayment_default_instance_;
    new (ptr) ::chain::ConnextPayment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::ConnextPayment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnextPayment_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnextPayment_Chain_2eproto}, {
      &scc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto.base,}};

static void InitDefaultsscc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_ConnextPayment_MemoEntry_DoNotUse_default_instance_;
    new (ptr) ::chain::ConnextPayment_MemoEntry_DoNotUse();
  }
  ::chain::ConnextPayment_MemoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto}, {}};

static void InitDefaultsscc_info_EthAccount_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_EthAccount_default_instance_;
    new (ptr) ::chain::EthAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::EthAccount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthAccount_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthAccount_Chain_2eproto}, {}};

static void InitDefaultsscc_info_EthOnChainTransaction_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_EthOnChainTransaction_default_instance_;
    new (ptr) ::chain::EthOnChainTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::EthOnChainTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EthOnChainTransaction_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EthOnChainTransaction_Chain_2eproto}, {
      &scc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto.base,}};

static void InitDefaultsscc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_EthOnChainTransaction_MemoEntry_DoNotUse_default_instance_;
    new (ptr) ::chain::EthOnChainTransaction_MemoEntry_DoNotUse();
  }
  ::chain::EthOnChainTransaction_MemoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto}, {}};

static void InitDefaultsscc_info_EthToken_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_EthToken_default_instance_;
    new (ptr) ::chain::EthToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::EthToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthToken_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthToken_Chain_2eproto}, {}};

static void InitDefaultsscc_info_LightningInvoice_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_LightningInvoice_default_instance_;
    new (ptr) ::chain::LightningInvoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::LightningInvoice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningInvoice_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LightningInvoice_Chain_2eproto}, {
      &scc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto.base,}};

static void InitDefaultsscc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_LightningInvoice_MemoEntry_DoNotUse_default_instance_;
    new (ptr) ::chain::LightningInvoice_MemoEntry_DoNotUse();
  }
  ::chain::LightningInvoice_MemoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto}, {}};

static void InitDefaultsscc_info_LightningPayment_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_LightningPayment_default_instance_;
    new (ptr) ::chain::LightningPayment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::LightningPayment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningPayment_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LightningPayment_Chain_2eproto}, {
      &scc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto.base,}};

static void InitDefaultsscc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_LightningPayment_MemoEntry_DoNotUse_default_instance_;
    new (ptr) ::chain::LightningPayment_MemoEntry_DoNotUse();
  }
  ::chain::LightningPayment_MemoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto}, {}};

static void InitDefaultsscc_info_OnChainTransaction_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_OnChainTransaction_default_instance_;
    new (ptr) ::chain::OnChainTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::OnChainTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OnChainTransaction_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OnChainTransaction_Chain_2eproto}, {
      &scc_info_TxOutpoint_Chain_2eproto.base,
      &scc_info_TxOutput_Chain_2eproto.base,
      &scc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto.base,}};

static void InitDefaultsscc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_OnChainTransaction_MemoEntry_DoNotUse_default_instance_;
    new (ptr) ::chain::OnChainTransaction_MemoEntry_DoNotUse();
  }
  ::chain::OnChainTransaction_MemoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_Transaction_default_instance_;
    new (ptr) ::chain::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Transaction_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Transaction_Chain_2eproto}, {
      &scc_info_OnChainTransaction_Chain_2eproto.base,
      &scc_info_LightningPayment_Chain_2eproto.base,
      &scc_info_LightningInvoice_Chain_2eproto.base,
      &scc_info_EthOnChainTransaction_Chain_2eproto.base,
      &scc_info_ConnextPayment_Chain_2eproto.base,}};

static void InitDefaultsscc_info_TxOutpoint_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_TxOutpoint_default_instance_;
    new (ptr) ::chain::TxOutpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::TxOutpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TxOutpoint_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TxOutpoint_Chain_2eproto}, {}};

static void InitDefaultsscc_info_TxOutput_Chain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chain::_TxOutput_default_instance_;
    new (ptr) ::chain::TxOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chain::TxOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TxOutput_Chain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TxOutput_Chain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Chain_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Chain_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Chain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Chain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::TxOutpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::TxOutpoint, hash_),
  PROTOBUF_FIELD_OFFSET(::chain::TxOutpoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::TxOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::TxOutput, address_),
  PROTOBUF_FIELD_OFFSET(::chain::TxOutput, index_),
  PROTOBUF_FIELD_OFFSET(::chain::TxOutput, value_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction_MemoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction_MemoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction_MemoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction_MemoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, id_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, block_hash_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, block_height_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, index_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, flags_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, inputs_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, outputs_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, fee_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, type_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, memo_),
  PROTOBUF_FIELD_OFFSET(::chain::OnChainTransaction, hexrawtransaction_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction_MemoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction_MemoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction_MemoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction_MemoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, id_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, block_hash_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, block_height_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, from_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, to_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, gasused_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, gasprice_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, value_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, input_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, nonce_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, memo_),
  PROTOBUF_FIELD_OFFSET(::chain::EthOnChainTransaction, type_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment_MemoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment_MemoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment_MemoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment_MemoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, value_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, fee_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, status_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, payment_index_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, failure_reason_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, type_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningPayment, memo_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice_MemoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice_MemoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice_MemoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice_MemoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, memo_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, r_hash_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, value_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, settle_timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, expiry_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, add_index_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, settle_index_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, amt_paid_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, state_),
  PROTOBUF_FIELD_OFFSET(::chain::LightningInvoice, type_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment_MemoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment_MemoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment_MemoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment_MemoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, transferid_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, channeladdress_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, value_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, fee_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, timestamp_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, type_),
  PROTOBUF_FIELD_OFFSET(::chain::ConnextPayment, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::chain::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::Transaction, asset_id_),
  offsetof(::chain::TransactionDefaultTypeInternal, onchain_tx_),
  offsetof(::chain::TransactionDefaultTypeInternal, lightning_payment_),
  offsetof(::chain::TransactionDefaultTypeInternal, lightning_invoice_),
  offsetof(::chain::TransactionDefaultTypeInternal, ethonchain_tx_),
  offsetof(::chain::TransactionDefaultTypeInternal, connext_payment_),
  PROTOBUF_FIELD_OFFSET(::chain::Transaction, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::EthAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::EthAccount, address_),
  PROTOBUF_FIELD_OFFSET(::chain::EthAccount, nonce_),
  PROTOBUF_FIELD_OFFSET(::chain::EthAccount, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chain::EthToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chain::EthToken, token_address_),
  PROTOBUF_FIELD_OFFSET(::chain::EthToken, balance_),
  PROTOBUF_FIELD_OFFSET(::chain::EthToken, update_height_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chain::TxOutpoint)},
  { 7, -1, sizeof(::chain::TxOutput)},
  { 15, 22, sizeof(::chain::OnChainTransaction_MemoEntry_DoNotUse)},
  { 24, -1, sizeof(::chain::OnChainTransaction)},
  { 41, 48, sizeof(::chain::EthOnChainTransaction_MemoEntry_DoNotUse)},
  { 50, -1, sizeof(::chain::EthOnChainTransaction)},
  { 68, 75, sizeof(::chain::LightningPayment_MemoEntry_DoNotUse)},
  { 77, -1, sizeof(::chain::LightningPayment)},
  { 91, 98, sizeof(::chain::LightningInvoice_MemoEntry_DoNotUse)},
  { 100, -1, sizeof(::chain::LightningInvoice)},
  { 116, 123, sizeof(::chain::ConnextPayment_MemoEntry_DoNotUse)},
  { 125, -1, sizeof(::chain::ConnextPayment)},
  { 137, -1, sizeof(::chain::Transaction)},
  { 149, -1, sizeof(::chain::EthAccount)},
  { 157, -1, sizeof(::chain::EthToken)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_TxOutpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_TxOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_OnChainTransaction_MemoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_OnChainTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_EthOnChainTransaction_MemoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_EthOnChainTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_LightningPayment_MemoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_LightningPayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_LightningInvoice_MemoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_LightningInvoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_ConnextPayment_MemoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_ConnextPayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_EthAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chain::_EthToken_default_instance_),
};

const char descriptor_table_protodef_Chain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Chain.proto\022\005chain\032\016LndTypes.proto\")\n\n"
  "TxOutpoint\022\014\n\004hash\030\001 \001(\t\022\r\n\005index\030\002 \001(\r\""
  "9\n\010TxOutput\022\017\n\007address\030\001 \001(\t\022\r\n\005index\030\002 "
  "\001(\r\022\r\n\005value\030\003 \001(\003\"\311\003\n\022OnChainTransactio"
  "n\022\n\n\002id\030\001 \001(\t\022\022\n\nblock_hash\030\002 \001(\t\022\024\n\014blo"
  "ck_height\030\003 \001(\003\022\r\n\005index\030\004 \001(\r\022\021\n\ttimest"
  "amp\030\005 \001(\003\022\r\n\005flags\030\006 \001(\r\022!\n\006inputs\030\007 \003(\013"
  "2\021.chain.TxOutpoint\022 \n\007outputs\030\010 \003(\0132\017.c"
  "hain.TxOutput\022\013\n\003fee\030\t \001(\003\022.\n\004type\030\n \001(\016"
  "2 .chain.OnChainTransaction.TxType\0221\n\004me"
  "mo\030\013 \003(\0132#.chain.OnChainTransaction.Memo"
  "Entry\022\031\n\021hexRawTransaction\030\014 \001(\t\032+\n\tMemo"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"O\n"
  "\006TxType\022\023\n\017UNKNOWN_TX_TYPE\020\000\022\013\n\007PAYMENT\020"
  "\001\022\020\n\014OPEN_CHANNEL\020\002\022\021\n\rCLOSE_CHANNEL\020\003\"\310"
  "\003\n\025EthOnChainTransaction\022\n\n\002id\030\001 \001(\t\022\022\n\n"
  "block_hash\030\002 \001(\014\022\024\n\014block_height\030\003 \001(\003\022\014"
  "\n\004from\030\004 \001(\014\022\n\n\002to\030\005 \001(\014\022\021\n\ttimestamp\030\006 "
  "\001(\003\022\017\n\007gasused\030\007 \001(\014\022\020\n\010gasprice\030\010 \001(\014\022\r"
  "\n\005value\030\t \001(\014\022\r\n\005input\030\n \001(\014\022\r\n\005nonce\030\013 "
  "\001(\003\0224\n\004memo\030\014 \003(\0132&.chain.EthOnChainTran"
  "saction.MemoEntry\0224\n\004type\030\r \001(\0162&.chain."
  "EthOnChainTransaction.EthTxType\032+\n\tMemoE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"c\n\t"
  "EthTxType\022\020\n\014SEND_TX_TYPE\020\000\022\020\n\014RECV_TX_T"
  "YPE\020\001\022\035\n\031PAYMENT_TO_MYSELF_TX_TYPE\020\002\022\023\n\017"
  "DEPOSIT_CHANNEL\020\003\"\260\003\n\020LightningPayment\022\024"
  "\n\014payment_hash\030\001 \001(\t\022\r\n\005value\030\002 \001(\003\022\013\n\003f"
  "ee\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\0225\n\006status\030\005 "
  "\001(\0162%.chain.LightningPayment.PaymentStat"
  "us\022\025\n\rpayment_index\030\006 \001(\004\0223\n\016failure_rea"
  "son\030\007 \001(\0162\033.chain.PaymentFailureReason\022."
  "\n\004type\030\010 \001(\0162 .lndtypes.LightningPayment"
  "Reason\022/\n\004memo\030\t \003(\0132!.chain.LightningPa"
  "yment.MemoEntry\032+\n\tMemoEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\"F\n\rPaymentStatus\022\013\n"
  "\007UNKNOWN\020\000\022\r\n\tIN_FLIGHT\020\001\022\r\n\tSUCCEEDED\020\002"
  "\022\n\n\006FAILED\020\003\"\267\003\n\020LightningInvoice\022/\n\004mem"
  "o\030\001 \003(\0132!.chain.LightningInvoice.MemoEnt"
  "ry\022\016\n\006r_hash\030\002 \001(\014\022\r\n\005value\030\003 \001(\003\022\032\n\022cre"
  "ation_timestamp\030\004 \001(\003\022\030\n\020settle_timestam"
  "p\030\005 \001(\003\022\016\n\006expiry\030\006 \001(\003\022\021\n\tadd_index\030\007 \001"
  "(\004\022\024\n\014settle_index\030\010 \001(\004\022\020\n\010amt_paid\030\t \001"
  "(\003\0223\n\005state\030\n \001(\0162$.chain.LightningInvoi"
  "ce.InvoiceState\022-\n\004type\030\013 \001(\0162\037.lndtypes"
  ".LightingInvoiceReason\032+\n\tMemoEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"A\n\014InvoiceSt"
  "ate\022\010\n\004OPEN\020\000\022\013\n\007SETTLED\020\001\022\014\n\010CANCELED\020\002"
  "\022\014\n\010ACCEPTED\020\003\"\254\002\n\016ConnextPayment\022\022\n\ntra"
  "nsferId\030\001 \001(\t\022\026\n\016channelAddress\030\002 \001(\t\022\r\n"
  "\005value\030\003 \001(\014\022\013\n\003fee\030\004 \001(\014\022\021\n\ttimestamp\030\005"
  " \001(\003\0226\n\004type\030\006 \001(\0162(.chain.ConnextPaymen"
  "t.ConnextPaymentType\022-\n\004memo\030\007 \003(\0132\037.cha"
  "in.ConnextPayment.MemoEntry\032+\n\tMemoEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"+\n\022Conn"
  "extPaymentType\022\010\n\004SEND\020\000\022\013\n\007RECEIVE\020\001\"\264\002"
  "\n\013Transaction\022\020\n\010asset_id\030\001 \001(\r\022/\n\noncha"
  "in_tx\030\002 \001(\0132\031.chain.OnChainTransactionH\000"
  "\0224\n\021lightning_payment\030\003 \001(\0132\027.chain.Ligh"
  "tningPaymentH\000\0224\n\021lightning_invoice\030\004 \001("
  "\0132\027.chain.LightningInvoiceH\000\0225\n\rethoncha"
  "in_tx\030\005 \001(\0132\034.chain.EthOnChainTransactio"
  "nH\000\0220\n\017connext_payment\030\006 \001(\0132\025.chain.Con"
  "nextPaymentH\000B\r\n\013transaction\"=\n\nEthAccou"
  "nt\022\017\n\007address\030\001 \001(\t\022\r\n\005nonce\030\002 \001(\014\022\017\n\007ba"
  "lance\030\003 \001(\014\"I\n\010EthToken\022\025\n\rtoken_address"
  "\030\001 \001(\t\022\017\n\007balance\030\002 \001(\014\022\025\n\rupdate_height"
  "\030\003 \001(\003*\331\001\n\024PaymentFailureReason\022\027\n\023FAILU"
  "RE_REASON_NONE\020\000\022\032\n\026FAILURE_REASON_TIMEO"
  "UT\020\001\022\033\n\027FAILURE_REASON_NO_ROUTE\020\002\022\030\n\024FAI"
  "LURE_REASON_ERROR\020\003\022,\n(FAILURE_REASON_IN"
  "CORRECT_PAYMENT_DETAILS\020\004\022\'\n#FAILURE_REA"
  "SON_INSUFFICIENT_BALANCE\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Chain_2eproto_deps[1] = {
  &::descriptor_table_LndTypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Chain_2eproto_sccs[15] = {
  &scc_info_ConnextPayment_Chain_2eproto.base,
  &scc_info_ConnextPayment_MemoEntry_DoNotUse_Chain_2eproto.base,
  &scc_info_EthAccount_Chain_2eproto.base,
  &scc_info_EthOnChainTransaction_Chain_2eproto.base,
  &scc_info_EthOnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto.base,
  &scc_info_EthToken_Chain_2eproto.base,
  &scc_info_LightningInvoice_Chain_2eproto.base,
  &scc_info_LightningInvoice_MemoEntry_DoNotUse_Chain_2eproto.base,
  &scc_info_LightningPayment_Chain_2eproto.base,
  &scc_info_LightningPayment_MemoEntry_DoNotUse_Chain_2eproto.base,
  &scc_info_OnChainTransaction_Chain_2eproto.base,
  &scc_info_OnChainTransaction_MemoEntry_DoNotUse_Chain_2eproto.base,
  &scc_info_Transaction_Chain_2eproto.base,
  &scc_info_TxOutpoint_Chain_2eproto.base,
  &scc_info_TxOutput_Chain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Chain_2eproto_once;
static bool descriptor_table_Chain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chain_2eproto = {
  &descriptor_table_Chain_2eproto_initialized, descriptor_table_protodef_Chain_2eproto, "Chain.proto", 2914,
  &descriptor_table_Chain_2eproto_once, descriptor_table_Chain_2eproto_sccs, descriptor_table_Chain_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_Chain_2eproto::offsets,
  file_level_metadata_Chain_2eproto, 15, file_level_enum_descriptors_Chain_2eproto, file_level_service_descriptors_Chain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Chain_2eproto), true);
namespace chain {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OnChainTransaction_TxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[0];
}
bool OnChainTransaction_TxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OnChainTransaction_TxType OnChainTransaction::UNKNOWN_TX_TYPE;
constexpr OnChainTransaction_TxType OnChainTransaction::PAYMENT;
constexpr OnChainTransaction_TxType OnChainTransaction::OPEN_CHANNEL;
constexpr OnChainTransaction_TxType OnChainTransaction::CLOSE_CHANNEL;
constexpr OnChainTransaction_TxType OnChainTransaction::TxType_MIN;
constexpr OnChainTransaction_TxType OnChainTransaction::TxType_MAX;
constexpr int OnChainTransaction::TxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EthOnChainTransaction_EthTxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[1];
}
bool EthOnChainTransaction_EthTxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::SEND_TX_TYPE;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::RECV_TX_TYPE;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::PAYMENT_TO_MYSELF_TX_TYPE;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::DEPOSIT_CHANNEL;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::EthTxType_MIN;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction::EthTxType_MAX;
constexpr int EthOnChainTransaction::EthTxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightningPayment_PaymentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[2];
}
bool LightningPayment_PaymentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LightningPayment_PaymentStatus LightningPayment::UNKNOWN;
constexpr LightningPayment_PaymentStatus LightningPayment::IN_FLIGHT;
constexpr LightningPayment_PaymentStatus LightningPayment::SUCCEEDED;
constexpr LightningPayment_PaymentStatus LightningPayment::FAILED;
constexpr LightningPayment_PaymentStatus LightningPayment::PaymentStatus_MIN;
constexpr LightningPayment_PaymentStatus LightningPayment::PaymentStatus_MAX;
constexpr int LightningPayment::PaymentStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightningInvoice_InvoiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[3];
}
bool LightningInvoice_InvoiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LightningInvoice_InvoiceState LightningInvoice::OPEN;
constexpr LightningInvoice_InvoiceState LightningInvoice::SETTLED;
constexpr LightningInvoice_InvoiceState LightningInvoice::CANCELED;
constexpr LightningInvoice_InvoiceState LightningInvoice::ACCEPTED;
constexpr LightningInvoice_InvoiceState LightningInvoice::InvoiceState_MIN;
constexpr LightningInvoice_InvoiceState LightningInvoice::InvoiceState_MAX;
constexpr int LightningInvoice::InvoiceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnextPayment_ConnextPaymentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[4];
}
bool ConnextPayment_ConnextPaymentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConnextPayment_ConnextPaymentType ConnextPayment::SEND;
constexpr ConnextPayment_ConnextPaymentType ConnextPayment::RECEIVE;
constexpr ConnextPayment_ConnextPaymentType ConnextPayment::ConnextPaymentType_MIN;
constexpr ConnextPayment_ConnextPaymentType ConnextPayment::ConnextPaymentType_MAX;
constexpr int ConnextPayment::ConnextPaymentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentFailureReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Chain_2eproto);
  return file_level_enum_descriptors_Chain_2eproto[5];
}
bool PaymentFailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TxOutpoint::InitAsDefaultInstance() {
}
class TxOutpoint::_Internal {
 public:
};

TxOutpoint::TxOutpoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.TxOutpoint)
}
TxOutpoint::TxOutpoint(const TxOutpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:chain.TxOutpoint)
}

void TxOutpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxOutpoint_Chain_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

TxOutpoint::~TxOutpoint() {
  // @@protoc_insertion_point(destructor:chain.TxOutpoint)
  SharedDtor();
}

void TxOutpoint::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxOutpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxOutpoint& TxOutpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxOutpoint_Chain_2eproto.base);
  return *internal_default_instance();
}


void TxOutpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.TxOutpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  _internal_metadata_.Clear();
}

const char* TxOutpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.TxOutpoint.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxOutpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.TxOutpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.TxOutpoint.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.TxOutpoint)
  return target;
}

size_t TxOutpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.TxOutpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxOutpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.TxOutpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TxOutpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxOutpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.TxOutpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.TxOutpoint)
    MergeFrom(*source);
  }
}

void TxOutpoint::MergeFrom(const TxOutpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.TxOutpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void TxOutpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.TxOutpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxOutpoint::CopyFrom(const TxOutpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.TxOutpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutpoint::IsInitialized() const {
  return true;
}

void TxOutpoint::InternalSwap(TxOutpoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxOutpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxOutput::InitAsDefaultInstance() {
}
class TxOutput::_Internal {
 public:
};

TxOutput::TxOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.TxOutput)
}
TxOutput::TxOutput(const TxOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:chain.TxOutput)
}

void TxOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxOutput_Chain_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
}

TxOutput::~TxOutput() {
  // @@protoc_insertion_point(destructor:chain.TxOutput)
  SharedDtor();
}

void TxOutput::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxOutput& TxOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxOutput_Chain_2eproto.base);
  return *internal_default_instance();
}


void TxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.TxOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* TxOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.TxOutput.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.TxOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.TxOutput.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.TxOutput)
  return target;
}

size_t TxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.TxOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.TxOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TxOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.TxOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.TxOutput)
    MergeFrom(*source);
  }
}

void TxOutput::MergeFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.TxOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void TxOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.TxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxOutput::CopyFrom(const TxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.TxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutput::IsInitialized() const {
  return true;
}

void TxOutput::InternalSwap(TxOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OnChainTransaction_MemoEntry_DoNotUse::OnChainTransaction_MemoEntry_DoNotUse() {}
OnChainTransaction_MemoEntry_DoNotUse::OnChainTransaction_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OnChainTransaction_MemoEntry_DoNotUse::MergeFrom(const OnChainTransaction_MemoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OnChainTransaction_MemoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OnChainTransaction_MemoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OnChainTransaction::InitAsDefaultInstance() {
}
class OnChainTransaction::_Internal {
 public:
};

OnChainTransaction::OnChainTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.OnChainTransaction)
}
OnChainTransaction::OnChainTransaction(const OnChainTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.MergeFrom(from.memo_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  hexrawtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hexrawtransaction().empty()) {
    hexrawtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hexrawtransaction_);
  }
  ::memcpy(&block_height_, &from.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chain.OnChainTransaction)
}

void OnChainTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnChainTransaction_Chain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hexrawtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
}

OnChainTransaction::~OnChainTransaction() {
  // @@protoc_insertion_point(destructor:chain.OnChainTransaction)
  SharedDtor();
}

void OnChainTransaction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hexrawtransaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnChainTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnChainTransaction& OnChainTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnChainTransaction_Chain_2eproto.base);
  return *internal_default_instance();
}


void OnChainTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.OnChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  memo_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hexrawtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* OnChainTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.OnChainTransaction.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.OnChainTransaction.block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .chain.TxOutpoint inputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .chain.TxOutput outputs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 fee = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.OnChainTransaction.TxType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::chain::OnChainTransaction_TxType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> memo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&memo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string hexRawTransaction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_hexrawtransaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.OnChainTransaction.hexRawTransaction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnChainTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.OnChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.OnChainTransaction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string block_hash = 2;
  if (this->block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_hash().data(), static_cast<int>(this->_internal_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.OnChainTransaction.block_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  // int64 block_height = 3;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_block_height(), target);
  }

  // uint32 index = 4;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint32 flags = 6;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  // repeated .chain.TxOutpoint inputs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_inputs(i), target, stream);
  }

  // repeated .chain.TxOutput outputs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_outputs(i), target, stream);
  }

  // int64 fee = 9;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_fee(), target);
  }

  // .chain.OnChainTransaction.TxType type = 10;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // map<string, string> memo = 11;
  if (!this->_internal_memo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.OnChainTransaction.MemoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.OnChainTransaction.MemoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_memo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_memo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OnChainTransaction_MemoEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it) {
        target = OnChainTransaction_MemoEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string hexRawTransaction = 12;
  if (this->hexrawtransaction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hexrawtransaction().data(), static_cast<int>(this->_internal_hexrawtransaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.OnChainTransaction.hexRawTransaction");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hexrawtransaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.OnChainTransaction)
  return target;
}

size_t OnChainTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.OnChainTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chain.TxOutpoint inputs = 7;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .chain.TxOutput outputs = 8;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> memo = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_memo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_memo().begin();
      it != this->_internal_memo().end(); ++it) {
    total_size += OnChainTransaction_MemoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string block_hash = 2;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_hash());
  }

  // string hexRawTransaction = 12;
  if (this->hexrawtransaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hexrawtransaction());
  }

  // int64 block_height = 3;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_height());
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint32 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 flags = 6;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // int64 fee = 9;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // .chain.OnChainTransaction.TxType type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnChainTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.OnChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const OnChainTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnChainTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.OnChainTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.OnChainTransaction)
    MergeFrom(*source);
  }
}

void OnChainTransaction::MergeFrom(const OnChainTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.OnChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  memo_.MergeFrom(from.memo_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.block_hash().size() > 0) {

    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  if (from.hexrawtransaction().size() > 0) {

    hexrawtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hexrawtransaction_);
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void OnChainTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.OnChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnChainTransaction::CopyFrom(const OnChainTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.OnChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnChainTransaction::IsInitialized() const {
  return true;
}

void OnChainTransaction::InternalSwap(OnChainTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  memo_.Swap(&other->memo_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hexrawtransaction_.Swap(&other->hexrawtransaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_height_, other->block_height_);
  swap(timestamp_, other->timestamp_);
  swap(index_, other->index_);
  swap(flags_, other->flags_);
  swap(fee_, other->fee_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnChainTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EthOnChainTransaction_MemoEntry_DoNotUse::EthOnChainTransaction_MemoEntry_DoNotUse() {}
EthOnChainTransaction_MemoEntry_DoNotUse::EthOnChainTransaction_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EthOnChainTransaction_MemoEntry_DoNotUse::MergeFrom(const EthOnChainTransaction_MemoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EthOnChainTransaction_MemoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EthOnChainTransaction_MemoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EthOnChainTransaction::InitAsDefaultInstance() {
}
class EthOnChainTransaction::_Internal {
 public:
};

EthOnChainTransaction::EthOnChainTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.EthOnChainTransaction)
}
EthOnChainTransaction::EthOnChainTransaction(const EthOnChainTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.MergeFrom(from.memo_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  gasused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasused().empty()) {
    gasused_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasused_);
  }
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasprice().empty()) {
    gasprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasprice_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input().empty()) {
    input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_);
  }
  ::memcpy(&block_height_, &from.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chain.EthOnChainTransaction)
}

void EthOnChainTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthOnChainTransaction_Chain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
}

EthOnChainTransaction::~EthOnChainTransaction() {
  // @@protoc_insertion_point(destructor:chain.EthOnChainTransaction)
  SharedDtor();
}

void EthOnChainTransaction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthOnChainTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthOnChainTransaction& EthOnChainTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthOnChainTransaction_Chain_2eproto.base);
  return *internal_default_instance();
}


void EthOnChainTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.EthOnChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* EthOnChainTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.EthOnChainTransaction.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 block_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gasused = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_gasused();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gasprice = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_gasprice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> memo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&memo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .chain.EthOnChainTransaction.EthTxType type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::chain::EthOnChainTransaction_EthTxType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthOnChainTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.EthOnChainTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.EthOnChainTransaction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  // int64 block_height = 3;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_block_height(), target);
  }

  // bytes from = 4;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_from(), target);
  }

  // bytes to = 5;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_to(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // bytes gasused = 7;
  if (this->gasused().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_gasused(), target);
  }

  // bytes gasprice = 8;
  if (this->gasprice().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_gasprice(), target);
  }

  // bytes value = 9;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_value(), target);
  }

  // bytes input = 10;
  if (this->input().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_input(), target);
  }

  // int64 nonce = 11;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_nonce(), target);
  }

  // map<string, string> memo = 12;
  if (!this->_internal_memo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.EthOnChainTransaction.MemoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.EthOnChainTransaction.MemoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_memo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_memo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EthOnChainTransaction_MemoEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it) {
        target = EthOnChainTransaction_MemoEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .chain.EthOnChainTransaction.EthTxType type = 13;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.EthOnChainTransaction)
  return target;
}

size_t EthOnChainTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.EthOnChainTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> memo = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_memo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_memo().begin();
      it != this->_internal_memo().end(); ++it) {
    total_size += EthOnChainTransaction_MemoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes block_hash = 2;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes from = 4;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 5;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes gasused = 7;
  if (this->gasused().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gasused());
  }

  // bytes gasprice = 8;
  if (this->gasprice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gasprice());
  }

  // bytes value = 9;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes input = 10;
  if (this->input().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input());
  }

  // int64 block_height = 3;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_height());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 nonce = 11;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nonce());
  }

  // .chain.EthOnChainTransaction.EthTxType type = 13;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthOnChainTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.EthOnChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const EthOnChainTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthOnChainTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.EthOnChainTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.EthOnChainTransaction)
    MergeFrom(*source);
  }
}

void EthOnChainTransaction::MergeFrom(const EthOnChainTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.EthOnChainTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memo_.MergeFrom(from.memo_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.block_hash().size() > 0) {

    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.gasused().size() > 0) {

    gasused_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasused_);
  }
  if (from.gasprice().size() > 0) {

    gasprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasprice_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.input().size() > 0) {

    input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_);
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EthOnChainTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.EthOnChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthOnChainTransaction::CopyFrom(const EthOnChainTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.EthOnChainTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthOnChainTransaction::IsInitialized() const {
  return true;
}

void EthOnChainTransaction::InternalSwap(EthOnChainTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memo_.Swap(&other->memo_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gasused_.Swap(&other->gasused_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gasprice_.Swap(&other->gasprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_.Swap(&other->input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_height_, other->block_height_);
  swap(timestamp_, other->timestamp_);
  swap(nonce_, other->nonce_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthOnChainTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LightningPayment_MemoEntry_DoNotUse::LightningPayment_MemoEntry_DoNotUse() {}
LightningPayment_MemoEntry_DoNotUse::LightningPayment_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LightningPayment_MemoEntry_DoNotUse::MergeFrom(const LightningPayment_MemoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LightningPayment_MemoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LightningPayment_MemoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LightningPayment::InitAsDefaultInstance() {
}
class LightningPayment::_Internal {
 public:
};

LightningPayment::LightningPayment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.LightningPayment)
}
LightningPayment::LightningPayment(const LightningPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.MergeFrom(from.memo_);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chain.LightningPayment)
}

void LightningPayment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightningPayment_Chain_2eproto.base);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

LightningPayment::~LightningPayment() {
  // @@protoc_insertion_point(destructor:chain.LightningPayment)
  SharedDtor();
}

void LightningPayment::SharedDtor() {
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LightningPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightningPayment& LightningPayment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightningPayment_Chain_2eproto.base);
  return *internal_default_instance();
}


void LightningPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.LightningPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.Clear();
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* LightningPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string payment_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.LightningPayment.payment_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.LightningPayment.PaymentStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::chain::LightningPayment_PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 payment_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          payment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.PaymentFailureReason failure_reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_failure_reason(static_cast<::chain::PaymentFailureReason>(val));
        } else goto handle_unusual;
        continue;
      // .lndtypes.LightningPaymentReason type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lndtypes::LightningPaymentReason>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> memo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&memo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightningPayment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.LightningPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_hash().data(), static_cast<int>(this->_internal_payment_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.LightningPayment.payment_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payment_hash(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // .chain.LightningPayment.PaymentStatus status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // uint64 payment_index = 6;
  if (this->payment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_payment_index(), target);
  }

  // .chain.PaymentFailureReason failure_reason = 7;
  if (this->failure_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_failure_reason(), target);
  }

  // .lndtypes.LightningPaymentReason type = 8;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_type(), target);
  }

  // map<string, string> memo = 9;
  if (!this->_internal_memo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.LightningPayment.MemoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.LightningPayment.MemoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_memo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_memo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LightningPayment_MemoEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it) {
        target = LightningPayment_MemoEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.LightningPayment)
  return target;
}

size_t LightningPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.LightningPayment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> memo = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_memo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_memo().begin();
      it != this->_internal_memo().end(); ++it) {
    total_size += LightningPayment_MemoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_hash());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int64 fee = 3;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 payment_index = 6;
  if (this->payment_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_payment_index());
  }

  // .chain.LightningPayment.PaymentStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .chain.PaymentFailureReason failure_reason = 7;
  if (this->failure_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failure_reason());
  }

  // .lndtypes.LightningPaymentReason type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightningPayment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.LightningPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const LightningPayment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightningPayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.LightningPayment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.LightningPayment)
    MergeFrom(*source);
  }
}

void LightningPayment::MergeFrom(const LightningPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.LightningPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memo_.MergeFrom(from.memo_);
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.payment_index() != 0) {
    _internal_set_payment_index(from._internal_payment_index());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.failure_reason() != 0) {
    _internal_set_failure_reason(from._internal_failure_reason());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LightningPayment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.LightningPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightningPayment::CopyFrom(const LightningPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.LightningPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightningPayment::IsInitialized() const {
  return true;
}

void LightningPayment::InternalSwap(LightningPayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memo_.Swap(&other->memo_);
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(fee_, other->fee_);
  swap(timestamp_, other->timestamp_);
  swap(payment_index_, other->payment_index_);
  swap(status_, other->status_);
  swap(failure_reason_, other->failure_reason_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightningPayment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LightningInvoice_MemoEntry_DoNotUse::LightningInvoice_MemoEntry_DoNotUse() {}
LightningInvoice_MemoEntry_DoNotUse::LightningInvoice_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LightningInvoice_MemoEntry_DoNotUse::MergeFrom(const LightningInvoice_MemoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LightningInvoice_MemoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LightningInvoice_MemoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LightningInvoice::InitAsDefaultInstance() {
}
class LightningInvoice::_Internal {
 public:
};

LightningInvoice::LightningInvoice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.LightningInvoice)
}
LightningInvoice::LightningInvoice(const LightningInvoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.MergeFrom(from.memo_);
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_hash().empty()) {
    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chain.LightningInvoice)
}

void LightningInvoice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightningInvoice_Chain_2eproto.base);
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

LightningInvoice::~LightningInvoice() {
  // @@protoc_insertion_point(destructor:chain.LightningInvoice)
  SharedDtor();
}

void LightningInvoice::SharedDtor() {
  r_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LightningInvoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightningInvoice& LightningInvoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightningInvoice_Chain_2eproto.base);
  return *internal_default_instance();
}


void LightningInvoice::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.LightningInvoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.Clear();
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* LightningInvoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> memo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&memo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes r_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_r_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creation_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          creation_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 settle_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          settle_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 add_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          add_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 settle_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          settle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_paid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          amt_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.LightningInvoice.InvoiceState state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::chain::LightningInvoice_InvoiceState>(val));
        } else goto handle_unusual;
        continue;
      // .lndtypes.LightingInvoiceReason type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lndtypes::LightingInvoiceReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightningInvoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.LightningInvoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> memo = 1;
  if (!this->_internal_memo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.LightningInvoice.MemoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.LightningInvoice.MemoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_memo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_memo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LightningInvoice_MemoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it) {
        target = LightningInvoice_MemoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes r_hash = 2;
  if (this->r_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_r_hash(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // int64 creation_timestamp = 4;
  if (this->creation_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_creation_timestamp(), target);
  }

  // int64 settle_timestamp = 5;
  if (this->settle_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_settle_timestamp(), target);
  }

  // int64 expiry = 6;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_expiry(), target);
  }

  // uint64 add_index = 7;
  if (this->add_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_add_index(), target);
  }

  // uint64 settle_index = 8;
  if (this->settle_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_settle_index(), target);
  }

  // int64 amt_paid = 9;
  if (this->amt_paid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_amt_paid(), target);
  }

  // .chain.LightningInvoice.InvoiceState state = 10;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_state(), target);
  }

  // .lndtypes.LightingInvoiceReason type = 11;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.LightningInvoice)
  return target;
}

size_t LightningInvoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.LightningInvoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> memo = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_memo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_memo().begin();
      it != this->_internal_memo().end(); ++it) {
    total_size += LightningInvoice_MemoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes r_hash = 2;
  if (this->r_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r_hash());
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int64 creation_timestamp = 4;
  if (this->creation_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_timestamp());
  }

  // int64 settle_timestamp = 5;
  if (this->settle_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_settle_timestamp());
  }

  // int64 expiry = 6;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  // uint64 add_index = 7;
  if (this->add_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_add_index());
  }

  // uint64 settle_index = 8;
  if (this->settle_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_settle_index());
  }

  // int64 amt_paid = 9;
  if (this->amt_paid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_paid());
  }

  // .chain.LightningInvoice.InvoiceState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .lndtypes.LightingInvoiceReason type = 11;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightningInvoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.LightningInvoice)
  GOOGLE_DCHECK_NE(&from, this);
  const LightningInvoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightningInvoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.LightningInvoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.LightningInvoice)
    MergeFrom(*source);
  }
}

void LightningInvoice::MergeFrom(const LightningInvoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.LightningInvoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memo_.MergeFrom(from.memo_);
  if (from.r_hash().size() > 0) {

    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.creation_timestamp() != 0) {
    _internal_set_creation_timestamp(from._internal_creation_timestamp());
  }
  if (from.settle_timestamp() != 0) {
    _internal_set_settle_timestamp(from._internal_settle_timestamp());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.add_index() != 0) {
    _internal_set_add_index(from._internal_add_index());
  }
  if (from.settle_index() != 0) {
    _internal_set_settle_index(from._internal_settle_index());
  }
  if (from.amt_paid() != 0) {
    _internal_set_amt_paid(from._internal_amt_paid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LightningInvoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.LightningInvoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightningInvoice::CopyFrom(const LightningInvoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.LightningInvoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightningInvoice::IsInitialized() const {
  return true;
}

void LightningInvoice::InternalSwap(LightningInvoice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memo_.Swap(&other->memo_);
  r_hash_.Swap(&other->r_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(creation_timestamp_, other->creation_timestamp_);
  swap(settle_timestamp_, other->settle_timestamp_);
  swap(expiry_, other->expiry_);
  swap(add_index_, other->add_index_);
  swap(settle_index_, other->settle_index_);
  swap(amt_paid_, other->amt_paid_);
  swap(state_, other->state_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightningInvoice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ConnextPayment_MemoEntry_DoNotUse::ConnextPayment_MemoEntry_DoNotUse() {}
ConnextPayment_MemoEntry_DoNotUse::ConnextPayment_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConnextPayment_MemoEntry_DoNotUse::MergeFrom(const ConnextPayment_MemoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConnextPayment_MemoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ConnextPayment_MemoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ConnextPayment::InitAsDefaultInstance() {
}
class ConnextPayment::_Internal {
 public:
};

ConnextPayment::ConnextPayment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.ConnextPayment)
}
ConnextPayment::ConnextPayment(const ConnextPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.MergeFrom(from.memo_);
  transferid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transferid().empty()) {
    transferid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transferid_);
  }
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channeladdress().empty()) {
    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chain.ConnextPayment)
}

void ConnextPayment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnextPayment_Chain_2eproto.base);
  transferid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
}

ConnextPayment::~ConnextPayment() {
  // @@protoc_insertion_point(destructor:chain.ConnextPayment)
  SharedDtor();
}

void ConnextPayment::SharedDtor() {
  transferid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnextPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnextPayment& ConnextPayment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnextPayment_Chain_2eproto.base);
  return *internal_default_instance();
}


void ConnextPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.ConnextPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.Clear();
  transferid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* ConnextPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transferId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transferid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.ConnextPayment.transferId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channeladdress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.ConnextPayment.channelAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.ConnextPayment.ConnextPaymentType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::chain::ConnextPayment_ConnextPaymentType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> memo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&memo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnextPayment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.ConnextPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transferId = 1;
  if (this->transferid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transferid().data(), static_cast<int>(this->_internal_transferid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.ConnextPayment.transferId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transferid(), target);
  }

  // string channelAddress = 2;
  if (this->channeladdress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channeladdress().data(), static_cast<int>(this->_internal_channeladdress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.ConnextPayment.channelAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channeladdress(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes fee = 4;
  if (this->fee().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fee(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .chain.ConnextPayment.ConnextPaymentType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // map<string, string> memo = 7;
  if (!this->_internal_memo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.ConnextPayment.MemoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chain.ConnextPayment.MemoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_memo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_memo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConnextPayment_MemoEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_memo().begin();
          it != this->_internal_memo().end(); ++it) {
        target = ConnextPayment_MemoEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.ConnextPayment)
  return target;
}

size_t ConnextPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.ConnextPayment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> memo = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_memo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_memo().begin();
      it != this->_internal_memo().end(); ++it) {
    total_size += ConnextPayment_MemoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string transferId = 1;
  if (this->transferid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transferid());
  }

  // string channelAddress = 2;
  if (this->channeladdress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channeladdress());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes fee = 4;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fee());
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .chain.ConnextPayment.ConnextPaymentType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnextPayment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.ConnextPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnextPayment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnextPayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.ConnextPayment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.ConnextPayment)
    MergeFrom(*source);
  }
}

void ConnextPayment::MergeFrom(const ConnextPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.ConnextPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memo_.MergeFrom(from.memo_);
  if (from.transferid().size() > 0) {

    transferid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transferid_);
  }
  if (from.channeladdress().size() > 0) {

    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ConnextPayment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.ConnextPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnextPayment::CopyFrom(const ConnextPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.ConnextPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnextPayment::IsInitialized() const {
  return true;
}

void ConnextPayment::InternalSwap(ConnextPayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memo_.Swap(&other->memo_);
  transferid_.Swap(&other->transferid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channeladdress_.Swap(&other->channeladdress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnextPayment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::chain::_Transaction_default_instance_.onchain_tx_ = const_cast< ::chain::OnChainTransaction*>(
      ::chain::OnChainTransaction::internal_default_instance());
  ::chain::_Transaction_default_instance_.lightning_payment_ = const_cast< ::chain::LightningPayment*>(
      ::chain::LightningPayment::internal_default_instance());
  ::chain::_Transaction_default_instance_.lightning_invoice_ = const_cast< ::chain::LightningInvoice*>(
      ::chain::LightningInvoice::internal_default_instance());
  ::chain::_Transaction_default_instance_.ethonchain_tx_ = const_cast< ::chain::EthOnChainTransaction*>(
      ::chain::EthOnChainTransaction::internal_default_instance());
  ::chain::_Transaction_default_instance_.connext_payment_ = const_cast< ::chain::ConnextPayment*>(
      ::chain::ConnextPayment::internal_default_instance());
}
class Transaction::_Internal {
 public:
  static const ::chain::OnChainTransaction& onchain_tx(const Transaction* msg);
  static const ::chain::LightningPayment& lightning_payment(const Transaction* msg);
  static const ::chain::LightningInvoice& lightning_invoice(const Transaction* msg);
  static const ::chain::EthOnChainTransaction& ethonchain_tx(const Transaction* msg);
  static const ::chain::ConnextPayment& connext_payment(const Transaction* msg);
};

const ::chain::OnChainTransaction&
Transaction::_Internal::onchain_tx(const Transaction* msg) {
  return *msg->transaction_.onchain_tx_;
}
const ::chain::LightningPayment&
Transaction::_Internal::lightning_payment(const Transaction* msg) {
  return *msg->transaction_.lightning_payment_;
}
const ::chain::LightningInvoice&
Transaction::_Internal::lightning_invoice(const Transaction* msg) {
  return *msg->transaction_.lightning_invoice_;
}
const ::chain::EthOnChainTransaction&
Transaction::_Internal::ethonchain_tx(const Transaction* msg) {
  return *msg->transaction_.ethonchain_tx_;
}
const ::chain::ConnextPayment&
Transaction::_Internal::connext_payment(const Transaction* msg) {
  return *msg->transaction_.connext_payment_;
}
void Transaction::set_allocated_onchain_tx(::chain::OnChainTransaction* onchain_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (onchain_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      onchain_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onchain_tx, submessage_arena);
    }
    set_has_onchain_tx();
    transaction_.onchain_tx_ = onchain_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:chain.Transaction.onchain_tx)
}
void Transaction::set_allocated_lightning_payment(::chain::LightningPayment* lightning_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (lightning_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lightning_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightning_payment, submessage_arena);
    }
    set_has_lightning_payment();
    transaction_.lightning_payment_ = lightning_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:chain.Transaction.lightning_payment)
}
void Transaction::set_allocated_lightning_invoice(::chain::LightningInvoice* lightning_invoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (lightning_invoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lightning_invoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightning_invoice, submessage_arena);
    }
    set_has_lightning_invoice();
    transaction_.lightning_invoice_ = lightning_invoice;
  }
  // @@protoc_insertion_point(field_set_allocated:chain.Transaction.lightning_invoice)
}
void Transaction::set_allocated_ethonchain_tx(::chain::EthOnChainTransaction* ethonchain_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (ethonchain_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ethonchain_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethonchain_tx, submessage_arena);
    }
    set_has_ethonchain_tx();
    transaction_.ethonchain_tx_ = ethonchain_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:chain.Transaction.ethonchain_tx)
}
void Transaction::set_allocated_connext_payment(::chain::ConnextPayment* connext_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (connext_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connext_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connext_payment, submessage_arena);
    }
    set_has_connext_payment();
    transaction_.connext_payment_ = connext_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:chain.Transaction.connext_payment)
}
Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_id_ = from.asset_id_;
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kOnchainTx: {
      _internal_mutable_onchain_tx()->::chain::OnChainTransaction::MergeFrom(from._internal_onchain_tx());
      break;
    }
    case kLightningPayment: {
      _internal_mutable_lightning_payment()->::chain::LightningPayment::MergeFrom(from._internal_lightning_payment());
      break;
    }
    case kLightningInvoice: {
      _internal_mutable_lightning_invoice()->::chain::LightningInvoice::MergeFrom(from._internal_lightning_invoice());
      break;
    }
    case kEthonchainTx: {
      _internal_mutable_ethonchain_tx()->::chain::EthOnChainTransaction::MergeFrom(from._internal_ethonchain_tx());
      break;
    }
    case kConnextPayment: {
      _internal_mutable_connext_payment()->::chain::ConnextPayment::MergeFrom(from._internal_connext_payment());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chain.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Chain_2eproto.base);
  asset_id_ = 0u;
  clear_has_transaction();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:chain.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (has_transaction()) {
    clear_transaction();
  }
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Chain_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:chain.Transaction)
  switch (transaction_case()) {
    case kOnchainTx: {
      delete transaction_.onchain_tx_;
      break;
    }
    case kLightningPayment: {
      delete transaction_.lightning_payment_;
      break;
    }
    case kLightningInvoice: {
      delete transaction_.lightning_invoice_;
      break;
    }
    case kEthonchainTx: {
      delete transaction_.ethonchain_tx_;
      break;
    }
    case kConnextPayment: {
      delete transaction_.connext_payment_;
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_ = 0u;
  clear_transaction();
  _internal_metadata_.Clear();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.OnChainTransaction onchain_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onchain_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.LightningPayment lightning_payment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lightning_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.LightningInvoice lightning_invoice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lightning_invoice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.EthOnChainTransaction ethonchain_tx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethonchain_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chain.ConnextPayment connext_payment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_connext_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asset_id = 1;
  if (this->asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asset_id(), target);
  }

  // .chain.OnChainTransaction onchain_tx = 2;
  if (_internal_has_onchain_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::onchain_tx(this), target, stream);
  }

  // .chain.LightningPayment lightning_payment = 3;
  if (_internal_has_lightning_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lightning_payment(this), target, stream);
  }

  // .chain.LightningInvoice lightning_invoice = 4;
  if (_internal_has_lightning_invoice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lightning_invoice(this), target, stream);
  }

  // .chain.EthOnChainTransaction ethonchain_tx = 5;
  if (_internal_has_ethonchain_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ethonchain_tx(this), target, stream);
  }

  // .chain.ConnextPayment connext_payment = 6;
  if (_internal_has_connext_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::connext_payment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asset_id = 1;
  if (this->asset_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asset_id());
  }

  switch (transaction_case()) {
    // .chain.OnChainTransaction onchain_tx = 2;
    case kOnchainTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.onchain_tx_);
      break;
    }
    // .chain.LightningPayment lightning_payment = 3;
    case kLightningPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.lightning_payment_);
      break;
    }
    // .chain.LightningInvoice lightning_invoice = 4;
    case kLightningInvoice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.lightning_invoice_);
      break;
    }
    // .chain.EthOnChainTransaction ethonchain_tx = 5;
    case kEthonchainTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.ethonchain_tx_);
      break;
    }
    // .chain.ConnextPayment connext_payment = 6;
    case kConnextPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.connext_payment_);
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id() != 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  switch (from.transaction_case()) {
    case kOnchainTx: {
      _internal_mutable_onchain_tx()->::chain::OnChainTransaction::MergeFrom(from._internal_onchain_tx());
      break;
    }
    case kLightningPayment: {
      _internal_mutable_lightning_payment()->::chain::LightningPayment::MergeFrom(from._internal_lightning_payment());
      break;
    }
    case kLightningInvoice: {
      _internal_mutable_lightning_invoice()->::chain::LightningInvoice::MergeFrom(from._internal_lightning_invoice());
      break;
    }
    case kEthonchainTx: {
      _internal_mutable_ethonchain_tx()->::chain::EthOnChainTransaction::MergeFrom(from._internal_ethonchain_tx());
      break;
    }
    case kConnextPayment: {
      _internal_mutable_connext_payment()->::chain::ConnextPayment::MergeFrom(from._internal_connext_payment());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(asset_id_, other->asset_id_);
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EthAccount::InitAsDefaultInstance() {
}
class EthAccount::_Internal {
 public:
};

EthAccount::EthAccount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.EthAccount)
}
EthAccount::EthAccount(const EthAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:chain.EthAccount)
}

void EthAccount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthAccount_Chain_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EthAccount::~EthAccount() {
  // @@protoc_insertion_point(destructor:chain.EthAccount)
  SharedDtor();
}

void EthAccount::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthAccount& EthAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthAccount_Chain_2eproto.base);
  return *internal_default_instance();
}


void EthAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.EthAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EthAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.EthAccount.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.EthAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.EthAccount.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bytes nonce = 2;
  if (this->nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  // bytes balance = 3;
  if (this->balance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.EthAccount)
  return target;
}

size_t EthAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.EthAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes nonce = 2;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes balance = 3;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.EthAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const EthAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.EthAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.EthAccount)
    MergeFrom(*source);
  }
}

void EthAccount::MergeFrom(const EthAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.EthAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.balance().size() > 0) {

    balance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
}

void EthAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.EthAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthAccount::CopyFrom(const EthAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.EthAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthAccount::IsInitialized() const {
  return true;
}

void EthAccount::InternalSwap(EthAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EthAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EthToken::InitAsDefaultInstance() {
}
class EthToken::_Internal {
 public:
};

EthToken::EthToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chain.EthToken)
}
EthToken::EthToken(const EthToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_address().empty()) {
    token_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_address_);
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  update_height_ = from.update_height_;
  // @@protoc_insertion_point(copy_constructor:chain.EthToken)
}

void EthToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthToken_Chain_2eproto.base);
  token_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_height_ = PROTOBUF_LONGLONG(0);
}

EthToken::~EthToken() {
  // @@protoc_insertion_point(destructor:chain.EthToken)
  SharedDtor();
}

void EthToken::SharedDtor() {
  token_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthToken& EthToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthToken_Chain_2eproto.base);
  return *internal_default_instance();
}


void EthToken::Clear() {
// @@protoc_insertion_point(message_clear_start:chain.EthToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EthToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chain.EthToken.token_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 update_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chain.EthToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_address = 1;
  if (this->token_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_address().data(), static_cast<int>(this->_internal_token_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chain.EthToken.token_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_address(), target);
  }

  // bytes balance = 2;
  if (this->balance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_balance(), target);
  }

  // int64 update_height = 3;
  if (this->update_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_update_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chain.EthToken)
  return target;
}

size_t EthToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chain.EthToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_address = 1;
  if (this->token_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_address());
  }

  // bytes balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  // int64 update_height = 3;
  if (this->update_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_update_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chain.EthToken)
  GOOGLE_DCHECK_NE(&from, this);
  const EthToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chain.EthToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chain.EthToken)
    MergeFrom(*source);
  }
}

void EthToken::MergeFrom(const EthToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chain.EthToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token_address().size() > 0) {

    token_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_address_);
  }
  if (from.balance().size() > 0) {

    balance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  if (from.update_height() != 0) {
    _internal_set_update_height(from._internal_update_height());
  }
}

void EthToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chain.EthToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthToken::CopyFrom(const EthToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chain.EthToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthToken::IsInitialized() const {
  return true;
}

void EthToken::InternalSwap(EthToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_address_.Swap(&other->token_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_height_, other->update_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthToken::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chain::TxOutpoint* Arena::CreateMaybeMessage< ::chain::TxOutpoint >(Arena* arena) {
  return Arena::CreateInternal< ::chain::TxOutpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::TxOutput* Arena::CreateMaybeMessage< ::chain::TxOutput >(Arena* arena) {
  return Arena::CreateInternal< ::chain::TxOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::OnChainTransaction_MemoEntry_DoNotUse* Arena::CreateMaybeMessage< ::chain::OnChainTransaction_MemoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chain::OnChainTransaction_MemoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::OnChainTransaction* Arena::CreateMaybeMessage< ::chain::OnChainTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::chain::OnChainTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::EthOnChainTransaction_MemoEntry_DoNotUse* Arena::CreateMaybeMessage< ::chain::EthOnChainTransaction_MemoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chain::EthOnChainTransaction_MemoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::EthOnChainTransaction* Arena::CreateMaybeMessage< ::chain::EthOnChainTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::chain::EthOnChainTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::LightningPayment_MemoEntry_DoNotUse* Arena::CreateMaybeMessage< ::chain::LightningPayment_MemoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chain::LightningPayment_MemoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::LightningPayment* Arena::CreateMaybeMessage< ::chain::LightningPayment >(Arena* arena) {
  return Arena::CreateInternal< ::chain::LightningPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::LightningInvoice_MemoEntry_DoNotUse* Arena::CreateMaybeMessage< ::chain::LightningInvoice_MemoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chain::LightningInvoice_MemoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::LightningInvoice* Arena::CreateMaybeMessage< ::chain::LightningInvoice >(Arena* arena) {
  return Arena::CreateInternal< ::chain::LightningInvoice >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::ConnextPayment_MemoEntry_DoNotUse* Arena::CreateMaybeMessage< ::chain::ConnextPayment_MemoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::chain::ConnextPayment_MemoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::ConnextPayment* Arena::CreateMaybeMessage< ::chain::ConnextPayment >(Arena* arena) {
  return Arena::CreateInternal< ::chain::ConnextPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::Transaction* Arena::CreateMaybeMessage< ::chain::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::chain::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::EthAccount* Arena::CreateMaybeMessage< ::chain::EthAccount >(Arena* arena) {
  return Arena::CreateInternal< ::chain::EthAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::chain::EthToken* Arena::CreateMaybeMessage< ::chain::EthToken >(Arena* arena) {
  return Arena::CreateInternal< ::chain::EthToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
