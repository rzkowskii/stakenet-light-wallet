// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <LndTools/Protos/LndTypes.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chain_2eproto;
namespace chain {
class ConnextPayment;
class ConnextPaymentDefaultTypeInternal;
extern ConnextPaymentDefaultTypeInternal _ConnextPayment_default_instance_;
class ConnextPayment_MemoEntry_DoNotUse;
class ConnextPayment_MemoEntry_DoNotUseDefaultTypeInternal;
extern ConnextPayment_MemoEntry_DoNotUseDefaultTypeInternal _ConnextPayment_MemoEntry_DoNotUse_default_instance_;
class EthAccount;
class EthAccountDefaultTypeInternal;
extern EthAccountDefaultTypeInternal _EthAccount_default_instance_;
class EthOnChainTransaction;
class EthOnChainTransactionDefaultTypeInternal;
extern EthOnChainTransactionDefaultTypeInternal _EthOnChainTransaction_default_instance_;
class EthOnChainTransaction_MemoEntry_DoNotUse;
class EthOnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal;
extern EthOnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal _EthOnChainTransaction_MemoEntry_DoNotUse_default_instance_;
class EthToken;
class EthTokenDefaultTypeInternal;
extern EthTokenDefaultTypeInternal _EthToken_default_instance_;
class LightningInvoice;
class LightningInvoiceDefaultTypeInternal;
extern LightningInvoiceDefaultTypeInternal _LightningInvoice_default_instance_;
class LightningInvoice_MemoEntry_DoNotUse;
class LightningInvoice_MemoEntry_DoNotUseDefaultTypeInternal;
extern LightningInvoice_MemoEntry_DoNotUseDefaultTypeInternal _LightningInvoice_MemoEntry_DoNotUse_default_instance_;
class LightningPayment;
class LightningPaymentDefaultTypeInternal;
extern LightningPaymentDefaultTypeInternal _LightningPayment_default_instance_;
class LightningPayment_MemoEntry_DoNotUse;
class LightningPayment_MemoEntry_DoNotUseDefaultTypeInternal;
extern LightningPayment_MemoEntry_DoNotUseDefaultTypeInternal _LightningPayment_MemoEntry_DoNotUse_default_instance_;
class OnChainTransaction;
class OnChainTransactionDefaultTypeInternal;
extern OnChainTransactionDefaultTypeInternal _OnChainTransaction_default_instance_;
class OnChainTransaction_MemoEntry_DoNotUse;
class OnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal;
extern OnChainTransaction_MemoEntry_DoNotUseDefaultTypeInternal _OnChainTransaction_MemoEntry_DoNotUse_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TxOutpoint;
class TxOutpointDefaultTypeInternal;
extern TxOutpointDefaultTypeInternal _TxOutpoint_default_instance_;
class TxOutput;
class TxOutputDefaultTypeInternal;
extern TxOutputDefaultTypeInternal _TxOutput_default_instance_;
}  // namespace chain
PROTOBUF_NAMESPACE_OPEN
template<> ::chain::ConnextPayment* Arena::CreateMaybeMessage<::chain::ConnextPayment>(Arena*);
template<> ::chain::ConnextPayment_MemoEntry_DoNotUse* Arena::CreateMaybeMessage<::chain::ConnextPayment_MemoEntry_DoNotUse>(Arena*);
template<> ::chain::EthAccount* Arena::CreateMaybeMessage<::chain::EthAccount>(Arena*);
template<> ::chain::EthOnChainTransaction* Arena::CreateMaybeMessage<::chain::EthOnChainTransaction>(Arena*);
template<> ::chain::EthOnChainTransaction_MemoEntry_DoNotUse* Arena::CreateMaybeMessage<::chain::EthOnChainTransaction_MemoEntry_DoNotUse>(Arena*);
template<> ::chain::EthToken* Arena::CreateMaybeMessage<::chain::EthToken>(Arena*);
template<> ::chain::LightningInvoice* Arena::CreateMaybeMessage<::chain::LightningInvoice>(Arena*);
template<> ::chain::LightningInvoice_MemoEntry_DoNotUse* Arena::CreateMaybeMessage<::chain::LightningInvoice_MemoEntry_DoNotUse>(Arena*);
template<> ::chain::LightningPayment* Arena::CreateMaybeMessage<::chain::LightningPayment>(Arena*);
template<> ::chain::LightningPayment_MemoEntry_DoNotUse* Arena::CreateMaybeMessage<::chain::LightningPayment_MemoEntry_DoNotUse>(Arena*);
template<> ::chain::OnChainTransaction* Arena::CreateMaybeMessage<::chain::OnChainTransaction>(Arena*);
template<> ::chain::OnChainTransaction_MemoEntry_DoNotUse* Arena::CreateMaybeMessage<::chain::OnChainTransaction_MemoEntry_DoNotUse>(Arena*);
template<> ::chain::Transaction* Arena::CreateMaybeMessage<::chain::Transaction>(Arena*);
template<> ::chain::TxOutpoint* Arena::CreateMaybeMessage<::chain::TxOutpoint>(Arena*);
template<> ::chain::TxOutput* Arena::CreateMaybeMessage<::chain::TxOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chain {

enum OnChainTransaction_TxType : int {
  OnChainTransaction_TxType_UNKNOWN_TX_TYPE = 0,
  OnChainTransaction_TxType_PAYMENT = 1,
  OnChainTransaction_TxType_OPEN_CHANNEL = 2,
  OnChainTransaction_TxType_CLOSE_CHANNEL = 3,
  OnChainTransaction_TxType_OnChainTransaction_TxType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OnChainTransaction_TxType_OnChainTransaction_TxType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OnChainTransaction_TxType_IsValid(int value);
constexpr OnChainTransaction_TxType OnChainTransaction_TxType_TxType_MIN = OnChainTransaction_TxType_UNKNOWN_TX_TYPE;
constexpr OnChainTransaction_TxType OnChainTransaction_TxType_TxType_MAX = OnChainTransaction_TxType_CLOSE_CHANNEL;
constexpr int OnChainTransaction_TxType_TxType_ARRAYSIZE = OnChainTransaction_TxType_TxType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OnChainTransaction_TxType_descriptor();
template<typename T>
inline const std::string& OnChainTransaction_TxType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OnChainTransaction_TxType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OnChainTransaction_TxType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OnChainTransaction_TxType_descriptor(), enum_t_value);
}
inline bool OnChainTransaction_TxType_Parse(
    const std::string& name, OnChainTransaction_TxType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OnChainTransaction_TxType>(
    OnChainTransaction_TxType_descriptor(), name, value);
}
enum EthOnChainTransaction_EthTxType : int {
  EthOnChainTransaction_EthTxType_SEND_TX_TYPE = 0,
  EthOnChainTransaction_EthTxType_RECV_TX_TYPE = 1,
  EthOnChainTransaction_EthTxType_PAYMENT_TO_MYSELF_TX_TYPE = 2,
  EthOnChainTransaction_EthTxType_DEPOSIT_CHANNEL = 3,
  EthOnChainTransaction_EthTxType_EthOnChainTransaction_EthTxType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EthOnChainTransaction_EthTxType_EthOnChainTransaction_EthTxType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EthOnChainTransaction_EthTxType_IsValid(int value);
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction_EthTxType_EthTxType_MIN = EthOnChainTransaction_EthTxType_SEND_TX_TYPE;
constexpr EthOnChainTransaction_EthTxType EthOnChainTransaction_EthTxType_EthTxType_MAX = EthOnChainTransaction_EthTxType_DEPOSIT_CHANNEL;
constexpr int EthOnChainTransaction_EthTxType_EthTxType_ARRAYSIZE = EthOnChainTransaction_EthTxType_EthTxType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EthOnChainTransaction_EthTxType_descriptor();
template<typename T>
inline const std::string& EthOnChainTransaction_EthTxType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EthOnChainTransaction_EthTxType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EthOnChainTransaction_EthTxType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EthOnChainTransaction_EthTxType_descriptor(), enum_t_value);
}
inline bool EthOnChainTransaction_EthTxType_Parse(
    const std::string& name, EthOnChainTransaction_EthTxType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EthOnChainTransaction_EthTxType>(
    EthOnChainTransaction_EthTxType_descriptor(), name, value);
}
enum LightningPayment_PaymentStatus : int {
  LightningPayment_PaymentStatus_UNKNOWN = 0,
  LightningPayment_PaymentStatus_IN_FLIGHT = 1,
  LightningPayment_PaymentStatus_SUCCEEDED = 2,
  LightningPayment_PaymentStatus_FAILED = 3,
  LightningPayment_PaymentStatus_LightningPayment_PaymentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightningPayment_PaymentStatus_LightningPayment_PaymentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightningPayment_PaymentStatus_IsValid(int value);
constexpr LightningPayment_PaymentStatus LightningPayment_PaymentStatus_PaymentStatus_MIN = LightningPayment_PaymentStatus_UNKNOWN;
constexpr LightningPayment_PaymentStatus LightningPayment_PaymentStatus_PaymentStatus_MAX = LightningPayment_PaymentStatus_FAILED;
constexpr int LightningPayment_PaymentStatus_PaymentStatus_ARRAYSIZE = LightningPayment_PaymentStatus_PaymentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightningPayment_PaymentStatus_descriptor();
template<typename T>
inline const std::string& LightningPayment_PaymentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightningPayment_PaymentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightningPayment_PaymentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightningPayment_PaymentStatus_descriptor(), enum_t_value);
}
inline bool LightningPayment_PaymentStatus_Parse(
    const std::string& name, LightningPayment_PaymentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightningPayment_PaymentStatus>(
    LightningPayment_PaymentStatus_descriptor(), name, value);
}
enum LightningInvoice_InvoiceState : int {
  LightningInvoice_InvoiceState_OPEN = 0,
  LightningInvoice_InvoiceState_SETTLED = 1,
  LightningInvoice_InvoiceState_CANCELED = 2,
  LightningInvoice_InvoiceState_ACCEPTED = 3,
  LightningInvoice_InvoiceState_LightningInvoice_InvoiceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightningInvoice_InvoiceState_LightningInvoice_InvoiceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightningInvoice_InvoiceState_IsValid(int value);
constexpr LightningInvoice_InvoiceState LightningInvoice_InvoiceState_InvoiceState_MIN = LightningInvoice_InvoiceState_OPEN;
constexpr LightningInvoice_InvoiceState LightningInvoice_InvoiceState_InvoiceState_MAX = LightningInvoice_InvoiceState_ACCEPTED;
constexpr int LightningInvoice_InvoiceState_InvoiceState_ARRAYSIZE = LightningInvoice_InvoiceState_InvoiceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightningInvoice_InvoiceState_descriptor();
template<typename T>
inline const std::string& LightningInvoice_InvoiceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightningInvoice_InvoiceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightningInvoice_InvoiceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightningInvoice_InvoiceState_descriptor(), enum_t_value);
}
inline bool LightningInvoice_InvoiceState_Parse(
    const std::string& name, LightningInvoice_InvoiceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightningInvoice_InvoiceState>(
    LightningInvoice_InvoiceState_descriptor(), name, value);
}
enum ConnextPayment_ConnextPaymentType : int {
  ConnextPayment_ConnextPaymentType_SEND = 0,
  ConnextPayment_ConnextPaymentType_RECEIVE = 1,
  ConnextPayment_ConnextPaymentType_ConnextPayment_ConnextPaymentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnextPayment_ConnextPaymentType_ConnextPayment_ConnextPaymentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnextPayment_ConnextPaymentType_IsValid(int value);
constexpr ConnextPayment_ConnextPaymentType ConnextPayment_ConnextPaymentType_ConnextPaymentType_MIN = ConnextPayment_ConnextPaymentType_SEND;
constexpr ConnextPayment_ConnextPaymentType ConnextPayment_ConnextPaymentType_ConnextPaymentType_MAX = ConnextPayment_ConnextPaymentType_RECEIVE;
constexpr int ConnextPayment_ConnextPaymentType_ConnextPaymentType_ARRAYSIZE = ConnextPayment_ConnextPaymentType_ConnextPaymentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnextPayment_ConnextPaymentType_descriptor();
template<typename T>
inline const std::string& ConnextPayment_ConnextPaymentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnextPayment_ConnextPaymentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnextPayment_ConnextPaymentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnextPayment_ConnextPaymentType_descriptor(), enum_t_value);
}
inline bool ConnextPayment_ConnextPaymentType_Parse(
    const std::string& name, ConnextPayment_ConnextPaymentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnextPayment_ConnextPaymentType>(
    ConnextPayment_ConnextPaymentType_descriptor(), name, value);
}
enum PaymentFailureReason : int {
  FAILURE_REASON_NONE = 0,
  FAILURE_REASON_TIMEOUT = 1,
  FAILURE_REASON_NO_ROUTE = 2,
  FAILURE_REASON_ERROR = 3,
  FAILURE_REASON_INCORRECT_PAYMENT_DETAILS = 4,
  FAILURE_REASON_INSUFFICIENT_BALANCE = 5,
  PaymentFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PaymentFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PaymentFailureReason_IsValid(int value);
constexpr PaymentFailureReason PaymentFailureReason_MIN = FAILURE_REASON_NONE;
constexpr PaymentFailureReason PaymentFailureReason_MAX = FAILURE_REASON_INSUFFICIENT_BALANCE;
constexpr int PaymentFailureReason_ARRAYSIZE = PaymentFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentFailureReason_descriptor();
template<typename T>
inline const std::string& PaymentFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PaymentFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PaymentFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PaymentFailureReason_descriptor(), enum_t_value);
}
inline bool PaymentFailureReason_Parse(
    const std::string& name, PaymentFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PaymentFailureReason>(
    PaymentFailureReason_descriptor(), name, value);
}
// ===================================================================

class TxOutpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.TxOutpoint) */ {
 public:
  TxOutpoint();
  virtual ~TxOutpoint();

  TxOutpoint(const TxOutpoint& from);
  TxOutpoint(TxOutpoint&& from) noexcept
    : TxOutpoint() {
    *this = ::std::move(from);
  }

  inline TxOutpoint& operator=(const TxOutpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxOutpoint& operator=(TxOutpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxOutpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxOutpoint* internal_default_instance() {
    return reinterpret_cast<const TxOutpoint*>(
               &_TxOutpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxOutpoint& a, TxOutpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TxOutpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxOutpoint* New() const final {
    return CreateMaybeMessage<TxOutpoint>(nullptr);
  }

  TxOutpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxOutpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxOutpoint& from);
  void MergeFrom(const TxOutpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxOutpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.TxOutpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chain.TxOutpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class TxOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.TxOutput) */ {
 public:
  TxOutput();
  virtual ~TxOutput();

  TxOutput(const TxOutput& from);
  TxOutput(TxOutput&& from) noexcept
    : TxOutput() {
    *this = ::std::move(from);
  }

  inline TxOutput& operator=(const TxOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxOutput& operator=(TxOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxOutput* internal_default_instance() {
    return reinterpret_cast<const TxOutput*>(
               &_TxOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxOutput& a, TxOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TxOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxOutput* New() const final {
    return CreateMaybeMessage<TxOutput>(nullptr);
  }

  TxOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxOutput& from);
  void MergeFrom(const TxOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.TxOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kValueFieldNumber = 3,
    kIndexFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chain.TxOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class OnChainTransaction_MemoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OnChainTransaction_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OnChainTransaction_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OnChainTransaction_MemoEntry_DoNotUse();
  OnChainTransaction_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OnChainTransaction_MemoEntry_DoNotUse& other);
  static const OnChainTransaction_MemoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OnChainTransaction_MemoEntry_DoNotUse*>(&_OnChainTransaction_MemoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.OnChainTransaction.MemoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.OnChainTransaction.MemoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class OnChainTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.OnChainTransaction) */ {
 public:
  OnChainTransaction();
  virtual ~OnChainTransaction();

  OnChainTransaction(const OnChainTransaction& from);
  OnChainTransaction(OnChainTransaction&& from) noexcept
    : OnChainTransaction() {
    *this = ::std::move(from);
  }

  inline OnChainTransaction& operator=(const OnChainTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnChainTransaction& operator=(OnChainTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnChainTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnChainTransaction* internal_default_instance() {
    return reinterpret_cast<const OnChainTransaction*>(
               &_OnChainTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OnChainTransaction& a, OnChainTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(OnChainTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnChainTransaction* New() const final {
    return CreateMaybeMessage<OnChainTransaction>(nullptr);
  }

  OnChainTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnChainTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnChainTransaction& from);
  void MergeFrom(const OnChainTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnChainTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.OnChainTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef OnChainTransaction_TxType TxType;
  static constexpr TxType UNKNOWN_TX_TYPE =
    OnChainTransaction_TxType_UNKNOWN_TX_TYPE;
  static constexpr TxType PAYMENT =
    OnChainTransaction_TxType_PAYMENT;
  static constexpr TxType OPEN_CHANNEL =
    OnChainTransaction_TxType_OPEN_CHANNEL;
  static constexpr TxType CLOSE_CHANNEL =
    OnChainTransaction_TxType_CLOSE_CHANNEL;
  static inline bool TxType_IsValid(int value) {
    return OnChainTransaction_TxType_IsValid(value);
  }
  static constexpr TxType TxType_MIN =
    OnChainTransaction_TxType_TxType_MIN;
  static constexpr TxType TxType_MAX =
    OnChainTransaction_TxType_TxType_MAX;
  static constexpr int TxType_ARRAYSIZE =
    OnChainTransaction_TxType_TxType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TxType_descriptor() {
    return OnChainTransaction_TxType_descriptor();
  }
  template<typename T>
  static inline const std::string& TxType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TxType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TxType_Name.");
    return OnChainTransaction_TxType_Name(enum_t_value);
  }
  static inline bool TxType_Parse(const std::string& name,
      TxType* value) {
    return OnChainTransaction_TxType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 7,
    kOutputsFieldNumber = 8,
    kMemoFieldNumber = 11,
    kIdFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kHexRawTransactionFieldNumber = 12,
    kBlockHeightFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kIndexFieldNumber = 4,
    kFlagsFieldNumber = 6,
    kFeeFieldNumber = 9,
    kTypeFieldNumber = 10,
  };
  // repeated .chain.TxOutpoint inputs = 7;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::chain::TxOutpoint* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutpoint >*
      mutable_inputs();
  private:
  const ::chain::TxOutpoint& _internal_inputs(int index) const;
  ::chain::TxOutpoint* _internal_add_inputs();
  public:
  const ::chain::TxOutpoint& inputs(int index) const;
  ::chain::TxOutpoint* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutpoint >&
      inputs() const;

  // repeated .chain.TxOutput outputs = 8;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::chain::TxOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutput >*
      mutable_outputs();
  private:
  const ::chain::TxOutput& _internal_outputs(int index) const;
  ::chain::TxOutput* _internal_add_outputs();
  public:
  const ::chain::TxOutput& outputs(int index) const;
  ::chain::TxOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutput >&
      outputs() const;

  // map<string, string> memo = 11;
  int memo_size() const;
  private:
  int _internal_memo_size() const;
  public:
  void clear_memo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_memo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_memo();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string block_hash = 2;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const char* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // string hexRawTransaction = 12;
  void clear_hexrawtransaction();
  const std::string& hexrawtransaction() const;
  void set_hexrawtransaction(const std::string& value);
  void set_hexrawtransaction(std::string&& value);
  void set_hexrawtransaction(const char* value);
  void set_hexrawtransaction(const char* value, size_t size);
  std::string* mutable_hexrawtransaction();
  std::string* release_hexrawtransaction();
  void set_allocated_hexrawtransaction(std::string* hexrawtransaction);
  private:
  const std::string& _internal_hexrawtransaction() const;
  void _internal_set_hexrawtransaction(const std::string& value);
  std::string* _internal_mutable_hexrawtransaction();
  public:

  // int64 block_height = 3;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flags = 6;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 fee = 9;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .chain.OnChainTransaction.TxType type = 10;
  void clear_type();
  ::chain::OnChainTransaction_TxType type() const;
  void set_type(::chain::OnChainTransaction_TxType value);
  private:
  ::chain::OnChainTransaction_TxType _internal_type() const;
  void _internal_set_type(::chain::OnChainTransaction_TxType value);
  public:

  // @@protoc_insertion_point(class_scope:chain.OnChainTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutpoint > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OnChainTransaction_MemoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hexrawtransaction_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class EthOnChainTransaction_MemoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EthOnChainTransaction_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EthOnChainTransaction_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EthOnChainTransaction_MemoEntry_DoNotUse();
  EthOnChainTransaction_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EthOnChainTransaction_MemoEntry_DoNotUse& other);
  static const EthOnChainTransaction_MemoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EthOnChainTransaction_MemoEntry_DoNotUse*>(&_EthOnChainTransaction_MemoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.EthOnChainTransaction.MemoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.EthOnChainTransaction.MemoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class EthOnChainTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.EthOnChainTransaction) */ {
 public:
  EthOnChainTransaction();
  virtual ~EthOnChainTransaction();

  EthOnChainTransaction(const EthOnChainTransaction& from);
  EthOnChainTransaction(EthOnChainTransaction&& from) noexcept
    : EthOnChainTransaction() {
    *this = ::std::move(from);
  }

  inline EthOnChainTransaction& operator=(const EthOnChainTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthOnChainTransaction& operator=(EthOnChainTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthOnChainTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthOnChainTransaction* internal_default_instance() {
    return reinterpret_cast<const EthOnChainTransaction*>(
               &_EthOnChainTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EthOnChainTransaction& a, EthOnChainTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(EthOnChainTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthOnChainTransaction* New() const final {
    return CreateMaybeMessage<EthOnChainTransaction>(nullptr);
  }

  EthOnChainTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthOnChainTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthOnChainTransaction& from);
  void MergeFrom(const EthOnChainTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthOnChainTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.EthOnChainTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef EthOnChainTransaction_EthTxType EthTxType;
  static constexpr EthTxType SEND_TX_TYPE =
    EthOnChainTransaction_EthTxType_SEND_TX_TYPE;
  static constexpr EthTxType RECV_TX_TYPE =
    EthOnChainTransaction_EthTxType_RECV_TX_TYPE;
  static constexpr EthTxType PAYMENT_TO_MYSELF_TX_TYPE =
    EthOnChainTransaction_EthTxType_PAYMENT_TO_MYSELF_TX_TYPE;
  static constexpr EthTxType DEPOSIT_CHANNEL =
    EthOnChainTransaction_EthTxType_DEPOSIT_CHANNEL;
  static inline bool EthTxType_IsValid(int value) {
    return EthOnChainTransaction_EthTxType_IsValid(value);
  }
  static constexpr EthTxType EthTxType_MIN =
    EthOnChainTransaction_EthTxType_EthTxType_MIN;
  static constexpr EthTxType EthTxType_MAX =
    EthOnChainTransaction_EthTxType_EthTxType_MAX;
  static constexpr int EthTxType_ARRAYSIZE =
    EthOnChainTransaction_EthTxType_EthTxType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EthTxType_descriptor() {
    return EthOnChainTransaction_EthTxType_descriptor();
  }
  template<typename T>
  static inline const std::string& EthTxType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EthTxType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EthTxType_Name.");
    return EthOnChainTransaction_EthTxType_Name(enum_t_value);
  }
  static inline bool EthTxType_Parse(const std::string& name,
      EthTxType* value) {
    return EthOnChainTransaction_EthTxType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 12,
    kIdFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kFromFieldNumber = 4,
    kToFieldNumber = 5,
    kGasusedFieldNumber = 7,
    kGaspriceFieldNumber = 8,
    kValueFieldNumber = 9,
    kInputFieldNumber = 10,
    kBlockHeightFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kNonceFieldNumber = 11,
    kTypeFieldNumber = 13,
  };
  // map<string, string> memo = 12;
  int memo_size() const;
  private:
  int _internal_memo_size() const;
  public:
  void clear_memo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_memo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_memo();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes block_hash = 2;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // bytes from = 4;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 5;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes gasused = 7;
  void clear_gasused();
  const std::string& gasused() const;
  void set_gasused(const std::string& value);
  void set_gasused(std::string&& value);
  void set_gasused(const char* value);
  void set_gasused(const void* value, size_t size);
  std::string* mutable_gasused();
  std::string* release_gasused();
  void set_allocated_gasused(std::string* gasused);
  private:
  const std::string& _internal_gasused() const;
  void _internal_set_gasused(const std::string& value);
  std::string* _internal_mutable_gasused();
  public:

  // bytes gasprice = 8;
  void clear_gasprice();
  const std::string& gasprice() const;
  void set_gasprice(const std::string& value);
  void set_gasprice(std::string&& value);
  void set_gasprice(const char* value);
  void set_gasprice(const void* value, size_t size);
  std::string* mutable_gasprice();
  std::string* release_gasprice();
  void set_allocated_gasprice(std::string* gasprice);
  private:
  const std::string& _internal_gasprice() const;
  void _internal_set_gasprice(const std::string& value);
  std::string* _internal_mutable_gasprice();
  public:

  // bytes value = 9;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes input = 10;
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const void* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // int64 block_height = 3;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 nonce = 11;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::int64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .chain.EthOnChainTransaction.EthTxType type = 13;
  void clear_type();
  ::chain::EthOnChainTransaction_EthTxType type() const;
  void set_type(::chain::EthOnChainTransaction_EthTxType value);
  private:
  ::chain::EthOnChainTransaction_EthTxType _internal_type() const;
  void _internal_set_type(::chain::EthOnChainTransaction_EthTxType value);
  public:

  // @@protoc_insertion_point(class_scope:chain.EthOnChainTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EthOnChainTransaction_MemoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasprice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 nonce_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class LightningPayment_MemoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningPayment_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningPayment_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LightningPayment_MemoEntry_DoNotUse();
  LightningPayment_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LightningPayment_MemoEntry_DoNotUse& other);
  static const LightningPayment_MemoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LightningPayment_MemoEntry_DoNotUse*>(&_LightningPayment_MemoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.LightningPayment.MemoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.LightningPayment.MemoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class LightningPayment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.LightningPayment) */ {
 public:
  LightningPayment();
  virtual ~LightningPayment();

  LightningPayment(const LightningPayment& from);
  LightningPayment(LightningPayment&& from) noexcept
    : LightningPayment() {
    *this = ::std::move(from);
  }

  inline LightningPayment& operator=(const LightningPayment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightningPayment& operator=(LightningPayment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightningPayment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightningPayment* internal_default_instance() {
    return reinterpret_cast<const LightningPayment*>(
               &_LightningPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LightningPayment& a, LightningPayment& b) {
    a.Swap(&b);
  }
  inline void Swap(LightningPayment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightningPayment* New() const final {
    return CreateMaybeMessage<LightningPayment>(nullptr);
  }

  LightningPayment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightningPayment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightningPayment& from);
  void MergeFrom(const LightningPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightningPayment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.LightningPayment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef LightningPayment_PaymentStatus PaymentStatus;
  static constexpr PaymentStatus UNKNOWN =
    LightningPayment_PaymentStatus_UNKNOWN;
  static constexpr PaymentStatus IN_FLIGHT =
    LightningPayment_PaymentStatus_IN_FLIGHT;
  static constexpr PaymentStatus SUCCEEDED =
    LightningPayment_PaymentStatus_SUCCEEDED;
  static constexpr PaymentStatus FAILED =
    LightningPayment_PaymentStatus_FAILED;
  static inline bool PaymentStatus_IsValid(int value) {
    return LightningPayment_PaymentStatus_IsValid(value);
  }
  static constexpr PaymentStatus PaymentStatus_MIN =
    LightningPayment_PaymentStatus_PaymentStatus_MIN;
  static constexpr PaymentStatus PaymentStatus_MAX =
    LightningPayment_PaymentStatus_PaymentStatus_MAX;
  static constexpr int PaymentStatus_ARRAYSIZE =
    LightningPayment_PaymentStatus_PaymentStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PaymentStatus_descriptor() {
    return LightningPayment_PaymentStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PaymentStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PaymentStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PaymentStatus_Name.");
    return LightningPayment_PaymentStatus_Name(enum_t_value);
  }
  static inline bool PaymentStatus_Parse(const std::string& name,
      PaymentStatus* value) {
    return LightningPayment_PaymentStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 9,
    kPaymentHashFieldNumber = 1,
    kValueFieldNumber = 2,
    kFeeFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kPaymentIndexFieldNumber = 6,
    kStatusFieldNumber = 5,
    kFailureReasonFieldNumber = 7,
    kTypeFieldNumber = 8,
  };
  // map<string, string> memo = 9;
  int memo_size() const;
  private:
  int _internal_memo_size() const;
  public:
  void clear_memo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_memo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_memo();

  // string payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const char* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 payment_index = 6;
  void clear_payment_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 payment_index() const;
  void set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_payment_index() const;
  void _internal_set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .chain.LightningPayment.PaymentStatus status = 5;
  void clear_status();
  ::chain::LightningPayment_PaymentStatus status() const;
  void set_status(::chain::LightningPayment_PaymentStatus value);
  private:
  ::chain::LightningPayment_PaymentStatus _internal_status() const;
  void _internal_set_status(::chain::LightningPayment_PaymentStatus value);
  public:

  // .chain.PaymentFailureReason failure_reason = 7;
  void clear_failure_reason();
  ::chain::PaymentFailureReason failure_reason() const;
  void set_failure_reason(::chain::PaymentFailureReason value);
  private:
  ::chain::PaymentFailureReason _internal_failure_reason() const;
  void _internal_set_failure_reason(::chain::PaymentFailureReason value);
  public:

  // .lndtypes.LightningPaymentReason type = 8;
  void clear_type();
  ::lndtypes::LightningPaymentReason type() const;
  void set_type(::lndtypes::LightningPaymentReason value);
  private:
  ::lndtypes::LightningPaymentReason _internal_type() const;
  void _internal_set_type(::lndtypes::LightningPaymentReason value);
  public:

  // @@protoc_insertion_point(class_scope:chain.LightningPayment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LightningPayment_MemoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payment_index_;
  int status_;
  int failure_reason_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class LightningInvoice_MemoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningInvoice_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningInvoice_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LightningInvoice_MemoEntry_DoNotUse();
  LightningInvoice_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LightningInvoice_MemoEntry_DoNotUse& other);
  static const LightningInvoice_MemoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LightningInvoice_MemoEntry_DoNotUse*>(&_LightningInvoice_MemoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.LightningInvoice.MemoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.LightningInvoice.MemoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class LightningInvoice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.LightningInvoice) */ {
 public:
  LightningInvoice();
  virtual ~LightningInvoice();

  LightningInvoice(const LightningInvoice& from);
  LightningInvoice(LightningInvoice&& from) noexcept
    : LightningInvoice() {
    *this = ::std::move(from);
  }

  inline LightningInvoice& operator=(const LightningInvoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightningInvoice& operator=(LightningInvoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightningInvoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightningInvoice* internal_default_instance() {
    return reinterpret_cast<const LightningInvoice*>(
               &_LightningInvoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LightningInvoice& a, LightningInvoice& b) {
    a.Swap(&b);
  }
  inline void Swap(LightningInvoice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightningInvoice* New() const final {
    return CreateMaybeMessage<LightningInvoice>(nullptr);
  }

  LightningInvoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightningInvoice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightningInvoice& from);
  void MergeFrom(const LightningInvoice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightningInvoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.LightningInvoice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef LightningInvoice_InvoiceState InvoiceState;
  static constexpr InvoiceState OPEN =
    LightningInvoice_InvoiceState_OPEN;
  static constexpr InvoiceState SETTLED =
    LightningInvoice_InvoiceState_SETTLED;
  static constexpr InvoiceState CANCELED =
    LightningInvoice_InvoiceState_CANCELED;
  static constexpr InvoiceState ACCEPTED =
    LightningInvoice_InvoiceState_ACCEPTED;
  static inline bool InvoiceState_IsValid(int value) {
    return LightningInvoice_InvoiceState_IsValid(value);
  }
  static constexpr InvoiceState InvoiceState_MIN =
    LightningInvoice_InvoiceState_InvoiceState_MIN;
  static constexpr InvoiceState InvoiceState_MAX =
    LightningInvoice_InvoiceState_InvoiceState_MAX;
  static constexpr int InvoiceState_ARRAYSIZE =
    LightningInvoice_InvoiceState_InvoiceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InvoiceState_descriptor() {
    return LightningInvoice_InvoiceState_descriptor();
  }
  template<typename T>
  static inline const std::string& InvoiceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InvoiceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InvoiceState_Name.");
    return LightningInvoice_InvoiceState_Name(enum_t_value);
  }
  static inline bool InvoiceState_Parse(const std::string& name,
      InvoiceState* value) {
    return LightningInvoice_InvoiceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 1,
    kRHashFieldNumber = 2,
    kValueFieldNumber = 3,
    kCreationTimestampFieldNumber = 4,
    kSettleTimestampFieldNumber = 5,
    kExpiryFieldNumber = 6,
    kAddIndexFieldNumber = 7,
    kSettleIndexFieldNumber = 8,
    kAmtPaidFieldNumber = 9,
    kStateFieldNumber = 10,
    kTypeFieldNumber = 11,
  };
  // map<string, string> memo = 1;
  int memo_size() const;
  private:
  int _internal_memo_size() const;
  public:
  void clear_memo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_memo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_memo();

  // bytes r_hash = 2;
  void clear_r_hash();
  const std::string& r_hash() const;
  void set_r_hash(const std::string& value);
  void set_r_hash(std::string&& value);
  void set_r_hash(const char* value);
  void set_r_hash(const void* value, size_t size);
  std::string* mutable_r_hash();
  std::string* release_r_hash();
  void set_allocated_r_hash(std::string* r_hash);
  private:
  const std::string& _internal_r_hash() const;
  void _internal_set_r_hash(const std::string& value);
  std::string* _internal_mutable_r_hash();
  public:

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_timestamp = 4;
  void clear_creation_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp() const;
  void set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 settle_timestamp = 5;
  void clear_settle_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 settle_timestamp() const;
  void set_settle_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_settle_timestamp() const;
  void _internal_set_settle_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiry = 6;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 add_index = 7;
  void clear_add_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index() const;
  void set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_add_index() const;
  void _internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 settle_index = 8;
  void clear_settle_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index() const;
  void set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_settle_index() const;
  void _internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 amt_paid = 9;
  void clear_amt_paid();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid() const;
  void set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_paid() const;
  void _internal_set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .chain.LightningInvoice.InvoiceState state = 10;
  void clear_state();
  ::chain::LightningInvoice_InvoiceState state() const;
  void set_state(::chain::LightningInvoice_InvoiceState value);
  private:
  ::chain::LightningInvoice_InvoiceState _internal_state() const;
  void _internal_set_state(::chain::LightningInvoice_InvoiceState value);
  public:

  // .lndtypes.LightingInvoiceReason type = 11;
  void clear_type();
  ::lndtypes::LightingInvoiceReason type() const;
  void set_type(::lndtypes::LightingInvoiceReason value);
  private:
  ::lndtypes::LightingInvoiceReason _internal_type() const;
  void _internal_set_type(::lndtypes::LightingInvoiceReason value);
  public:

  // @@protoc_insertion_point(class_scope:chain.LightningInvoice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LightningInvoice_MemoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 settle_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_;
  int state_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class ConnextPayment_MemoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnextPayment_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnextPayment_MemoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ConnextPayment_MemoEntry_DoNotUse();
  ConnextPayment_MemoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnextPayment_MemoEntry_DoNotUse& other);
  static const ConnextPayment_MemoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnextPayment_MemoEntry_DoNotUse*>(&_ConnextPayment_MemoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.ConnextPayment.MemoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chain.ConnextPayment.MemoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class ConnextPayment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.ConnextPayment) */ {
 public:
  ConnextPayment();
  virtual ~ConnextPayment();

  ConnextPayment(const ConnextPayment& from);
  ConnextPayment(ConnextPayment&& from) noexcept
    : ConnextPayment() {
    *this = ::std::move(from);
  }

  inline ConnextPayment& operator=(const ConnextPayment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnextPayment& operator=(ConnextPayment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnextPayment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnextPayment* internal_default_instance() {
    return reinterpret_cast<const ConnextPayment*>(
               &_ConnextPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConnextPayment& a, ConnextPayment& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnextPayment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnextPayment* New() const final {
    return CreateMaybeMessage<ConnextPayment>(nullptr);
  }

  ConnextPayment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnextPayment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnextPayment& from);
  void MergeFrom(const ConnextPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnextPayment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.ConnextPayment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef ConnextPayment_ConnextPaymentType ConnextPaymentType;
  static constexpr ConnextPaymentType SEND =
    ConnextPayment_ConnextPaymentType_SEND;
  static constexpr ConnextPaymentType RECEIVE =
    ConnextPayment_ConnextPaymentType_RECEIVE;
  static inline bool ConnextPaymentType_IsValid(int value) {
    return ConnextPayment_ConnextPaymentType_IsValid(value);
  }
  static constexpr ConnextPaymentType ConnextPaymentType_MIN =
    ConnextPayment_ConnextPaymentType_ConnextPaymentType_MIN;
  static constexpr ConnextPaymentType ConnextPaymentType_MAX =
    ConnextPayment_ConnextPaymentType_ConnextPaymentType_MAX;
  static constexpr int ConnextPaymentType_ARRAYSIZE =
    ConnextPayment_ConnextPaymentType_ConnextPaymentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConnextPaymentType_descriptor() {
    return ConnextPayment_ConnextPaymentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConnextPaymentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConnextPaymentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConnextPaymentType_Name.");
    return ConnextPayment_ConnextPaymentType_Name(enum_t_value);
  }
  static inline bool ConnextPaymentType_Parse(const std::string& name,
      ConnextPaymentType* value) {
    return ConnextPayment_ConnextPaymentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 7,
    kTransferIdFieldNumber = 1,
    kChannelAddressFieldNumber = 2,
    kValueFieldNumber = 3,
    kFeeFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // map<string, string> memo = 7;
  int memo_size() const;
  private:
  int _internal_memo_size() const;
  public:
  void clear_memo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_memo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      memo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_memo();

  // string transferId = 1;
  void clear_transferid();
  const std::string& transferid() const;
  void set_transferid(const std::string& value);
  void set_transferid(std::string&& value);
  void set_transferid(const char* value);
  void set_transferid(const char* value, size_t size);
  std::string* mutable_transferid();
  std::string* release_transferid();
  void set_allocated_transferid(std::string* transferid);
  private:
  const std::string& _internal_transferid() const;
  void _internal_set_transferid(const std::string& value);
  std::string* _internal_mutable_transferid();
  public:

  // string channelAddress = 2;
  void clear_channeladdress();
  const std::string& channeladdress() const;
  void set_channeladdress(const std::string& value);
  void set_channeladdress(std::string&& value);
  void set_channeladdress(const char* value);
  void set_channeladdress(const char* value, size_t size);
  std::string* mutable_channeladdress();
  std::string* release_channeladdress();
  void set_allocated_channeladdress(std::string* channeladdress);
  private:
  const std::string& _internal_channeladdress() const;
  void _internal_set_channeladdress(const std::string& value);
  std::string* _internal_mutable_channeladdress();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes fee = 4;
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const void* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .chain.ConnextPayment.ConnextPaymentType type = 6;
  void clear_type();
  ::chain::ConnextPayment_ConnextPaymentType type() const;
  void set_type(::chain::ConnextPayment_ConnextPaymentType value);
  private:
  ::chain::ConnextPayment_ConnextPaymentType _internal_type() const;
  void _internal_set_type(::chain::ConnextPayment_ConnextPaymentType value);
  public:

  // @@protoc_insertion_point(class_scope:chain.ConnextPayment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnextPayment_MemoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transferid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channeladdress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  enum TransactionCase {
    kOnchainTx = 2,
    kLightningPayment = 3,
    kLightningInvoice = 4,
    kEthonchainTx = 5,
    kConnextPayment = 6,
    TRANSACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kOnchainTxFieldNumber = 2,
    kLightningPaymentFieldNumber = 3,
    kLightningInvoiceFieldNumber = 4,
    kEthonchainTxFieldNumber = 5,
    kConnextPaymentFieldNumber = 6,
  };
  // uint32 asset_id = 1;
  void clear_asset_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 asset_id() const;
  void set_asset_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asset_id() const;
  void _internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .chain.OnChainTransaction onchain_tx = 2;
  bool has_onchain_tx() const;
  private:
  bool _internal_has_onchain_tx() const;
  public:
  void clear_onchain_tx();
  const ::chain::OnChainTransaction& onchain_tx() const;
  ::chain::OnChainTransaction* release_onchain_tx();
  ::chain::OnChainTransaction* mutable_onchain_tx();
  void set_allocated_onchain_tx(::chain::OnChainTransaction* onchain_tx);
  private:
  const ::chain::OnChainTransaction& _internal_onchain_tx() const;
  ::chain::OnChainTransaction* _internal_mutable_onchain_tx();
  public:

  // .chain.LightningPayment lightning_payment = 3;
  bool has_lightning_payment() const;
  private:
  bool _internal_has_lightning_payment() const;
  public:
  void clear_lightning_payment();
  const ::chain::LightningPayment& lightning_payment() const;
  ::chain::LightningPayment* release_lightning_payment();
  ::chain::LightningPayment* mutable_lightning_payment();
  void set_allocated_lightning_payment(::chain::LightningPayment* lightning_payment);
  private:
  const ::chain::LightningPayment& _internal_lightning_payment() const;
  ::chain::LightningPayment* _internal_mutable_lightning_payment();
  public:

  // .chain.LightningInvoice lightning_invoice = 4;
  bool has_lightning_invoice() const;
  private:
  bool _internal_has_lightning_invoice() const;
  public:
  void clear_lightning_invoice();
  const ::chain::LightningInvoice& lightning_invoice() const;
  ::chain::LightningInvoice* release_lightning_invoice();
  ::chain::LightningInvoice* mutable_lightning_invoice();
  void set_allocated_lightning_invoice(::chain::LightningInvoice* lightning_invoice);
  private:
  const ::chain::LightningInvoice& _internal_lightning_invoice() const;
  ::chain::LightningInvoice* _internal_mutable_lightning_invoice();
  public:

  // .chain.EthOnChainTransaction ethonchain_tx = 5;
  bool has_ethonchain_tx() const;
  private:
  bool _internal_has_ethonchain_tx() const;
  public:
  void clear_ethonchain_tx();
  const ::chain::EthOnChainTransaction& ethonchain_tx() const;
  ::chain::EthOnChainTransaction* release_ethonchain_tx();
  ::chain::EthOnChainTransaction* mutable_ethonchain_tx();
  void set_allocated_ethonchain_tx(::chain::EthOnChainTransaction* ethonchain_tx);
  private:
  const ::chain::EthOnChainTransaction& _internal_ethonchain_tx() const;
  ::chain::EthOnChainTransaction* _internal_mutable_ethonchain_tx();
  public:

  // .chain.ConnextPayment connext_payment = 6;
  bool has_connext_payment() const;
  private:
  bool _internal_has_connext_payment() const;
  public:
  void clear_connext_payment();
  const ::chain::ConnextPayment& connext_payment() const;
  ::chain::ConnextPayment* release_connext_payment();
  ::chain::ConnextPayment* mutable_connext_payment();
  void set_allocated_connext_payment(::chain::ConnextPayment* connext_payment);
  private:
  const ::chain::ConnextPayment& _internal_connext_payment() const;
  ::chain::ConnextPayment* _internal_mutable_connext_payment();
  public:

  void clear_transaction();
  TransactionCase transaction_case() const;
  // @@protoc_insertion_point(class_scope:chain.Transaction)
 private:
  class _Internal;
  void set_has_onchain_tx();
  void set_has_lightning_payment();
  void set_has_lightning_invoice();
  void set_has_ethonchain_tx();
  void set_has_connext_payment();

  inline bool has_transaction() const;
  inline void clear_has_transaction();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asset_id_;
  union TransactionUnion {
    TransactionUnion() {}
    ::chain::OnChainTransaction* onchain_tx_;
    ::chain::LightningPayment* lightning_payment_;
    ::chain::LightningInvoice* lightning_invoice_;
    ::chain::EthOnChainTransaction* ethonchain_tx_;
    ::chain::ConnextPayment* connext_payment_;
  } transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class EthAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.EthAccount) */ {
 public:
  EthAccount();
  virtual ~EthAccount();

  EthAccount(const EthAccount& from);
  EthAccount(EthAccount&& from) noexcept
    : EthAccount() {
    *this = ::std::move(from);
  }

  inline EthAccount& operator=(const EthAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthAccount& operator=(EthAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthAccount* internal_default_instance() {
    return reinterpret_cast<const EthAccount*>(
               &_EthAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EthAccount& a, EthAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(EthAccount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthAccount* New() const final {
    return CreateMaybeMessage<EthAccount>(nullptr);
  }

  EthAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthAccount& from);
  void MergeFrom(const EthAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.EthAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNonceFieldNumber = 2,
    kBalanceFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes balance = 3;
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // @@protoc_insertion_point(class_scope:chain.EthAccount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// -------------------------------------------------------------------

class EthToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chain.EthToken) */ {
 public:
  EthToken();
  virtual ~EthToken();

  EthToken(const EthToken& from);
  EthToken(EthToken&& from) noexcept
    : EthToken() {
    *this = ::std::move(from);
  }

  inline EthToken& operator=(const EthToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthToken& operator=(EthToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthToken* internal_default_instance() {
    return reinterpret_cast<const EthToken*>(
               &_EthToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EthToken& a, EthToken& b) {
    a.Swap(&b);
  }
  inline void Swap(EthToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthToken* New() const final {
    return CreateMaybeMessage<EthToken>(nullptr);
  }

  EthToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthToken& from);
  void MergeFrom(const EthToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chain.EthToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chain_2eproto);
    return ::descriptor_table_Chain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenAddressFieldNumber = 1,
    kBalanceFieldNumber = 2,
    kUpdateHeightFieldNumber = 3,
  };
  // string token_address = 1;
  void clear_token_address();
  const std::string& token_address() const;
  void set_token_address(const std::string& value);
  void set_token_address(std::string&& value);
  void set_token_address(const char* value);
  void set_token_address(const char* value, size_t size);
  std::string* mutable_token_address();
  std::string* release_token_address();
  void set_allocated_token_address(std::string* token_address);
  private:
  const std::string& _internal_token_address() const;
  void _internal_set_token_address(const std::string& value);
  std::string* _internal_mutable_token_address();
  public:

  // bytes balance = 2;
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // int64 update_height = 3;
  void clear_update_height();
  ::PROTOBUF_NAMESPACE_ID::int64 update_height() const;
  void set_update_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_update_height() const;
  void _internal_set_update_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:chain.EthToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxOutpoint

// string hash = 1;
inline void TxOutpoint::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxOutpoint::hash() const {
  // @@protoc_insertion_point(field_get:chain.TxOutpoint.hash)
  return _internal_hash();
}
inline void TxOutpoint::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:chain.TxOutpoint.hash)
}
inline std::string* TxOutpoint::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:chain.TxOutpoint.hash)
  return _internal_mutable_hash();
}
inline const std::string& TxOutpoint::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void TxOutpoint::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxOutpoint::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.TxOutpoint.hash)
}
inline void TxOutpoint::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.TxOutpoint.hash)
}
inline void TxOutpoint::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.TxOutpoint.hash)
}
inline std::string* TxOutpoint::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxOutpoint::release_hash() {
  // @@protoc_insertion_point(field_release:chain.TxOutpoint.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutpoint::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:chain.TxOutpoint.hash)
}

// uint32 index = 2;
inline void TxOutpoint::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxOutpoint::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxOutpoint::index() const {
  // @@protoc_insertion_point(field_get:chain.TxOutpoint.index)
  return _internal_index();
}
inline void TxOutpoint::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void TxOutpoint::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:chain.TxOutpoint.index)
}

// -------------------------------------------------------------------

// TxOutput

// string address = 1;
inline void TxOutput::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxOutput::address() const {
  // @@protoc_insertion_point(field_get:chain.TxOutput.address)
  return _internal_address();
}
inline void TxOutput::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:chain.TxOutput.address)
}
inline std::string* TxOutput::mutable_address() {
  // @@protoc_insertion_point(field_mutable:chain.TxOutput.address)
  return _internal_mutable_address();
}
inline const std::string& TxOutput::_internal_address() const {
  return address_.GetNoArena();
}
inline void TxOutput::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxOutput::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.TxOutput.address)
}
inline void TxOutput::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.TxOutput.address)
}
inline void TxOutput::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.TxOutput.address)
}
inline std::string* TxOutput::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxOutput::release_address() {
  // @@protoc_insertion_point(field_release:chain.TxOutput.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxOutput::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:chain.TxOutput.address)
}

// uint32 index = 2;
inline void TxOutput::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxOutput::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxOutput::index() const {
  // @@protoc_insertion_point(field_get:chain.TxOutput.index)
  return _internal_index();
}
inline void TxOutput::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void TxOutput::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:chain.TxOutput.index)
}

// int64 value = 3;
inline void TxOutput::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TxOutput::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TxOutput::value() const {
  // @@protoc_insertion_point(field_get:chain.TxOutput.value)
  return _internal_value();
}
inline void TxOutput::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void TxOutput::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:chain.TxOutput.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OnChainTransaction

// string id = 1;
inline void OnChainTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OnChainTransaction::id() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.id)
  return _internal_id();
}
inline void OnChainTransaction::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.id)
}
inline std::string* OnChainTransaction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:chain.OnChainTransaction.id)
  return _internal_mutable_id();
}
inline const std::string& OnChainTransaction::_internal_id() const {
  return id_.GetNoArena();
}
inline void OnChainTransaction::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OnChainTransaction::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.OnChainTransaction.id)
}
inline void OnChainTransaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.OnChainTransaction.id)
}
inline void OnChainTransaction::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.OnChainTransaction.id)
}
inline std::string* OnChainTransaction::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OnChainTransaction::release_id() {
  // @@protoc_insertion_point(field_release:chain.OnChainTransaction.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OnChainTransaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chain.OnChainTransaction.id)
}

// string block_hash = 2;
inline void OnChainTransaction::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OnChainTransaction::block_hash() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.block_hash)
  return _internal_block_hash();
}
inline void OnChainTransaction::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.block_hash)
}
inline std::string* OnChainTransaction::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:chain.OnChainTransaction.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& OnChainTransaction::_internal_block_hash() const {
  return block_hash_.GetNoArena();
}
inline void OnChainTransaction::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OnChainTransaction::set_block_hash(std::string&& value) {
  
  block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.OnChainTransaction.block_hash)
}
inline void OnChainTransaction::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.OnChainTransaction.block_hash)
}
inline void OnChainTransaction::set_block_hash(const char* value, size_t size) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.OnChainTransaction.block_hash)
}
inline std::string* OnChainTransaction::_internal_mutable_block_hash() {
  
  return block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OnChainTransaction::release_block_hash() {
  // @@protoc_insertion_point(field_release:chain.OnChainTransaction.block_hash)
  
  return block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OnChainTransaction::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:chain.OnChainTransaction.block_hash)
}

// int64 block_height = 3;
inline void OnChainTransaction::clear_block_height() {
  block_height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::block_height() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.block_height)
  return _internal_block_height();
}
inline void OnChainTransaction::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_height_ = value;
}
inline void OnChainTransaction::set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.block_height)
}

// uint32 index = 4;
inline void OnChainTransaction::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnChainTransaction::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnChainTransaction::index() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.index)
  return _internal_index();
}
inline void OnChainTransaction::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void OnChainTransaction::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.index)
}

// int64 timestamp = 5;
inline void OnChainTransaction::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::timestamp() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.timestamp)
  return _internal_timestamp();
}
inline void OnChainTransaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void OnChainTransaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.timestamp)
}

// uint32 flags = 6;
inline void OnChainTransaction::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnChainTransaction::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnChainTransaction::flags() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.flags)
  return _internal_flags();
}
inline void OnChainTransaction::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void OnChainTransaction::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.flags)
}

// repeated .chain.TxOutpoint inputs = 7;
inline int OnChainTransaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int OnChainTransaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void OnChainTransaction::clear_inputs() {
  inputs_.Clear();
}
inline ::chain::TxOutpoint* OnChainTransaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:chain.OnChainTransaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutpoint >*
OnChainTransaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:chain.OnChainTransaction.inputs)
  return &inputs_;
}
inline const ::chain::TxOutpoint& OnChainTransaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::chain::TxOutpoint& OnChainTransaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.inputs)
  return _internal_inputs(index);
}
inline ::chain::TxOutpoint* OnChainTransaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::chain::TxOutpoint* OnChainTransaction::add_inputs() {
  // @@protoc_insertion_point(field_add:chain.OnChainTransaction.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutpoint >&
OnChainTransaction::inputs() const {
  // @@protoc_insertion_point(field_list:chain.OnChainTransaction.inputs)
  return inputs_;
}

// repeated .chain.TxOutput outputs = 8;
inline int OnChainTransaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int OnChainTransaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void OnChainTransaction::clear_outputs() {
  outputs_.Clear();
}
inline ::chain::TxOutput* OnChainTransaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:chain.OnChainTransaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutput >*
OnChainTransaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:chain.OnChainTransaction.outputs)
  return &outputs_;
}
inline const ::chain::TxOutput& OnChainTransaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::chain::TxOutput& OnChainTransaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.outputs)
  return _internal_outputs(index);
}
inline ::chain::TxOutput* OnChainTransaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::chain::TxOutput* OnChainTransaction::add_outputs() {
  // @@protoc_insertion_point(field_add:chain.OnChainTransaction.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chain::TxOutput >&
OnChainTransaction::outputs() const {
  // @@protoc_insertion_point(field_list:chain.OnChainTransaction.outputs)
  return outputs_;
}

// int64 fee = 9;
inline void OnChainTransaction::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OnChainTransaction::fee() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.fee)
  return _internal_fee();
}
inline void OnChainTransaction::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void OnChainTransaction::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.fee)
}

// .chain.OnChainTransaction.TxType type = 10;
inline void OnChainTransaction::clear_type() {
  type_ = 0;
}
inline ::chain::OnChainTransaction_TxType OnChainTransaction::_internal_type() const {
  return static_cast< ::chain::OnChainTransaction_TxType >(type_);
}
inline ::chain::OnChainTransaction_TxType OnChainTransaction::type() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.type)
  return _internal_type();
}
inline void OnChainTransaction::_internal_set_type(::chain::OnChainTransaction_TxType value) {
  
  type_ = value;
}
inline void OnChainTransaction::set_type(::chain::OnChainTransaction_TxType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.type)
}

// map<string, string> memo = 11;
inline int OnChainTransaction::_internal_memo_size() const {
  return memo_.size();
}
inline int OnChainTransaction::memo_size() const {
  return _internal_memo_size();
}
inline void OnChainTransaction::clear_memo() {
  memo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OnChainTransaction::_internal_memo() const {
  return memo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OnChainTransaction::memo() const {
  // @@protoc_insertion_point(field_map:chain.OnChainTransaction.memo)
  return _internal_memo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OnChainTransaction::_internal_mutable_memo() {
  return memo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OnChainTransaction::mutable_memo() {
  // @@protoc_insertion_point(field_mutable_map:chain.OnChainTransaction.memo)
  return _internal_mutable_memo();
}

// string hexRawTransaction = 12;
inline void OnChainTransaction::clear_hexrawtransaction() {
  hexrawtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OnChainTransaction::hexrawtransaction() const {
  // @@protoc_insertion_point(field_get:chain.OnChainTransaction.hexRawTransaction)
  return _internal_hexrawtransaction();
}
inline void OnChainTransaction::set_hexrawtransaction(const std::string& value) {
  _internal_set_hexrawtransaction(value);
  // @@protoc_insertion_point(field_set:chain.OnChainTransaction.hexRawTransaction)
}
inline std::string* OnChainTransaction::mutable_hexrawtransaction() {
  // @@protoc_insertion_point(field_mutable:chain.OnChainTransaction.hexRawTransaction)
  return _internal_mutable_hexrawtransaction();
}
inline const std::string& OnChainTransaction::_internal_hexrawtransaction() const {
  return hexrawtransaction_.GetNoArena();
}
inline void OnChainTransaction::_internal_set_hexrawtransaction(const std::string& value) {
  
  hexrawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OnChainTransaction::set_hexrawtransaction(std::string&& value) {
  
  hexrawtransaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.OnChainTransaction.hexRawTransaction)
}
inline void OnChainTransaction::set_hexrawtransaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hexrawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.OnChainTransaction.hexRawTransaction)
}
inline void OnChainTransaction::set_hexrawtransaction(const char* value, size_t size) {
  
  hexrawtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.OnChainTransaction.hexRawTransaction)
}
inline std::string* OnChainTransaction::_internal_mutable_hexrawtransaction() {
  
  return hexrawtransaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OnChainTransaction::release_hexrawtransaction() {
  // @@protoc_insertion_point(field_release:chain.OnChainTransaction.hexRawTransaction)
  
  return hexrawtransaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OnChainTransaction::set_allocated_hexrawtransaction(std::string* hexrawtransaction) {
  if (hexrawtransaction != nullptr) {
    
  } else {
    
  }
  hexrawtransaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hexrawtransaction);
  // @@protoc_insertion_point(field_set_allocated:chain.OnChainTransaction.hexRawTransaction)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EthOnChainTransaction

// string id = 1;
inline void EthOnChainTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::id() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.id)
  return _internal_id();
}
inline void EthOnChainTransaction::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.id)
}
inline std::string* EthOnChainTransaction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.id)
  return _internal_mutable_id();
}
inline const std::string& EthOnChainTransaction::_internal_id() const {
  return id_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.id)
}
inline void EthOnChainTransaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.id)
}
inline void EthOnChainTransaction::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.id)
}
inline std::string* EthOnChainTransaction::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_id() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.id)
}

// bytes block_hash = 2;
inline void EthOnChainTransaction::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::block_hash() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.block_hash)
  return _internal_block_hash();
}
inline void EthOnChainTransaction::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.block_hash)
}
inline std::string* EthOnChainTransaction::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& EthOnChainTransaction::_internal_block_hash() const {
  return block_hash_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_block_hash(std::string&& value) {
  
  block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.block_hash)
}
inline void EthOnChainTransaction::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.block_hash)
}
inline void EthOnChainTransaction::set_block_hash(const void* value, size_t size) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.block_hash)
}
inline std::string* EthOnChainTransaction::_internal_mutable_block_hash() {
  
  return block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_block_hash() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.block_hash)
  
  return block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.block_hash)
}

// int64 block_height = 3;
inline void EthOnChainTransaction::clear_block_height() {
  block_height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::block_height() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.block_height)
  return _internal_block_height();
}
inline void EthOnChainTransaction::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_height_ = value;
}
inline void EthOnChainTransaction::set_block_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.block_height)
}

// bytes from = 4;
inline void EthOnChainTransaction::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::from() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.from)
  return _internal_from();
}
inline void EthOnChainTransaction::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.from)
}
inline std::string* EthOnChainTransaction::mutable_from() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.from)
  return _internal_mutable_from();
}
inline const std::string& EthOnChainTransaction::_internal_from() const {
  return from_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.from)
}
inline void EthOnChainTransaction::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.from)
}
inline void EthOnChainTransaction::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.from)
}
inline std::string* EthOnChainTransaction::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_from() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.from)
}

// bytes to = 5;
inline void EthOnChainTransaction::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::to() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.to)
  return _internal_to();
}
inline void EthOnChainTransaction::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.to)
}
inline std::string* EthOnChainTransaction::mutable_to() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.to)
  return _internal_mutable_to();
}
inline const std::string& EthOnChainTransaction::_internal_to() const {
  return to_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.to)
}
inline void EthOnChainTransaction::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.to)
}
inline void EthOnChainTransaction::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.to)
}
inline std::string* EthOnChainTransaction::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_to() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.to)
}

// int64 timestamp = 6;
inline void EthOnChainTransaction::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::timestamp() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.timestamp)
  return _internal_timestamp();
}
inline void EthOnChainTransaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void EthOnChainTransaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.timestamp)
}

// bytes gasused = 7;
inline void EthOnChainTransaction::clear_gasused() {
  gasused_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::gasused() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.gasused)
  return _internal_gasused();
}
inline void EthOnChainTransaction::set_gasused(const std::string& value) {
  _internal_set_gasused(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.gasused)
}
inline std::string* EthOnChainTransaction::mutable_gasused() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.gasused)
  return _internal_mutable_gasused();
}
inline const std::string& EthOnChainTransaction::_internal_gasused() const {
  return gasused_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_gasused(const std::string& value) {
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_gasused(std::string&& value) {
  
  gasused_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.gasused)
}
inline void EthOnChainTransaction::set_gasused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.gasused)
}
inline void EthOnChainTransaction::set_gasused(const void* value, size_t size) {
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.gasused)
}
inline std::string* EthOnChainTransaction::_internal_mutable_gasused() {
  
  return gasused_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_gasused() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.gasused)
  
  return gasused_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_gasused(std::string* gasused) {
  if (gasused != nullptr) {
    
  } else {
    
  }
  gasused_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasused);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.gasused)
}

// bytes gasprice = 8;
inline void EthOnChainTransaction::clear_gasprice() {
  gasprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::gasprice() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.gasprice)
  return _internal_gasprice();
}
inline void EthOnChainTransaction::set_gasprice(const std::string& value) {
  _internal_set_gasprice(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.gasprice)
}
inline std::string* EthOnChainTransaction::mutable_gasprice() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.gasprice)
  return _internal_mutable_gasprice();
}
inline const std::string& EthOnChainTransaction::_internal_gasprice() const {
  return gasprice_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_gasprice(const std::string& value) {
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_gasprice(std::string&& value) {
  
  gasprice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.gasprice)
}
inline void EthOnChainTransaction::set_gasprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.gasprice)
}
inline void EthOnChainTransaction::set_gasprice(const void* value, size_t size) {
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.gasprice)
}
inline std::string* EthOnChainTransaction::_internal_mutable_gasprice() {
  
  return gasprice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_gasprice() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.gasprice)
  
  return gasprice_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_gasprice(std::string* gasprice) {
  if (gasprice != nullptr) {
    
  } else {
    
  }
  gasprice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasprice);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.gasprice)
}

// bytes value = 9;
inline void EthOnChainTransaction::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::value() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.value)
  return _internal_value();
}
inline void EthOnChainTransaction::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.value)
}
inline std::string* EthOnChainTransaction::mutable_value() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.value)
  return _internal_mutable_value();
}
inline const std::string& EthOnChainTransaction::_internal_value() const {
  return value_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.value)
}
inline void EthOnChainTransaction::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.value)
}
inline void EthOnChainTransaction::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.value)
}
inline std::string* EthOnChainTransaction::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_value() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.value)
}

// bytes input = 10;
inline void EthOnChainTransaction::clear_input() {
  input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthOnChainTransaction::input() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.input)
  return _internal_input();
}
inline void EthOnChainTransaction::set_input(const std::string& value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.input)
}
inline std::string* EthOnChainTransaction::mutable_input() {
  // @@protoc_insertion_point(field_mutable:chain.EthOnChainTransaction.input)
  return _internal_mutable_input();
}
inline const std::string& EthOnChainTransaction::_internal_input() const {
  return input_.GetNoArena();
}
inline void EthOnChainTransaction::_internal_set_input(const std::string& value) {
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthOnChainTransaction::set_input(std::string&& value) {
  
  input_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthOnChainTransaction.input)
}
inline void EthOnChainTransaction::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthOnChainTransaction.input)
}
inline void EthOnChainTransaction::set_input(const void* value, size_t size) {
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthOnChainTransaction.input)
}
inline std::string* EthOnChainTransaction::_internal_mutable_input() {
  
  return input_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthOnChainTransaction::release_input() {
  // @@protoc_insertion_point(field_release:chain.EthOnChainTransaction.input)
  
  return input_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthOnChainTransaction::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input);
  // @@protoc_insertion_point(field_set_allocated:chain.EthOnChainTransaction.input)
}

// int64 nonce = 11;
inline void EthOnChainTransaction::clear_nonce() {
  nonce_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthOnChainTransaction::nonce() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.nonce)
  return _internal_nonce();
}
inline void EthOnChainTransaction::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nonce_ = value;
}
inline void EthOnChainTransaction::set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.nonce)
}

// map<string, string> memo = 12;
inline int EthOnChainTransaction::_internal_memo_size() const {
  return memo_.size();
}
inline int EthOnChainTransaction::memo_size() const {
  return _internal_memo_size();
}
inline void EthOnChainTransaction::clear_memo() {
  memo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EthOnChainTransaction::_internal_memo() const {
  return memo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EthOnChainTransaction::memo() const {
  // @@protoc_insertion_point(field_map:chain.EthOnChainTransaction.memo)
  return _internal_memo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EthOnChainTransaction::_internal_mutable_memo() {
  return memo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EthOnChainTransaction::mutable_memo() {
  // @@protoc_insertion_point(field_mutable_map:chain.EthOnChainTransaction.memo)
  return _internal_mutable_memo();
}

// .chain.EthOnChainTransaction.EthTxType type = 13;
inline void EthOnChainTransaction::clear_type() {
  type_ = 0;
}
inline ::chain::EthOnChainTransaction_EthTxType EthOnChainTransaction::_internal_type() const {
  return static_cast< ::chain::EthOnChainTransaction_EthTxType >(type_);
}
inline ::chain::EthOnChainTransaction_EthTxType EthOnChainTransaction::type() const {
  // @@protoc_insertion_point(field_get:chain.EthOnChainTransaction.type)
  return _internal_type();
}
inline void EthOnChainTransaction::_internal_set_type(::chain::EthOnChainTransaction_EthTxType value) {
  
  type_ = value;
}
inline void EthOnChainTransaction::set_type(::chain::EthOnChainTransaction_EthTxType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chain.EthOnChainTransaction.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LightningPayment

// string payment_hash = 1;
inline void LightningPayment::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningPayment::payment_hash() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.payment_hash)
  return _internal_payment_hash();
}
inline void LightningPayment::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.payment_hash)
}
inline std::string* LightningPayment::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:chain.LightningPayment.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& LightningPayment::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void LightningPayment::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningPayment::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.LightningPayment.payment_hash)
}
inline void LightningPayment::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.LightningPayment.payment_hash)
}
inline void LightningPayment::set_payment_hash(const char* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.LightningPayment.payment_hash)
}
inline std::string* LightningPayment::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningPayment::release_payment_hash() {
  // @@protoc_insertion_point(field_release:chain.LightningPayment.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningPayment::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:chain.LightningPayment.payment_hash)
}

// int64 value = 2;
inline void LightningPayment::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::value() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.value)
  return _internal_value();
}
inline void LightningPayment::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void LightningPayment::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.value)
}

// int64 fee = 3;
inline void LightningPayment::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::fee() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.fee)
  return _internal_fee();
}
inline void LightningPayment::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void LightningPayment::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.fee)
}

// int64 timestamp = 4;
inline void LightningPayment::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningPayment::timestamp() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.timestamp)
  return _internal_timestamp();
}
inline void LightningPayment::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void LightningPayment::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.timestamp)
}

// .chain.LightningPayment.PaymentStatus status = 5;
inline void LightningPayment::clear_status() {
  status_ = 0;
}
inline ::chain::LightningPayment_PaymentStatus LightningPayment::_internal_status() const {
  return static_cast< ::chain::LightningPayment_PaymentStatus >(status_);
}
inline ::chain::LightningPayment_PaymentStatus LightningPayment::status() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.status)
  return _internal_status();
}
inline void LightningPayment::_internal_set_status(::chain::LightningPayment_PaymentStatus value) {
  
  status_ = value;
}
inline void LightningPayment::set_status(::chain::LightningPayment_PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.status)
}

// uint64 payment_index = 6;
inline void LightningPayment::clear_payment_index() {
  payment_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningPayment::_internal_payment_index() const {
  return payment_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningPayment::payment_index() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.payment_index)
  return _internal_payment_index();
}
inline void LightningPayment::_internal_set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  payment_index_ = value;
}
inline void LightningPayment::set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_payment_index(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.payment_index)
}

// .chain.PaymentFailureReason failure_reason = 7;
inline void LightningPayment::clear_failure_reason() {
  failure_reason_ = 0;
}
inline ::chain::PaymentFailureReason LightningPayment::_internal_failure_reason() const {
  return static_cast< ::chain::PaymentFailureReason >(failure_reason_);
}
inline ::chain::PaymentFailureReason LightningPayment::failure_reason() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.failure_reason)
  return _internal_failure_reason();
}
inline void LightningPayment::_internal_set_failure_reason(::chain::PaymentFailureReason value) {
  
  failure_reason_ = value;
}
inline void LightningPayment::set_failure_reason(::chain::PaymentFailureReason value) {
  _internal_set_failure_reason(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.failure_reason)
}

// .lndtypes.LightningPaymentReason type = 8;
inline void LightningPayment::clear_type() {
  type_ = 0;
}
inline ::lndtypes::LightningPaymentReason LightningPayment::_internal_type() const {
  return static_cast< ::lndtypes::LightningPaymentReason >(type_);
}
inline ::lndtypes::LightningPaymentReason LightningPayment::type() const {
  // @@protoc_insertion_point(field_get:chain.LightningPayment.type)
  return _internal_type();
}
inline void LightningPayment::_internal_set_type(::lndtypes::LightningPaymentReason value) {
  
  type_ = value;
}
inline void LightningPayment::set_type(::lndtypes::LightningPaymentReason value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chain.LightningPayment.type)
}

// map<string, string> memo = 9;
inline int LightningPayment::_internal_memo_size() const {
  return memo_.size();
}
inline int LightningPayment::memo_size() const {
  return _internal_memo_size();
}
inline void LightningPayment::clear_memo() {
  memo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LightningPayment::_internal_memo() const {
  return memo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LightningPayment::memo() const {
  // @@protoc_insertion_point(field_map:chain.LightningPayment.memo)
  return _internal_memo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LightningPayment::_internal_mutable_memo() {
  return memo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LightningPayment::mutable_memo() {
  // @@protoc_insertion_point(field_mutable_map:chain.LightningPayment.memo)
  return _internal_mutable_memo();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LightningInvoice

// map<string, string> memo = 1;
inline int LightningInvoice::_internal_memo_size() const {
  return memo_.size();
}
inline int LightningInvoice::memo_size() const {
  return _internal_memo_size();
}
inline void LightningInvoice::clear_memo() {
  memo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LightningInvoice::_internal_memo() const {
  return memo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LightningInvoice::memo() const {
  // @@protoc_insertion_point(field_map:chain.LightningInvoice.memo)
  return _internal_memo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LightningInvoice::_internal_mutable_memo() {
  return memo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LightningInvoice::mutable_memo() {
  // @@protoc_insertion_point(field_mutable_map:chain.LightningInvoice.memo)
  return _internal_mutable_memo();
}

// bytes r_hash = 2;
inline void LightningInvoice::clear_r_hash() {
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningInvoice::r_hash() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.r_hash)
  return _internal_r_hash();
}
inline void LightningInvoice::set_r_hash(const std::string& value) {
  _internal_set_r_hash(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.r_hash)
}
inline std::string* LightningInvoice::mutable_r_hash() {
  // @@protoc_insertion_point(field_mutable:chain.LightningInvoice.r_hash)
  return _internal_mutable_r_hash();
}
inline const std::string& LightningInvoice::_internal_r_hash() const {
  return r_hash_.GetNoArena();
}
inline void LightningInvoice::_internal_set_r_hash(const std::string& value) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningInvoice::set_r_hash(std::string&& value) {
  
  r_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.LightningInvoice.r_hash)
}
inline void LightningInvoice::set_r_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.LightningInvoice.r_hash)
}
inline void LightningInvoice::set_r_hash(const void* value, size_t size) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.LightningInvoice.r_hash)
}
inline std::string* LightningInvoice::_internal_mutable_r_hash() {
  
  return r_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningInvoice::release_r_hash() {
  // @@protoc_insertion_point(field_release:chain.LightningInvoice.r_hash)
  
  return r_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningInvoice::set_allocated_r_hash(std::string* r_hash) {
  if (r_hash != nullptr) {
    
  } else {
    
  }
  r_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash);
  // @@protoc_insertion_point(field_set_allocated:chain.LightningInvoice.r_hash)
}

// int64 value = 3;
inline void LightningInvoice::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::value() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.value)
  return _internal_value();
}
inline void LightningInvoice::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void LightningInvoice::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.value)
}

// int64 creation_timestamp = 4;
inline void LightningInvoice::clear_creation_timestamp() {
  creation_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::_internal_creation_timestamp() const {
  return creation_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void LightningInvoice::_internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_timestamp_ = value;
}
inline void LightningInvoice::set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.creation_timestamp)
}

// int64 settle_timestamp = 5;
inline void LightningInvoice::clear_settle_timestamp() {
  settle_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::_internal_settle_timestamp() const {
  return settle_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::settle_timestamp() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.settle_timestamp)
  return _internal_settle_timestamp();
}
inline void LightningInvoice::_internal_set_settle_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settle_timestamp_ = value;
}
inline void LightningInvoice::set_settle_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_settle_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.settle_timestamp)
}

// int64 expiry = 6;
inline void LightningInvoice::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::expiry() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.expiry)
  return _internal_expiry();
}
inline void LightningInvoice::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void LightningInvoice::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.expiry)
}

// uint64 add_index = 7;
inline void LightningInvoice::clear_add_index() {
  add_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningInvoice::_internal_add_index() const {
  return add_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningInvoice::add_index() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.add_index)
  return _internal_add_index();
}
inline void LightningInvoice::_internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  add_index_ = value;
}
inline void LightningInvoice::set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_add_index(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.add_index)
}

// uint64 settle_index = 8;
inline void LightningInvoice::clear_settle_index() {
  settle_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningInvoice::_internal_settle_index() const {
  return settle_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LightningInvoice::settle_index() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.settle_index)
  return _internal_settle_index();
}
inline void LightningInvoice::_internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  settle_index_ = value;
}
inline void LightningInvoice::set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_settle_index(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.settle_index)
}

// int64 amt_paid = 9;
inline void LightningInvoice::clear_amt_paid() {
  amt_paid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::_internal_amt_paid() const {
  return amt_paid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LightningInvoice::amt_paid() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.amt_paid)
  return _internal_amt_paid();
}
inline void LightningInvoice::_internal_set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_paid_ = value;
}
inline void LightningInvoice::set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_paid(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.amt_paid)
}

// .chain.LightningInvoice.InvoiceState state = 10;
inline void LightningInvoice::clear_state() {
  state_ = 0;
}
inline ::chain::LightningInvoice_InvoiceState LightningInvoice::_internal_state() const {
  return static_cast< ::chain::LightningInvoice_InvoiceState >(state_);
}
inline ::chain::LightningInvoice_InvoiceState LightningInvoice::state() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.state)
  return _internal_state();
}
inline void LightningInvoice::_internal_set_state(::chain::LightningInvoice_InvoiceState value) {
  
  state_ = value;
}
inline void LightningInvoice::set_state(::chain::LightningInvoice_InvoiceState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.state)
}

// .lndtypes.LightingInvoiceReason type = 11;
inline void LightningInvoice::clear_type() {
  type_ = 0;
}
inline ::lndtypes::LightingInvoiceReason LightningInvoice::_internal_type() const {
  return static_cast< ::lndtypes::LightingInvoiceReason >(type_);
}
inline ::lndtypes::LightingInvoiceReason LightningInvoice::type() const {
  // @@protoc_insertion_point(field_get:chain.LightningInvoice.type)
  return _internal_type();
}
inline void LightningInvoice::_internal_set_type(::lndtypes::LightingInvoiceReason value) {
  
  type_ = value;
}
inline void LightningInvoice::set_type(::lndtypes::LightingInvoiceReason value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chain.LightningInvoice.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnextPayment

// string transferId = 1;
inline void ConnextPayment::clear_transferid() {
  transferid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextPayment::transferid() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.transferId)
  return _internal_transferid();
}
inline void ConnextPayment::set_transferid(const std::string& value) {
  _internal_set_transferid(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.transferId)
}
inline std::string* ConnextPayment::mutable_transferid() {
  // @@protoc_insertion_point(field_mutable:chain.ConnextPayment.transferId)
  return _internal_mutable_transferid();
}
inline const std::string& ConnextPayment::_internal_transferid() const {
  return transferid_.GetNoArena();
}
inline void ConnextPayment::_internal_set_transferid(const std::string& value) {
  
  transferid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextPayment::set_transferid(std::string&& value) {
  
  transferid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.ConnextPayment.transferId)
}
inline void ConnextPayment::set_transferid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transferid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.ConnextPayment.transferId)
}
inline void ConnextPayment::set_transferid(const char* value, size_t size) {
  
  transferid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.ConnextPayment.transferId)
}
inline std::string* ConnextPayment::_internal_mutable_transferid() {
  
  return transferid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextPayment::release_transferid() {
  // @@protoc_insertion_point(field_release:chain.ConnextPayment.transferId)
  
  return transferid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextPayment::set_allocated_transferid(std::string* transferid) {
  if (transferid != nullptr) {
    
  } else {
    
  }
  transferid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transferid);
  // @@protoc_insertion_point(field_set_allocated:chain.ConnextPayment.transferId)
}

// string channelAddress = 2;
inline void ConnextPayment::clear_channeladdress() {
  channeladdress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextPayment::channeladdress() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.channelAddress)
  return _internal_channeladdress();
}
inline void ConnextPayment::set_channeladdress(const std::string& value) {
  _internal_set_channeladdress(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.channelAddress)
}
inline std::string* ConnextPayment::mutable_channeladdress() {
  // @@protoc_insertion_point(field_mutable:chain.ConnextPayment.channelAddress)
  return _internal_mutable_channeladdress();
}
inline const std::string& ConnextPayment::_internal_channeladdress() const {
  return channeladdress_.GetNoArena();
}
inline void ConnextPayment::_internal_set_channeladdress(const std::string& value) {
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextPayment::set_channeladdress(std::string&& value) {
  
  channeladdress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.ConnextPayment.channelAddress)
}
inline void ConnextPayment::set_channeladdress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.ConnextPayment.channelAddress)
}
inline void ConnextPayment::set_channeladdress(const char* value, size_t size) {
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.ConnextPayment.channelAddress)
}
inline std::string* ConnextPayment::_internal_mutable_channeladdress() {
  
  return channeladdress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextPayment::release_channeladdress() {
  // @@protoc_insertion_point(field_release:chain.ConnextPayment.channelAddress)
  
  return channeladdress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextPayment::set_allocated_channeladdress(std::string* channeladdress) {
  if (channeladdress != nullptr) {
    
  } else {
    
  }
  channeladdress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channeladdress);
  // @@protoc_insertion_point(field_set_allocated:chain.ConnextPayment.channelAddress)
}

// bytes value = 3;
inline void ConnextPayment::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextPayment::value() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.value)
  return _internal_value();
}
inline void ConnextPayment::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.value)
}
inline std::string* ConnextPayment::mutable_value() {
  // @@protoc_insertion_point(field_mutable:chain.ConnextPayment.value)
  return _internal_mutable_value();
}
inline const std::string& ConnextPayment::_internal_value() const {
  return value_.GetNoArena();
}
inline void ConnextPayment::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextPayment::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.ConnextPayment.value)
}
inline void ConnextPayment::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.ConnextPayment.value)
}
inline void ConnextPayment::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.ConnextPayment.value)
}
inline std::string* ConnextPayment::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextPayment::release_value() {
  // @@protoc_insertion_point(field_release:chain.ConnextPayment.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextPayment::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:chain.ConnextPayment.value)
}

// bytes fee = 4;
inline void ConnextPayment::clear_fee() {
  fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextPayment::fee() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.fee)
  return _internal_fee();
}
inline void ConnextPayment::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.fee)
}
inline std::string* ConnextPayment::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:chain.ConnextPayment.fee)
  return _internal_mutable_fee();
}
inline const std::string& ConnextPayment::_internal_fee() const {
  return fee_.GetNoArena();
}
inline void ConnextPayment::_internal_set_fee(const std::string& value) {
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextPayment::set_fee(std::string&& value) {
  
  fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.ConnextPayment.fee)
}
inline void ConnextPayment::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.ConnextPayment.fee)
}
inline void ConnextPayment::set_fee(const void* value, size_t size) {
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.ConnextPayment.fee)
}
inline std::string* ConnextPayment::_internal_mutable_fee() {
  
  return fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextPayment::release_fee() {
  // @@protoc_insertion_point(field_release:chain.ConnextPayment.fee)
  
  return fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextPayment::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:chain.ConnextPayment.fee)
}

// int64 timestamp = 5;
inline void ConnextPayment::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConnextPayment::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConnextPayment::timestamp() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.timestamp)
  return _internal_timestamp();
}
inline void ConnextPayment::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ConnextPayment::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.timestamp)
}

// .chain.ConnextPayment.ConnextPaymentType type = 6;
inline void ConnextPayment::clear_type() {
  type_ = 0;
}
inline ::chain::ConnextPayment_ConnextPaymentType ConnextPayment::_internal_type() const {
  return static_cast< ::chain::ConnextPayment_ConnextPaymentType >(type_);
}
inline ::chain::ConnextPayment_ConnextPaymentType ConnextPayment::type() const {
  // @@protoc_insertion_point(field_get:chain.ConnextPayment.type)
  return _internal_type();
}
inline void ConnextPayment::_internal_set_type(::chain::ConnextPayment_ConnextPaymentType value) {
  
  type_ = value;
}
inline void ConnextPayment::set_type(::chain::ConnextPayment_ConnextPaymentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chain.ConnextPayment.type)
}

// map<string, string> memo = 7;
inline int ConnextPayment::_internal_memo_size() const {
  return memo_.size();
}
inline int ConnextPayment::memo_size() const {
  return _internal_memo_size();
}
inline void ConnextPayment::clear_memo() {
  memo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ConnextPayment::_internal_memo() const {
  return memo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ConnextPayment::memo() const {
  // @@protoc_insertion_point(field_map:chain.ConnextPayment.memo)
  return _internal_memo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ConnextPayment::_internal_mutable_memo() {
  return memo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ConnextPayment::mutable_memo() {
  // @@protoc_insertion_point(field_mutable_map:chain.ConnextPayment.memo)
  return _internal_mutable_memo();
}

// -------------------------------------------------------------------

// Transaction

// uint32 asset_id = 1;
inline void Transaction::clear_asset_id() {
  asset_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_asset_id() const {
  return asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::asset_id() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.asset_id)
  return _internal_asset_id();
}
inline void Transaction::_internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asset_id_ = value;
}
inline void Transaction::set_asset_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:chain.Transaction.asset_id)
}

// .chain.OnChainTransaction onchain_tx = 2;
inline bool Transaction::_internal_has_onchain_tx() const {
  return transaction_case() == kOnchainTx;
}
inline bool Transaction::has_onchain_tx() const {
  return _internal_has_onchain_tx();
}
inline void Transaction::set_has_onchain_tx() {
  _oneof_case_[0] = kOnchainTx;
}
inline void Transaction::clear_onchain_tx() {
  if (_internal_has_onchain_tx()) {
    delete transaction_.onchain_tx_;
    clear_has_transaction();
  }
}
inline ::chain::OnChainTransaction* Transaction::release_onchain_tx() {
  // @@protoc_insertion_point(field_release:chain.Transaction.onchain_tx)
  if (_internal_has_onchain_tx()) {
    clear_has_transaction();
      ::chain::OnChainTransaction* temp = transaction_.onchain_tx_;
    transaction_.onchain_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chain::OnChainTransaction& Transaction::_internal_onchain_tx() const {
  return _internal_has_onchain_tx()
      ? *transaction_.onchain_tx_
      : *reinterpret_cast< ::chain::OnChainTransaction*>(&::chain::_OnChainTransaction_default_instance_);
}
inline const ::chain::OnChainTransaction& Transaction::onchain_tx() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.onchain_tx)
  return _internal_onchain_tx();
}
inline ::chain::OnChainTransaction* Transaction::_internal_mutable_onchain_tx() {
  if (!_internal_has_onchain_tx()) {
    clear_transaction();
    set_has_onchain_tx();
    transaction_.onchain_tx_ = CreateMaybeMessage< ::chain::OnChainTransaction >(
        GetArenaNoVirtual());
  }
  return transaction_.onchain_tx_;
}
inline ::chain::OnChainTransaction* Transaction::mutable_onchain_tx() {
  // @@protoc_insertion_point(field_mutable:chain.Transaction.onchain_tx)
  return _internal_mutable_onchain_tx();
}

// .chain.LightningPayment lightning_payment = 3;
inline bool Transaction::_internal_has_lightning_payment() const {
  return transaction_case() == kLightningPayment;
}
inline bool Transaction::has_lightning_payment() const {
  return _internal_has_lightning_payment();
}
inline void Transaction::set_has_lightning_payment() {
  _oneof_case_[0] = kLightningPayment;
}
inline void Transaction::clear_lightning_payment() {
  if (_internal_has_lightning_payment()) {
    delete transaction_.lightning_payment_;
    clear_has_transaction();
  }
}
inline ::chain::LightningPayment* Transaction::release_lightning_payment() {
  // @@protoc_insertion_point(field_release:chain.Transaction.lightning_payment)
  if (_internal_has_lightning_payment()) {
    clear_has_transaction();
      ::chain::LightningPayment* temp = transaction_.lightning_payment_;
    transaction_.lightning_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chain::LightningPayment& Transaction::_internal_lightning_payment() const {
  return _internal_has_lightning_payment()
      ? *transaction_.lightning_payment_
      : *reinterpret_cast< ::chain::LightningPayment*>(&::chain::_LightningPayment_default_instance_);
}
inline const ::chain::LightningPayment& Transaction::lightning_payment() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.lightning_payment)
  return _internal_lightning_payment();
}
inline ::chain::LightningPayment* Transaction::_internal_mutable_lightning_payment() {
  if (!_internal_has_lightning_payment()) {
    clear_transaction();
    set_has_lightning_payment();
    transaction_.lightning_payment_ = CreateMaybeMessage< ::chain::LightningPayment >(
        GetArenaNoVirtual());
  }
  return transaction_.lightning_payment_;
}
inline ::chain::LightningPayment* Transaction::mutable_lightning_payment() {
  // @@protoc_insertion_point(field_mutable:chain.Transaction.lightning_payment)
  return _internal_mutable_lightning_payment();
}

// .chain.LightningInvoice lightning_invoice = 4;
inline bool Transaction::_internal_has_lightning_invoice() const {
  return transaction_case() == kLightningInvoice;
}
inline bool Transaction::has_lightning_invoice() const {
  return _internal_has_lightning_invoice();
}
inline void Transaction::set_has_lightning_invoice() {
  _oneof_case_[0] = kLightningInvoice;
}
inline void Transaction::clear_lightning_invoice() {
  if (_internal_has_lightning_invoice()) {
    delete transaction_.lightning_invoice_;
    clear_has_transaction();
  }
}
inline ::chain::LightningInvoice* Transaction::release_lightning_invoice() {
  // @@protoc_insertion_point(field_release:chain.Transaction.lightning_invoice)
  if (_internal_has_lightning_invoice()) {
    clear_has_transaction();
      ::chain::LightningInvoice* temp = transaction_.lightning_invoice_;
    transaction_.lightning_invoice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chain::LightningInvoice& Transaction::_internal_lightning_invoice() const {
  return _internal_has_lightning_invoice()
      ? *transaction_.lightning_invoice_
      : *reinterpret_cast< ::chain::LightningInvoice*>(&::chain::_LightningInvoice_default_instance_);
}
inline const ::chain::LightningInvoice& Transaction::lightning_invoice() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.lightning_invoice)
  return _internal_lightning_invoice();
}
inline ::chain::LightningInvoice* Transaction::_internal_mutable_lightning_invoice() {
  if (!_internal_has_lightning_invoice()) {
    clear_transaction();
    set_has_lightning_invoice();
    transaction_.lightning_invoice_ = CreateMaybeMessage< ::chain::LightningInvoice >(
        GetArenaNoVirtual());
  }
  return transaction_.lightning_invoice_;
}
inline ::chain::LightningInvoice* Transaction::mutable_lightning_invoice() {
  // @@protoc_insertion_point(field_mutable:chain.Transaction.lightning_invoice)
  return _internal_mutable_lightning_invoice();
}

// .chain.EthOnChainTransaction ethonchain_tx = 5;
inline bool Transaction::_internal_has_ethonchain_tx() const {
  return transaction_case() == kEthonchainTx;
}
inline bool Transaction::has_ethonchain_tx() const {
  return _internal_has_ethonchain_tx();
}
inline void Transaction::set_has_ethonchain_tx() {
  _oneof_case_[0] = kEthonchainTx;
}
inline void Transaction::clear_ethonchain_tx() {
  if (_internal_has_ethonchain_tx()) {
    delete transaction_.ethonchain_tx_;
    clear_has_transaction();
  }
}
inline ::chain::EthOnChainTransaction* Transaction::release_ethonchain_tx() {
  // @@protoc_insertion_point(field_release:chain.Transaction.ethonchain_tx)
  if (_internal_has_ethonchain_tx()) {
    clear_has_transaction();
      ::chain::EthOnChainTransaction* temp = transaction_.ethonchain_tx_;
    transaction_.ethonchain_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chain::EthOnChainTransaction& Transaction::_internal_ethonchain_tx() const {
  return _internal_has_ethonchain_tx()
      ? *transaction_.ethonchain_tx_
      : *reinterpret_cast< ::chain::EthOnChainTransaction*>(&::chain::_EthOnChainTransaction_default_instance_);
}
inline const ::chain::EthOnChainTransaction& Transaction::ethonchain_tx() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.ethonchain_tx)
  return _internal_ethonchain_tx();
}
inline ::chain::EthOnChainTransaction* Transaction::_internal_mutable_ethonchain_tx() {
  if (!_internal_has_ethonchain_tx()) {
    clear_transaction();
    set_has_ethonchain_tx();
    transaction_.ethonchain_tx_ = CreateMaybeMessage< ::chain::EthOnChainTransaction >(
        GetArenaNoVirtual());
  }
  return transaction_.ethonchain_tx_;
}
inline ::chain::EthOnChainTransaction* Transaction::mutable_ethonchain_tx() {
  // @@protoc_insertion_point(field_mutable:chain.Transaction.ethonchain_tx)
  return _internal_mutable_ethonchain_tx();
}

// .chain.ConnextPayment connext_payment = 6;
inline bool Transaction::_internal_has_connext_payment() const {
  return transaction_case() == kConnextPayment;
}
inline bool Transaction::has_connext_payment() const {
  return _internal_has_connext_payment();
}
inline void Transaction::set_has_connext_payment() {
  _oneof_case_[0] = kConnextPayment;
}
inline void Transaction::clear_connext_payment() {
  if (_internal_has_connext_payment()) {
    delete transaction_.connext_payment_;
    clear_has_transaction();
  }
}
inline ::chain::ConnextPayment* Transaction::release_connext_payment() {
  // @@protoc_insertion_point(field_release:chain.Transaction.connext_payment)
  if (_internal_has_connext_payment()) {
    clear_has_transaction();
      ::chain::ConnextPayment* temp = transaction_.connext_payment_;
    transaction_.connext_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chain::ConnextPayment& Transaction::_internal_connext_payment() const {
  return _internal_has_connext_payment()
      ? *transaction_.connext_payment_
      : *reinterpret_cast< ::chain::ConnextPayment*>(&::chain::_ConnextPayment_default_instance_);
}
inline const ::chain::ConnextPayment& Transaction::connext_payment() const {
  // @@protoc_insertion_point(field_get:chain.Transaction.connext_payment)
  return _internal_connext_payment();
}
inline ::chain::ConnextPayment* Transaction::_internal_mutable_connext_payment() {
  if (!_internal_has_connext_payment()) {
    clear_transaction();
    set_has_connext_payment();
    transaction_.connext_payment_ = CreateMaybeMessage< ::chain::ConnextPayment >(
        GetArenaNoVirtual());
  }
  return transaction_.connext_payment_;
}
inline ::chain::ConnextPayment* Transaction::mutable_connext_payment() {
  // @@protoc_insertion_point(field_mutable:chain.Transaction.connext_payment)
  return _internal_mutable_connext_payment();
}

inline bool Transaction::has_transaction() const {
  return transaction_case() != TRANSACTION_NOT_SET;
}
inline void Transaction::clear_has_transaction() {
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}
inline Transaction::TransactionCase Transaction::transaction_case() const {
  return Transaction::TransactionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EthAccount

// string address = 1;
inline void EthAccount::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthAccount::address() const {
  // @@protoc_insertion_point(field_get:chain.EthAccount.address)
  return _internal_address();
}
inline void EthAccount::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:chain.EthAccount.address)
}
inline std::string* EthAccount::mutable_address() {
  // @@protoc_insertion_point(field_mutable:chain.EthAccount.address)
  return _internal_mutable_address();
}
inline const std::string& EthAccount::_internal_address() const {
  return address_.GetNoArena();
}
inline void EthAccount::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthAccount::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthAccount.address)
}
inline void EthAccount::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthAccount.address)
}
inline void EthAccount::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthAccount.address)
}
inline std::string* EthAccount::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthAccount::release_address() {
  // @@protoc_insertion_point(field_release:chain.EthAccount.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthAccount::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:chain.EthAccount.address)
}

// bytes nonce = 2;
inline void EthAccount::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthAccount::nonce() const {
  // @@protoc_insertion_point(field_get:chain.EthAccount.nonce)
  return _internal_nonce();
}
inline void EthAccount::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:chain.EthAccount.nonce)
}
inline std::string* EthAccount::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:chain.EthAccount.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& EthAccount::_internal_nonce() const {
  return nonce_.GetNoArena();
}
inline void EthAccount::_internal_set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthAccount::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthAccount.nonce)
}
inline void EthAccount::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthAccount.nonce)
}
inline void EthAccount::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthAccount.nonce)
}
inline std::string* EthAccount::_internal_mutable_nonce() {
  
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthAccount::release_nonce() {
  // @@protoc_insertion_point(field_release:chain.EthAccount.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthAccount::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:chain.EthAccount.nonce)
}

// bytes balance = 3;
inline void EthAccount::clear_balance() {
  balance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthAccount::balance() const {
  // @@protoc_insertion_point(field_get:chain.EthAccount.balance)
  return _internal_balance();
}
inline void EthAccount::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:chain.EthAccount.balance)
}
inline std::string* EthAccount::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:chain.EthAccount.balance)
  return _internal_mutable_balance();
}
inline const std::string& EthAccount::_internal_balance() const {
  return balance_.GetNoArena();
}
inline void EthAccount::_internal_set_balance(const std::string& value) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthAccount::set_balance(std::string&& value) {
  
  balance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthAccount.balance)
}
inline void EthAccount::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthAccount.balance)
}
inline void EthAccount::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthAccount.balance)
}
inline std::string* EthAccount::_internal_mutable_balance() {
  
  return balance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthAccount::release_balance() {
  // @@protoc_insertion_point(field_release:chain.EthAccount.balance)
  
  return balance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthAccount::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:chain.EthAccount.balance)
}

// -------------------------------------------------------------------

// EthToken

// string token_address = 1;
inline void EthToken::clear_token_address() {
  token_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthToken::token_address() const {
  // @@protoc_insertion_point(field_get:chain.EthToken.token_address)
  return _internal_token_address();
}
inline void EthToken::set_token_address(const std::string& value) {
  _internal_set_token_address(value);
  // @@protoc_insertion_point(field_set:chain.EthToken.token_address)
}
inline std::string* EthToken::mutable_token_address() {
  // @@protoc_insertion_point(field_mutable:chain.EthToken.token_address)
  return _internal_mutable_token_address();
}
inline const std::string& EthToken::_internal_token_address() const {
  return token_address_.GetNoArena();
}
inline void EthToken::_internal_set_token_address(const std::string& value) {
  
  token_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthToken::set_token_address(std::string&& value) {
  
  token_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthToken.token_address)
}
inline void EthToken::set_token_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthToken.token_address)
}
inline void EthToken::set_token_address(const char* value, size_t size) {
  
  token_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthToken.token_address)
}
inline std::string* EthToken::_internal_mutable_token_address() {
  
  return token_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthToken::release_token_address() {
  // @@protoc_insertion_point(field_release:chain.EthToken.token_address)
  
  return token_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthToken::set_allocated_token_address(std::string* token_address) {
  if (token_address != nullptr) {
    
  } else {
    
  }
  token_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_address);
  // @@protoc_insertion_point(field_set_allocated:chain.EthToken.token_address)
}

// bytes balance = 2;
inline void EthToken::clear_balance() {
  balance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthToken::balance() const {
  // @@protoc_insertion_point(field_get:chain.EthToken.balance)
  return _internal_balance();
}
inline void EthToken::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:chain.EthToken.balance)
}
inline std::string* EthToken::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:chain.EthToken.balance)
  return _internal_mutable_balance();
}
inline const std::string& EthToken::_internal_balance() const {
  return balance_.GetNoArena();
}
inline void EthToken::_internal_set_balance(const std::string& value) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthToken::set_balance(std::string&& value) {
  
  balance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chain.EthToken.balance)
}
inline void EthToken::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chain.EthToken.balance)
}
inline void EthToken::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chain.EthToken.balance)
}
inline std::string* EthToken::_internal_mutable_balance() {
  
  return balance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthToken::release_balance() {
  // @@protoc_insertion_point(field_release:chain.EthToken.balance)
  
  return balance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthToken::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:chain.EthToken.balance)
}

// int64 update_height = 3;
inline void EthToken::clear_update_height() {
  update_height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthToken::_internal_update_height() const {
  return update_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EthToken::update_height() const {
  // @@protoc_insertion_point(field_get:chain.EthToken.update_height)
  return _internal_update_height();
}
inline void EthToken::_internal_set_update_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  update_height_ = value;
}
inline void EthToken::set_update_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_update_height(value);
  // @@protoc_insertion_point(field_set:chain.EthToken.update_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chain::OnChainTransaction_TxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::OnChainTransaction_TxType>() {
  return ::chain::OnChainTransaction_TxType_descriptor();
}
template <> struct is_proto_enum< ::chain::EthOnChainTransaction_EthTxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::EthOnChainTransaction_EthTxType>() {
  return ::chain::EthOnChainTransaction_EthTxType_descriptor();
}
template <> struct is_proto_enum< ::chain::LightningPayment_PaymentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::LightningPayment_PaymentStatus>() {
  return ::chain::LightningPayment_PaymentStatus_descriptor();
}
template <> struct is_proto_enum< ::chain::LightningInvoice_InvoiceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::LightningInvoice_InvoiceState>() {
  return ::chain::LightningInvoice_InvoiceState_descriptor();
}
template <> struct is_proto_enum< ::chain::ConnextPayment_ConnextPaymentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::ConnextPayment_ConnextPaymentType>() {
  return ::chain::ConnextPayment_ConnextPaymentType_descriptor();
}
template <> struct is_proto_enum< ::chain::PaymentFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chain::PaymentFailureReason>() {
  return ::chain::PaymentFailureReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chain_2eproto
